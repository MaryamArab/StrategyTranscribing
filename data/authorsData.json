{
  "AUTHORS": {
    "0jfziD4HY6xwCE0FKfO0": {
      "CodebaseRequirements": "The developer should know where the metal image processing pipeline exists in the codebase",
      "Defect": "Using a Metal backed core image context to render to a MTKView",
      "Experience": "3",
      "JavaFramework": "blade",
      "JavaVersion": "java8",
      "KnowledgeRequirements": "The developer should have basic knowledge about the high level structures provided by Metal and how they work. This includes: the Metal Device, Command Queue, Command Buffers, and Render Encoders.",
      "ParticipationId": "7",
      "StrategyDefenition": "#Apple has recently moved to using the Metal programming language for GPU programming on iOS, replacing CoreImage and OpenGL.\n#While Metal offers many good features, sometimes it is quicker to use image processing features that have already been written\n#using CoreImage instead of taking the time to rewrite them in Metal. Apple provides an MTKView as a solution for easily rendering\n#Metal backed content to a view. This Strategy helps you to use CoreImage to render to a MTKView on iOS.\n\n#Required Tools and Environment\n- Assuming XCode is already installed on the system, project is checked out,\nand successfully building/running.\n- Assuming a Metal backed image processing pipeline has already been set up \nin the project\n\n#Required Knowledge\n- basic knowlege of Metal and CoreImage on iOS\n- experience with Swift or Objective-C \n\nSTRATEGY useCoreImageToRenderToMetalView()\n    #create a CoreImage Context using the Metal device\n    Find where the Metal device is being created in the project\n    IF a CoreImage Context has not already been created\n        Immediately after creating the metal device, create a CoreImage Context, passing the device in as the parameter\n    #verify the MTKView is framebufferOnly propety configured properly\n    IF the MTKView's framebufferOnly property is not set OR the MTKViews framebufferOnly property == TRUE\n        #this is a very important step as it allows a CIImage to be written directly \n        #to the MTKView's texture. Otherwise, the output will display a solid purple/pink color.\n        set the MTKView's framebufferOnly property to FALSE\n    #A new command buffer will be created on each render pass \n    Create a new command buffer using the Metal device's command queue\n    Create a new CIImage from the given pixel buffer you would like to render\n    #apply whatever CIFilters you would like to use on the CIImage (one after another)\n    FOR EACH 'filter' IN 'CIFilters'\n        DO applyFilter(CIImage)\n    #after the filters have been applied to the CIImage, render the CIImage to the MTKView\n    Use the CoreImage Context created earlier to render the CIImage directly to the MTKView's current drawable\n    #submit the command buffer to be executed by the GPU\n    Present the command buffer \n    Commit the commmand buffer\n    RETURN nothing\n    ",
      "ToolsRequirements": "Mac computer, XCode, an iPhone device to run the code on"
    },
    "Pilot2": {
      "DevelopmentExperiencePeriod": "2 years and 0 months",
      "Difficulties": ["How to test if my strategy is understandable by other human. It would be nice if there is a tool that check for ambiguity. ", "In general, would like to see a better tool support. writing text without like autocomplete and refactoring tools is a bit boring. I feel if the editor has better support for strategies authoring, I would enjoy writing long strategies.", "Writing comment vs statement was always a challenge. I guess to what extend my strategy should be abstract and explained by comments vs having more explicitly statements with less comments?"],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "1",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n\\n\\n\\n#Required Tools and Environments\\n\\nChrome web browser\\n\\nA JavaScript project\\n\\n#Required Knowledge\\n\\nBasic knowledge of how to use Chrome DevTools\\n\\nBasic knowledge of javaScript\\n\\n\\n\\nSTRATEGY performanceProfiler()\\n\\n# You need to first identify potential line of code\\n\\n# that might cause the performance overhead.\\n\\n# Look at data structures for any memory leaks\\n\\n# Look at loops and the code inside them.\\n\\n# Look at third party APIs calls.\\n\\n\\n\\nHypothesize where in your code the bottleneck are\\n\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n    # Add large numbers to data structures\\n\\n    # Make the loop execute thousands of time\\n\\n    # Call that third-party API hundreds of time\\n\\n    # If  you do so, you do not need to execute your code for long time\\n\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n\\n    Amplify line impact\\n\\n\\n\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\n\\nFor EACH line in 'randomLine'\\n\\n# These lines are your baseline for how should the code work\\n\\n# Make sure that you set similar values to that \\n\\n# you set to 'suspectLine'  \\n\\n    Amplify line impact\\n\\n\\n\\n#Lood your javaScript through the Chrome web browser\\n\\n#Open up the Chrome DevTools and head to the profiler\\n\\n# Run the application and wait until all the code execute\\n\\nRun the web application through google DevTools\\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n\\n\\n    #check how the code you suspect is the problem is acting comparing to \\n\\n    #the code that you are pretty sure has nothing to do \\n\\n    #with the performance issue\\n\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n\\n\\n\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n\\n        Fix\\n\\nRETURN nothing\\n\\n",
      "Task": "ProfilerTask",
      "Time": "17:49:10",
      "WebDevelopmentExperience": "3",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot3": {
      "DevelopmentExperiencePeriod": "5 years and 6 months",
      "Difficulties": ["the strategy itself is complex: debugging performance issues requires checking multiple interdependent representations of the program.\n\n", "comparing results makes it hard to describe the strategy or navigate back to a previous step makes it is hard to summarize: If I have to replicate the same strategy with some code change in order to check wether it is faulty or not and the continue the strategy. This means I have to create a main strategy and rewrite the current one to support multiple input and finally use them as a step for the main one.  ", "", "I realized I have to use variables while setting conditionals: several times I wrote the conditional and realize that it depended on something else. How do I know that conditional tests may be need to be reused later thus requiring refactoring the code"],
      "ReactDevelopmentExperience": "4",
      "ReactExperiencePeriod": "2 years and 0 months",
      "SoftwareDevelopmentExperience": "20",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the interaction tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long calls in the stackframe \\n                or Event Log where rendering type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n\\n                \\n\\n\\n\\n     \\n",
      "Task": "ProfilerTask",
      "Time": "16:21:19",
      "WebDevelopmentExperience": "7",
      "WebExperiencePeriod": "5 years and 0 months"
    },
    "Pilot4": {
      "DevelopmentExperiencePeriod": "8 years and 0 months",
      "Difficulties": ["I did not understand Roboto preconditions. Some of them were repetitive, so I was not sure which terms to actually use.", "Pictures tell a thousand words. There should be an easy way to capture screenshots for such profiling tasks instead of writing them down and hoping the person will understand.", "I dont know how much of a good job I did here, because there are already good resources from Google about using its Profiler. What did you expect me to do more?", "What does react (below) have to do with this strategy? I thought it was about Chrome profiler not react.\n", "If the task is about web development, I expect the example to reflect a similar task. Otherwise, it is difficult for me to really understand the level of detail you expect of me. Particularly, profiling is not same as Git merge. Git merge is not that simple (as in example) because you left a lot of steps that could possibly have gone wrong. Point is they both are difficult in their own ways, so I really did not get much by reading Git merge task for me to use it as reference for the Profiling task."],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "10",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\n\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n\\n",
      "Task": "ProfilerTask",
      "Time": "9:38:2",
      "WebDevelopmentExperience": "4",
      "WebExperiencePeriod": "8 years and 0 months"
    },
    "Pilot5": {
      "Difficulties": ["line 14: I wanted to make a recursive call to the strategy, not sure how I could do that, instead wrote it as a statement. \n", "Do While is not in ROBOTO, I decided to follow ROBOTO. ", "It is hard to draw a line between when to define a Variable, or when to informally mention it in Statements and let the user imply it in the future steps."],
      "ImplementedReactApplications": "2",
      "ImplementedSoftware": "15",
      "ImplementedWebApplications": "5",
      "ReactExperiencePeriod": "1 years and 9 months",
      "SoftwareDevelopmentExperiencePeriod": "0 years and 0 months",
      "StrategyDefinition": "# This strategy helps in using Chrome Profiler to improve your web app\\n# Required Tools and Environments\\nInstalling Chrome browser\\nRunning your App in Chrome\\nOpening the developer window, Performance Tab\\n# Required Knowledge\\nKnowledge in JavaScript to edit your App\\nSTRATEGY ChromeProfiler()\\n    # To avoid having tons of data to process, record and process data in small batches\\n    Start recording in the profiler before event that is running slow\\n    Perform the actions on the App\\n    Stop recording\\n    IF the delay is not observed in the recorded frames\\n        Restart the strategy with a wider time frame for recording\\n        RETURN nothing\\n    # Search for slow frames in the top window of the profiler       \\n    SET 'slowFrames' TO slowly loaded slowFrames\\n    FOR EACH 'frame' IN 'slowFrames'\\n        # frame range is set in the profiler\\n        set the frame range to the start and end of the CPU usage mountain containing the 'frame'\\n        # The Flame chart shows the stack of actions and events, by hovering over elements in the stack, the running time will be displayed\\n        SET 'suspiciousEvents' TO events and actions that take a lot of time in the Flame chart\\n        FOR EACH 'event' IN 'suspiciousEvents'\\n            Use the data in the Event Log and Bottom-Up windows in the profiler to find the relevant pieces of code in your App\\n            check the parts of the code of your App that are responsible in triggering 'event'\\n            IF you changed anything and guessing it has improved the performance of the App\\n                DO ChromeProfiler()\\n                RETURN nothing\\n",
      "Task": "ProfilerTask",
      "Time": "15:45:40",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot7": {
      "ConcentrationDifficulty": "I just tried to think of what I would do when I encounter CSS bugs (I am personally not a fan of css) so I try to do out-of-box css whenever possible.",
      "ConcentrationDifficulty_Idea": "agree",
      "Difficulties": ["I've learned that browsing through StackOverflow is a key part of debugging any code but it was challenging to write concrete strategies for what developers should be looking for in StackOverflow posts."],
      "GuidelinesSupportDifficulty": "Yeah, the tutorial at the beginning comparing good strategy writing and bad strategy writing was useful",
      "GuidelinesSupportDifficulty_Idea": "stronglyAgree",
      "ImplementedSoftware": "2",
      "ImplementedWebApplications": "5",
      "NoviceUnderstandabilityDifficulty": "It is not that hard to describe the concrete steps they should be taking -- but it is more challenging to list out the questions that they should be asking when they are reading their code",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "Yeah, it was useful -- but I didn't actively try to follow the syntax. I only mimicked it.",
      "RobotoSupportDifficulty_Idea": "agree",
      "SoftwareDevelopmentExperiencePeriod": "1 years and 0 months",
      "StrategyDefinition": "# This strategy helps you identify...\\n# Required tools and environment\\nHave Node.js installed\\nHave live-server installed\\nHave at least 1 html with file with along with some CSS\\n\\n# Required knowledge\\nKnowledge of how to work with the terminal and run commands\\nReading HTML code\\nReading css and adding css to HTML code\\n\\nSTRATEGY DebugCSS()\\n    Open the terminal and navigate to your project directory where the html files are\\n    Run `live-server` in the terminal\\n    IF the command runs and opens a browser tab\\n        Once you're on the tab, right click\\n        From the menu select `inspect`. It opens Chrome developer tools\\n        Make sure you are on the elements tab\\n        Scroll through the html code and click on the element with faulty behavior\\n        The bottom half of developer tools now focuses on this element\\n        On the styles tab, you should see information on what styles were applied and what weren't.\\n        Identify what styles are overriding the intended CSS\\n        SET `conflictingCSS TO css classes/ids with conflicts \\n        FOR EACH conflict IN conflictingCSS\\n            DO attemptFix(conflict)\\n    IF the command produces errors\\n        Revist the Required Tools and Environment section of this STRATEGY\\n        Make sure you've installed live-server\\n    RETURN Nothing\\n\\n\\nSTRATEGY attemptFix()\\n    Open the html and css code in your favorite code editor\\n    # id styles take priority over class styles\\n    IF your CSS does not obey the correct css priority hierarchy\\n        Redefine the css\\n    IF css hierarchy looks right\\n        Do a stackoverflow search describing the problem\\n        Pick the post that matches your situation\\n    IF browsing doesn't work\\n        Look up alternative ways of acheiving the same effect\\n    RETURN Nothing\\n    \\n",
      "StrategyEndingDifficulty": "I could enumerate all the possible thinks for certain cases -- looking through StackOverflow for example. I had to leave that step pretty generic which is probably unhelpful.",
      "StrategyEndingDifficulty_Idea": "stronglyAgree",
      "Task": "CssDebuggingTask",
      "Time": "17:30:31",
      "TimeConsumptionDifficulty": "I think it depends on the problem that you're trying to write a strategy for",
      "TimeConsumptionDifficulty_Idea": "neutral",
      "TranslationDifficulty": "Since I wasn't working with a concrete problem it was really challenging to describe a strategy that should in theory help with any CSS problem.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot8": {
      "ConcentrationDifficulty": "I had to think back to some common use cases for error handling, and when I wrote it I was primarily thinking about forms and authentication. I tried generalizing by specifying if the component is \"acting irregularly\", but that is a bit broad of a statement. ",
      "ConcentrationDifficulty_Idea": "stronglyAgree",
      "Difficulties": [],
      "GuidelinesSupportDifficulty": "If it becomes standard and less generalizable and can cover all use cases, I think it can definitely help express strategies. ",
      "GuidelinesSupportDifficulty_Idea": "agree",
      "ImplementedSoftware": "18",
      "ImplementedWebApplications": "18",
      "NoviceUnderstandabilityDifficulty": "I think if you make it granular enough it can be understandable for novice developers but it was difficult to specify the base knowledge of the user for something as general as error handling. Errors often occur with things that are out of the developer's domain knowledge.",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "I was not given a reference for how to set variables to the output of a function, so I did \"SET X to DO functionName()\" instead. I think there could be better ways to express general things. I did \"SET 'consoleError' to the error\" (error being the error I had the developer locate) for example, which felt like it didn't follow the syntax well. ",
      "RobotoSupportDifficulty_Idea": "disagree",
      "SoftwareDevelopmentExperiencePeriod": "2 years and 0 months",
      "StrategyDefinition": "# This strategy helps you verify your error handling logic in\\n# front-end web development\\n\\n# Preferred Tools and Environments\\nAn integrated development environment with error checking\\nA component that crashes occasionally for an unknown reason or acts irregularly\\n\\n# Required/Preferred knowledge\\nIntroductory computer science knowledge (CSE 142 @ UW)\\nBasic JavaScript knowledge\\nTry-catch knowledge preferred\\nComponent separation knowledge\\nDebugger/browser console knowledge\\n\\nSTRATEGY ErrorHandle()\\n    SET a component-wide global 'errorMessage' to be empty\\n    # Find the component and function in that component that acts irregularly\\n    IF the component is acting irregularly or crashing\\n        SET 'irregularComponent' to the component\\n        Locate any error messages in the browser's developer console and find the line the error occurs within the 'irregularComponent'\\n        SET 'irregularComponentFunction' to the function generating this error\\n        SET 'consoleError' to the error\\n    IF 'consoleError' is not anything\\n        RETURN nothing\\n    ELSE\\n        # Identifying the reason the line is causing issues can be\\n        # difficult. It can be a variety of different reasons for your\\n        # specific use case. \\n        SET 'reasonsCrashing' to the reasons the line inside 'irregularComponentFunction' is causing issues by reading the 'consoleError' over\\n        DO createErrorHandle('reasonCrashing') \\n        RETURN nothing\\n\\nSTRATEGY createErrorHandle('reasonCrashing')\\n    FOR EACH 'reason' in 'reasonCrashing'\\n        # Create an error handling case\\n        # It is okay that some errors will take priority\\n        createErrorHandleCase('reason')\\n    RETURN nothing\\n\\nSTRATEGY createErrorHandleCase('reason')\\n    # Most of the time, the reason why it is crashing relates to the\\n    # user's input, or something you want to share with the user.\\n    IF 'reason' shows implementation detail\\n        IF 'reason' was caused by the user's input\\n            SET 'allErrors' global to be a reason relating to the user's input\\n        IF 'reason' was caused internally\\n            SET 'allErrors' to a general \"Something went wrong\" message \\n    ELSE \\n        SET 'allErrors' global to the reason why it is crashing\\n    RETURN nothing\\n        \\n ",
      "StrategyEndingDifficulty": "For something like error handling, you cannot say for sure when all the errors are fixed. ",
      "StrategyEndingDifficulty_Idea": "agree",
      "Task": "ErrorHandlingTask",
      "Time": "12:52:19",
      "TimeConsumptionDifficulty": "It required a lot of thought. I think it is definitely a useful use of my time, and if it were my job to do this, I would have some fun with it but only for brief periods of time. It is sorta like programming. It definitely is time consuming. ",
      "TimeConsumptionDifficulty_Idea": "agree",
      "TranslationDifficulty": "I found it difficult to express what was going through my mind. I was thinking about React because it was a component based framework/library, but I tried to generalize this to anything that uses some sort of component based framework/library. I have been doing error handling for such a long time that it's second nature and difficult to generalize.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot9": {
      "CommonDifficulties": ["TranslationDifficultyIdea: neutral", "TranslationDifficulty: Some strategies are much easier to explain with a short video or demo, especially when demoing a specific tool. ", "NoviceUnderstandabilityDifficulty_Idea: agree", "NoviceUnderstandabilityDifficulty : I'm sure that my strategy used knowledge that isn't universally shared (and might be considered an expert blind spot), but, not having a specific instance of this to point to, I'm hopeful that my strategy would be understandable.", "ConcentrationDifficulty_Idea: neutral", "ConcentrationDifficulty: I'm confident it could've taken more concentration, effort and energy! It's challenging to anticipate what might go wrong when a novice tries to follow my strategy. ", "TimeConsumptionDifficulty_Idea: disagree", "TimeConsumptionDifficulty: It's worthwhile, but I feel that it might be better to provide strategies on-demand, rather than in advance, though this would require a repository of strategies to exist. I think writing a strategy without much context on what the learner needs is challenging.", "StrategyEndingDifficulty_Idea: stronglyAgree", "StrategyEndingDifficulty: A syntactic construct for finishing might be nice here -- it's awkward to return an action \"Done\"", "RobotoSupportDifficulty_Idea: neutral", "RobotoSupportDifficulty: Preconditions for using a strategy are a great idea, although it's extremely tempting to just write \"basic understanding of x\" without specifics of what a basic understanding means. I feel that if a language includes an IF construct, it should also have ELSE and ELSE IF constructs. Programmatic articulation is a good idea, but might be challenging for novices to understand. I've got some concern that some strategies might not express themselves well programmatically, like \"try this for a while, if you don't get anywhere in several minutes, try this\" or \"look at these three examples and determine which one is most intuitive to you\"", "GuidelinesSupportDifficulty_Idea: agree", "GuidelinesSupportDifficulty: It's definitely a good way to constrain strategy expression to a format that should be easier to understand than a paragraph of text. Again, I worry that novices, especially those without a good grasp of computation, might struggle with the programmatic format. "],
      "OtherDifficulties": ["I haven't actually done CSS debugging, I had to do some research to understand the typical debugging approach.", "It's hard to use text to describe where buttons are (line 11)", "There isn't a good way to express \"if you got here, I don't know how to help you anymore, go find a different strategy\" (line 23)", "It's hard to articulate when the strategy was successful or when the strategy failed -- I feel that it should be based in return conditions (line 18, 22, 23)", "Articulating \"fix the bug\" is hard, this definitely feels like a big expert blind spot."],
      "StrategyDefinition": "# This strategy helps in debugging CSS\\n#Required Tools and Environments\\nFirefox web browser\\n#Required Knowledge\\nBasic understanding of CSS\\nUnderstanding of the CSS Cascade (https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade)\\nSTRATEGY DebugCss()\\n    Open file with bug in Firefox\\n    Right-click on the page and select \"Inspect Element\"\\n    Move to the portion of the page with the bug\\n    To the left of the \"Inspector\" tab, click the element picker button\\n    Click the page element that isn't displaying properly\\n    # The center column of the Inspector shows all styles associated with the element, in order of precedence\\n    Find the style element that should be shown\\n    IF the desired style is crossed out\\n        Find CSS style that overwrote it by scrolling up\\n        Change the desired style to have higher precedence or the shown style to have lower precedence, or change the inheritance structure\\n        return done\\n    IF the desired style isn't shown\\n        Add the desired style to the project's CSS sheet\\n        DebugCss()\\n        return done\\n    return nothing",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jun 01 2019 14:26:06 GMT-0400 (Eastern Daylight Time), 14:26:616:42:32",
      "WorkExperiences": ["workExperiencePeriod: 6 years and 0 months", "softwareDevelopmentExperience: 12", "biggestSoftware: An operating system with 20+ system calls (including fork(), exec(), exit(), wait()), on-demand paging, ZFOD, and a user-space threading library.", "webExperiencePeriod: 0 years and 2 months", "webDevelopmentExperience: 1", "biggestWebApplication: [object HTMLTextAreaElement]"]
    },
    "pilot1": {
      "Difficulties": ["Defining new keyword like WHILE, LIST, SORT,\nI was not sure they are supported in the Rboto or not. It was better if  somehow it accepts or rejects keywords", "I had exprience in other profilers, but i was not familiar with React profiler\nbeacuse of that i had difficulty for writing strategy"],
      "JavaScriptExperience": "1",
      "ReactExperience": "1",
      "SoftwareDevelopmentExperience": "7",
      "StrategyDefinition": "# strategy for effectively profiling any React application.\\n\\n# Required tools and environment\\n install React 16.5 or newer\\n add DevTools profiler plugin\\n# Required knowledge\\n Basic knowledge of React\\n read profiling tool tutorials\\n\\n STRATEGY profiling ()\\n    #open the DevTools\\n    open the DevTools in a browser\\n   WHILE you think the performance is fine\\n        # record the profiler\\n        start recording profiler\\n        # first landing page of the application\\n        open the first page of the application\\n        # play with most of components of the application for logging\\n        click or open on most of components of the application in order to be recorded in profiling\\n        # stop profiler\\n        in DevTools click stop button\\n        # watch Component chart\\n        watch component chart for finding which componets consume more resource like time or memory\\n        SET 'ComponentNeedProfiling' to the list of components that you watch in the previous step and they consume most of the resource\\n        FOR EACH 'component' IN 'ComponentNeedProfiling' \\n            run flame chart\\n            ADD 'logsOfFlames' store a log from the output of flame chart for each component\\n        SORT 'logsOfFlames' sort based on the time consumption or resource, it should be descening\\n        FIX  watch the flame report and try to fix the first component in the sorted list\\n    ",
      "Time": "11:53:51",
      "WebExperience": "7"
    }
  }
}