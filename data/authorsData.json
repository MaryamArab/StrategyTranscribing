{
  "AUTHORS": {
    "0jfziD4HY6xwCE0FKfO0": {
      "CodebaseRequirements": "The developer should know where the metal image processing pipeline exists in the codebase",
      "Defect": "Using a Metal backed core image context to render to a MTKView",
      "Experience": "3",
      "JavaFramework": "blade",
      "JavaVersion": "java8",
      "KnowledgeRequirements": "The developer should have basic knowledge about the high level structures provided by Metal and how they work. This includes: the Metal Device, Command Queue, Command Buffers, and Render Encoders.",
      "ParticipationId": "7",
      "StrategyDefenition": "#Apple has recently moved to using the Metal programming language for GPU programming on iOS, replacing CoreImage and OpenGL.\n#While Metal offers many good features, sometimes it is quicker to use image processing features that have already been written\n#using CoreImage instead of taking the time to rewrite them in Metal. Apple provides an MTKView as a solution for easily rendering\n#Metal backed content to a view. This Strategy helps you to use CoreImage to render to a MTKView on iOS.\n\n#Required Tools and Environment\n- Assuming XCode is already installed on the system, project is checked out,\nand successfully building/running.\n- Assuming a Metal backed image processing pipeline has already been set up \nin the project\n\n#Required Knowledge\n- basic knowlege of Metal and CoreImage on iOS\n- experience with Swift or Objective-C \n\nSTRATEGY useCoreImageToRenderToMetalView()\n    #create a CoreImage Context using the Metal device\n    Find where the Metal device is being created in the project\n    IF a CoreImage Context has not already been created\n        Immediately after creating the metal device, create a CoreImage Context, passing the device in as the parameter\n    #verify the MTKView is framebufferOnly propety configured properly\n    IF the MTKView's framebufferOnly property is not set OR the MTKViews framebufferOnly property == TRUE\n        #this is a very important step as it allows a CIImage to be written directly \n        #to the MTKView's texture. Otherwise, the output will display a solid purple/pink color.\n        set the MTKView's framebufferOnly property to FALSE\n    #A new command buffer will be created on each render pass \n    Create a new command buffer using the Metal device's command queue\n    Create a new CIImage from the given pixel buffer you would like to render\n    #apply whatever CIFilters you would like to use on the CIImage (one after another)\n    FOR EACH 'filter' IN 'CIFilters'\n        DO applyFilter(CIImage)\n    #after the filters have been applied to the CIImage, render the CIImage to the MTKView\n    Use the CoreImage Context created earlier to render the CIImage directly to the MTKView's current drawable\n    #submit the command buffer to be executed by the GPU\n    Present the command buffer \n    Commit the commmand buffer\n    RETURN nothing\n    ",
      "ToolsRequirements": "Mac computer, XCode, an iPhone device to run the code on"
    },
    "Auth1": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Not really because I had to think about the scenarios I run into and then try to write something which is generic enough without knowing the problem. However, there may be issues where you really have to concentrate to write down a proper strategy. ",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "It gives it a standardized and structured format which could be easier for any developer to follow. They need to be familiar with some programming style though. \nFor example, a developer who mainly works with HTML and CSS may not quickly grasp the syntaxes and format mentioned for Roboto strategy. ",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's a bit hard because there may be multiple ways to troubleshoot and debug an issue and some general strategy may not give an accurate way of diagnosing a problem. \nAlso, a part of strategy could be to ask the question to a novice developer about the problem to come up with a proper strategy. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "For the most part, yes, but there might be something that it's missing. For example, I didn't see anything about ELSE condition along with IF",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "It depends on the problem. ",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "It takes time to write something down in a proper, strucutured format over just talking to someone or even writing it down based on the exact issue. ",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's not hard to translate thoughts and strategies into works but also it's not easy either. It's much easier if it's done in person or you are talking to that person over writing it down.",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["I didn't see if Roboto supports ELSE conditions so I think that would be helpful. \nHaving something like tagging an action could be beneficial. E.g. if you tag a specific line or action with something, you can reference that tag somewhere else in the strategy. The concept may be similar to Calls but there's no function or sub-strategy in there\nMaybe having something like GOTO could be helpful in instances where you want the user to go to a specific line in the strategy, it could use tag name to point the user to"],
      "StrategyDefinition": "# This strategy is to troubleshoot and debug CSS issues on a web page where appropriate styling is not being applied on an element\\n\\n# Required Knowledge\\n\\nBasic HTML knowledge\\n\\nBasic CSS knowledge\\n\\nBasic familiarity with broswer dev tools\\n\\n\\n\\n#Required Tools and Environments\\n\\n#Any of the modern browsers would work: Chrome, Firefox, IE Edge, Safari as all come with dev tools these days\\n\\n#For this strategy I am going to go with Chrome but the strategy applies to other browsers as well\\n\\nChrome or Firefox\\n\\n#IDE environment like Visual Studio Code, Brackets, Notepad++\\n\\n#For this strategy, I am going to consider Notepad++\\n\\n\\n\\nSTRATEGY DebugCSS()\\n\\n\\n#Open the web page in your browser where you have CSS issue\\n\\n\\nOpen web page in Chrome\\n\\n\\nSET 'wrongCSSElements' to the elements that have wrong styling applied\\n\\n\\nFOR EACH 'wrongCSSElement' IN 'wrongCSSElements'\\n\\n\\n\\nRight-click on the element that doesn't have the right styling \\n\\n\\n\\nClick on \"Inspect Element\"\\n\\n\\n\\n#This will open the chrome dev tools either on the side or in the bottom by default\\n\\n\\n\\nThis shows Chrome developer tools \\n\\n\\n\\nThe element will be highlighted in there\\n\\n\\n\\n# Left side shows HTML and right side shows the styling for that element\\n\\n\\n\\nOn the right side, it shows the styling applied to that element\\n\\n\\n\\n# Sometimes the wrong styling is coming from an element's parent or something defined at a global level\\n\\n\\n\\nIF you see the incorrect styling in there\\n\\n\\n\\n\\nChange it in the dev tools to see the changes in your browser in real-time\\n\\n\\n\\nELSE \\n\\n\\n\\n\\nscroll down to other styles to identify the style that is overwriting the right style\\n\\n\\n\\n\\nChange it in the dev tools to see the changes in your browser in real-time\\n\\n\\n\\n#The site could be using multiple css files, dev tools shows the CSS file name where the style comes from\\n\\n\\n\\nCheck the CSS file where the wrong style is coming from\\n\\n\\n\\nOpen the CSS file in Notepad++\\n\\n\\n\\nFind the CSS class in this file and update it\\n\\n\\n\\n\\nRETURN nothing",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jun 24 2019 22:49:05 GMT-0400 (Eastern Daylight Time), 22:49:5",
      "WorkExperiences": {
        "background": "I am a full stack developer with an experience of over 8 years. For back-end, I am proficient with ASP.NET and SQL DB. ",
        "biggestSoftware": "Created an application that syncs the user data and their permissions to access the website between the CMS, Database and Salesforce. The application and its features were role and access based, so depending on the roles of a user and permissions set on the pages, a user will have access to. A user has to pay to get access to different roles, so it is very critical that they have access to only what is required, and shouldn't be able to access other stuff. \nThe application runs through all users and ensures everything is in sync and also logs everything with timestamp. \n",
        "biggestWebApplication": "We got new conference registration vendor which handles conference logistics and registration. They should check if a user already exists in the database, if not, it reates their record and order in the vendor database, and should do the same in our systems. \nI created APIs for them to check if a user exists, create users, create orders, apply payment records etc, along with some detailed logging to create reports to be analyzed later to ensure the integration worked well.  ",
        "softwareDevelopmentExperience": "3",
        "webDevelopmentExperience": "7",
        "webExperiencePeriod": "8 years and 0 months",
        "workExperiencePeriod": "8 years and 0 months"
      }
    },
    "Auth13": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I spent far more 45 minutes to write this strategy, although generally speaking, css debugging is amongst the easiest ones",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "It helped for sure. ",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Some general concepts can be strategized, but development comes with some unexpected outcomes that it is hard to write strategies when outcome is unexpected ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "It is a new idea and it can be effective. Roboto language can make it more opinionated to write strategies. It is some kind of standardizing for writing strategies.",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "I don't think so, It is like writing a program. every good programmer comes with a plan how to wire its code. programming strategies is no exception.",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "It is tiring because you need to check if you have included all the cases could happen",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "Some edge cases is hard to include in a strategy as a general recipe. Also, sometimes you need to show a demo or some sort of an example to make your point.",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": ["When going through tutorials about how to use Roboto, I found it difficult when a statement is finished (I mean, some times I thought the statement sentence is just wrapped to the next line, because not enough space was there). Maybe if you could add some sort of line termination like semicolon \";\" or just period \".\", since the statement will be read by humans. "],
      "StrategyDefinition": "# This Strategy helps developer fix the issue of an element with undesired visual/position style.\\n#Required Tool and Environment\\nWeb Browser(Google chrome is preferred)\\n#Required Knowledge\\nBasic Knowledge of css and html\\nSTRATEGY DebugCss()\\n    Open your web app and go to the page with undesired element\\n    SET 'buggedElement' TO element with undesired style and positioning\\n    # The \"inspect\" action name might be different from Browser to Browser\\n    Right click on 'buggedElement' and click on inspect\\n    # An extra window opens with some tabs like Element, Console and Styles\\n    Click on Styles tab in the inspect window\\n    # Make sure your buggedElement is highlighted or chosen\\n    # you will be able to see a list of stylings applied to element\\n    IF 'buggedElement' has issue when hovering or focusin on it\\n        # When clicking on :hov, few checkboxes appears\\n        # :hover, :focus, :active  are amongst them\\n        Click on \":hov\" and check all the boxes that applies\\n    \\n    IF 'buggedElement' issue is positioning\\n        SET 'position' TO 'buggedElement' position proptery value\\n        IF 'position' is not absolute\\n            DO FixCss('buggedElement')\\n            RETURN nothing\\n        \\n        # element with position absolute is positioned relative to the nearest positioned ancestor\\n        # Note: A \"positioned\" element is one whose position is anything except static.\\n        IF 'position' is absolute\\n            # desired parent means the parent element that buggedElement was supposed to be relative to\\n            Look up at element's ancestors and find the desired parent\\n            SET 'parent' TO desired parent element\\n            Change the 'parent' position proptery to relative\\n            RETURN nothing\\n    \\n    IF 'buggedElement' issue is styling\\n        DO FixCss('buggedElement')\\n        RETURN nothing\\n\\nSTRATEGY FixCss(buggedElement)\\n    # You can use filter input to search for it\\n        # Or you can scroll through the styles manually\\n        Search through the stylings to find where it gets its undesired value\\n        SET 'undesiredStyling' TO the line number and css file found in the search\\n        IF 'undesiredStyling' is not found\\n            # You will find all stylings applied to the element here\\n            # Once you found the stylings you were looking for\\n            # You can click small arrow to jump to the place it gets its value\\n            Click on Computed tab and use filter to search\\n            SET 'undesiredStyling' TO line number found here\\n        SET 'perfectStyleList' TO an empty list of css properties\\n        UNTIL buggedElement has desired styling\\n            # you can add or change different css styles to the element\\n            # it then applies instantly to element stylings\\n            Use element.Style to apply css to buggedElement\\n            add the style proptery to 'perfectStyleList'\\n        DO ApplyCssToElement(buggedElement, 'perfectStyleList')\\n      \\nSTRATEGY ApplyCssToElement(element, style)\\n    # Css rules are cascading. The one with most priority applies\\n    # This is how priority gets evaluated\\n    # !important |  style=\"\" | id selector | class attribute, psudo class selector | type selector and psudo element\\n    # For easy explanation: use this url: http://qnimate.com/dive-into-css-specificity/\\n    # Also the if there are two css files having the same selector, the file placed last in order is evaluated\\n    IF style has to be applied to only this element\\n        # e.g. choose last css file in order, use id selector and so on\\n        Use strogest selector, apply style to element\\n        RETURN nothing\\n    IF style has to be applied on many elements\\n        use class selector, apply style to element\\n        RETURN nothing\\n    \\n",
      "Task": "CssDebuggingTask",
      "Time": "Sat Jun 22 2019 12:41:48 GMT-0400 (Eastern Daylight Time), 12:41:48",
      "WorkExperiences": {
        "background": "I am working as senior software developer in ITS department at Old Dominion University. I have been involved in many projects such as student attendance project, web portal application. \nMy LinkedIn account: https://www.linkedin.com/in/meysam-abolghasemi-7b867998/\nMy Github account: meysamabl@gmail.com",
        "biggestSoftware": "I have been developing in web portal application for my university where students, staffs and faculties can interact with it as dashboard.",
        "biggestWebApplication": "Same answer as above. All my industrial experience was involved in web application development of some sort developing with different technologies. Any non web application development that I have been involved was mostly limited to course based projects or some self-learning projects. ",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "10",
        "webExperiencePeriod": "5 years and 0 months",
        "workExperiencePeriod": "5 years and 0 months"
      }
    },
    "Auth14": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Yes, I needed a long time to figure out what to write and needed the time to concentrate. Eventually I ended up just writing my best attempt, but I don't think what I wrote is great.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "I would appreciate a lot more guidance, especially examples",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Having more examples targeted at various expertise levels would help. It's been a long time since I was a \"novice\" developer and I don't look at a single guide to do anything, I normally piece information from various sources as well as my experience together, so it's hard to know how much detail or not to include",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "It seems ok. it leaves a lot of room for interpretation. The structure helps a bit, but I'm not sure if it really adds much over clear directions.",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "The instructions say not to include instructions on resolving the problem, but some level of resolution is necessary to make sure the change actually worked correctly.",
        "StrategyEndingDifficulty_Idea: ": "agree",
        "TimeConsumptionDifficulty: ": "It takes a long time to figure out how to write in a clear and concise manner and it's very difficult to know if somebody else would understand the instructions.",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "The biggest issue is not having some example issues to work against and the exact knowledge level of the user. Depending on the CSS knowledge of the user, having the strategy only partially helps. They may need an in-depth lesson on CSS as well and it's not clear whether to include something like that in the lesson",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This Strategy helps you debug a problem in which the visual style of an element is in some way incorrect\\n# Required Tools and Environments\\n# These directions will mostly work in another browser, but are written specific to Chrome\\nChrome web browser\\nText editor\\n# Required knowledge\\nBasic CSS knowledge\\nSTRATEGY debugCSSProblem()\\n    Open Chrome to web page with visual problem\\n    Right click on the html element with the problem and click \"Inspect Element\"\\n    Look at Styles panel\\n    Make a guess at which property(s) could be the problem depending on what the visual issue is(eg fontSize, width, color, etc)\\n    In the Styles panel try adjusting the property you think could be the problem and see if your problem is resolved\\n    IF the CSS changes aren't leading to the right fix\\n        In the Elements panel, check if your HTML structure is what you expect it to be\\n        IF the structure isn't correct\\n            Adjust the HTML in the Elements panel to fix the structure\\n            In the Styles panel adjust the CSS properties until the problem is resolved\\n    Apply the CSS changes you made to your actual code base\\n    IF you made HTML changes\\n        Apply the HTML changes to your template files\\n    Re-build your changes\\n    Verify you see the correct change in the browser",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jul 08 2019 15:15:08 GMT+0200 (Central European Summer Time), 15:15:8",
      "WorkExperiences": {
        "background": "https://www.linkedin.com/in/adwmayer",
        "biggestSoftware": "Yelp web application. I was involved in writing major pieces of the UI/UX as well as the apis and backends.",
        "biggestWebApplication": "see above",
        "softwareDevelopmentExperience": "20",
        "webDevelopmentExperience": "20",
        "webExperiencePeriod": "13 years and 0 months",
        "workExperiencePeriod": "13 years and 0 months"
      }
    },
    "Auth17": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "depend on how many part in the strategies we planned out. ",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "it is at some point, it help me think what I should I do for my work project. ",
        "GuidelinesSupportDifficulty_Idea: ": "neutral",
        "NoviceUnderstandabilityDifficulty : ": "it is hard because for many developers, we don't spend time to write instead we are focusing more in coding. If we are in a meeting and explain the way we do things will much easier than write them out in a document. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "yes, it is",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "i don't really understand this question. ",
        "StrategyEndingDifficulty_Idea: ": "neutral",
        "TimeConsumptionDifficulty: ": "true if we need to describe alot of steps",
        "TimeConsumptionDifficulty_Idea: ": "neutral",
        "TranslationDifficulty": "it is a good study and easy to understand the goal",
        "TranslationDifficultyIdea": "neutral"
      },
      "OtherDifficulties": ["n/a"],
      "StrategyDefinition": "Depend what kind of web application you are working there are many things can affect performance of the website and depend on the browsers you are using. To me using chrome profiler tool is just one of performance test tool you can use. \\n\\nThere are number of ways to complete this task:\\n\\n1.\\nFirst one is using JMeter, it will require some config but you can test performance using this tool https://en.wikipedia.org/wiki/Apache_JMeter\\n\\n2.\\nBuild a simple console application using HTTP web request and get HTTP web response and time it. \\n\\n",
      "Task": "ProfilerTask",
      "Time": "Tue Jul 09 2019 12:37:07 GMT-0700 (Pacific Daylight Time), 12:37:7",
      "WorkExperiences": {
        "background": "I have been working with C# and database for backend and API projects. For frontend web development I have been working Jquery, Asp.net, Asp.net core, CSS, HTML5 and Javascript. ",
        "biggestSoftware": "build front end web UI for game profile site. ",
        "biggestWebApplication": "I was full stack dev for volunteer project where we build registration web application for parents to sign up for classes and volunteer programs at church.",
        "softwareDevelopmentExperience": "7",
        "webDevelopmentExperience": "4",
        "webExperiencePeriod": "3 years and 0 months",
        "workExperiencePeriod": "5 years and 0 months"
      }
    },
    "Auth18": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I almost gave up on this a few times because it seemed so unclear what was being asked of me or how I'd even go about writing such a strategy",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "While the guidelines were helpful, I felt the example given was a lot more concrete than the one we were asked to write a strategy for and hence it was limited in how helpful it was.",
        "GuidelinesSupportDifficulty_Idea: ": "neutral",
        "NoviceUnderstandabilityDifficulty : ": "To truly articulate a strategy for this, especially in Roboto, I'd essentially be writing an algorithm too complex for a novice to understand. To make the description easy to follow and understand, I'd probably be leaving out a lot of edge cases and essential information.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "At times it was helpful to write in an algorithmic way, but the strategies I am attempting to describe are complicated and lead to complicated algorithms. My strategy if properly implemented would be recursive, which I don't think helps a developer understand as well as a simple phrase like \"test all combinations.\"",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "Yes it's hard to know how one would safely conclude they've tested for all possible errors.",
        "StrategyEndingDifficulty_Idea: ": "stronglyAgree",
        "TimeConsumptionDifficulty: ": "While I mostly kept this process within an hour, it was not fun or easy to do. I'd describe the process as frustrating.",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's hard to describe a strategy for something as abstract as \"UI error handling.\" Without a clear description of what the UI is it's hard to know what sort of errors to check for or how.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["It was very difficult to really understand what this study was asking for. It's very hard to write a strategy for something so abstract, so I think a more concrete example like the GitMerge one described would have been a lot easier to write a strategy for."],
      "StrategyDefinition": "# This Strategy helps you identify potential errors in a \\n\\n# UI implementation and how to approach implementing error\\n\\n# handling for them.\\n\\n\\n\\n# Required Tools and Environments\\n\\nA web browser for running the UI\\n\\nA breakpoint debugger for the UI code (likely a JavaScript debugger)\\n\\n\\n\\n# Required Knowledge\\n\\nAn understanding of the intended behavior and possibilities of the UI\\n\\nAn understanding of the UI code such that intended code paths can be identified\\n\\n\\n\\nSTRATEGY IdentifyAndHandleErrors()\\n\\n    # Identify the errors, keep track of them\\n\\n    SET `errors_to_handle` TO IdentifyErrors()\\n\\n\\n\\n    # Add error handling for them\\n\\n    FOR EACH `error` IN `errors_to_handle`\\n\\n        DO HandleError(`error`)\\n\\n\\n\\nSTRATEGY IdentifyErrors()\\n\\n    # Open the UI that you are testing\\n\\n    Open up the UI that is being tested\\n\\n    \\n\\n    SET error_sequences TO [] \\n\\n\\n\\n    # Attempt to execute every possible sequence of inputs.\\n\\n    # For complicated UIs, there may be an impossible number of combinations\\n\\n    # Test the most likely sequences of events and consider streamlining UI if this is the case\\n\\n    SET 'possible_inputs' TO all actions the user can take in the UI\\n\\n        FOR EACH 'input' IN 'possible_inputs'\\n\\n            # Run each input, make sure to test every combination\\n\\n            DO `input`\\n\\n            IF UIInErrorState()\\n\\n                Record input sequence that caused it, add to error_sequences\\n\\n    RETURN error_sequences\\n\\n            \\n\\nSTRATEGY UIInErrorState()\\n\\n    SET `is_error` TO false\\n\\n    IF the UI allows for inputs it should not\\n\\n        SET `is_error` TO true\\n\\n    IF the UI is displaying incorrect information\\n\\n        SET `is_error` to true\\n\\n    IF the UI is frozen or unresponsive\\n\\n        SET `isError` to true\\n\\n    RETURN `is_error`\\n\\n\\n\\nSTRATEGY HandleError(`error`)\\n\\n    IF error can be prevented\\n\\n        Update code to avoid error state\\n\\n    IF error cannot be prevented\\n\\n        IF error is confusing to user\\n\\n            Update UI to explain the error to user\\n\\n        IF error locks up the UI\\n\\n            Update component to reset UI or refresh page\\n\\n            ",
      "Task": "ErrorHandlingTask",
      "Time": "Tue Jul 09 2019 17:36:07 GMT-0700 (Pacific Daylight Time), 17:36:7",
      "WorkExperiences": {
        "background": "I've interned at a small gaming startup working on the menu system for a mobile game\nI've worked on multiple WordPress contracts\nI've worked as a full stack engineer at Code.org and multiple large-scale systems\nI've worked at Microsoft as a full time software developer and implemented a large scale system from scratch\nI have numerous side projects\n\nGitHub: https://github.com/CaptainStack\nLinkedIn: https://www.linkedin.com/in/captainstack/",
        "biggestSoftware": "I've been a full stack developer on applications with a middleware MVC framework, a backend SQL database with ORM, and a front-end UI framework. The application in its entirety was thousands of lines long with thousands of rows in the relational database.",
        "biggestWebApplication": "I've been a full stack developer on applications with a middleware MVC framework, a backend SQL database with ORM, and a front-end UI framework. The application in its entirety was thousands of lines long with thousands of rows in the relational database.",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "10",
        "webExperiencePeriod": "8 years and 0 months",
        "workExperiencePeriod": "10 years and 0 months"
      }
    },
    "Auth20": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I needed to make sure that I was not skipping over steps which I would consider second nature.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "I don't know yet... I would be curious to see how participants use these strategies",
        "GuidelinesSupportDifficulty_Idea: ": "neutral",
        "NoviceUnderstandabilityDifficulty : ": "There were actions that I took as part of my process like \"Identify the component taking the most time to render\" in the flame chart.  The strategy likely needs to explain what a flame chart is, as well as how to identify slower components.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "The language was easy to understand and implement my thoughts.  It was more difficult to articulate my thoughts than to put them in to the Roboto syntax",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "Yes.  There are many alternative pathways and each may have a different termination point.",
        "StrategyEndingDifficulty_Idea: ": "stronglyAgree",
        "TimeConsumptionDifficulty: ": "Articulating is not necessarily boring, but it took a lot of time and concentration.  I needed to be a quiet space without any distractions.",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "It was not difficult to translate thoughts into words, but once I hit a point where there are many directions to investigate it is more difficult to explain my thinking.",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This stratefy helps you to identity performance issues using the chrome profilier.  \\n\\n#Required tools and environments:\\n\\nInstall chrome\\n\\nVerify Chrome developer tools are enabled\\n\\nVerify that you can open Chrome developer tools by pressing F12 on any web page\\n\\nNavigate to the application to profile\\n\\n#Required knowledge\\n\\nGeneral understanding of JavaScript and HTML Concepts\\n\\nFamiliarity with navigating the HTML DOM and \\n\\nSTRATEGY ProfileApplication()\\n\\n    Open the web page to profile in Chrome\\n\\n    IF developer tools are not open\\n\\n        Open Chrome developer tools by pressing F12\\n\\n    Open the Performance panel in your developer tools\\n\\n    Start the recording by pressing the \"Record\" button\\n\\n    # We will initially perform the same action 3 times in a single window / session\\n\\n    FOR i = 0; i < 3; i++\\n\\n        # Perform the action causing performance problems        \\n\\n        # Allow the page to complete loading\\n\\n        DoPerformAction()\\n\\n    Stop recording\\n\\n    Save profile to desktop by clicking the \"Save Profile\" button\\n\\n    # Next we will perform the action in three separate sessions to identify if the performance is better/worse when the action is taken repeatedly\\n\\n    FOR i = 0; i < 3; i++\\n\\n        # Perform the action causing performance problems        \\n\\n        # Allow the page to complete loading\\n\\n        Close all Chrome windows\\n\\n        Open a new page and navigate to the application to profile\\n\\n        Start the recording by pressing the \"Record\" button\\n\\n        DoPerformAction()\\n\\n        Stop recording\\n\\n        Save profile to desktop by clicking the \"Save Profile\" button\\n\\n    # Now we have 4 json files providing us with data we can start to analyze\\n\\n    First look at the three individual runs of the action and see if the performance is consistent\\n\\n    Next look at the JSON file containing the three runs and see if there were performance changes between the first/second/third runs\\n\\n    # This gives us some context as to if the problem is at first load and then data is cached, or if the action has the same performance issue each time\\n\\n    IF perfoamnce improves after multiple runs \\n\\n        Investigate what actions happen once and not each time\\n\\n    IF performance is consistent look at the data and identify which sections are taking the most time\\n\\n    RETURN results",
      "Task": "ProfilerTask",
      "Time": "Sun Jul 14 2019 10:55:45 GMT-0700 (Pacific Daylight Time), 10:55:45",
      "WorkExperiences": {
        "background": "After graduating from the UW Information School I worked in consulting building enterprise web applications.  I then moved to Microsoft where I worked on SQL in Azure and Azure Classroom Services\n\nhttps://www.linkedin.com/in/cohen3/",
        "biggestSoftware": "I implemented Microsoft's SQL IaaS offering - allowing a customer to provision a VM in Azure with SQL Server already configured.  This removed the typical set up, installation, and configuration time.  I created an application to build a virtual machine image based on SQL/Windows version and Integrated with the Azure deployment pipeline.",
        "biggestWebApplication": "I converted several on-premise tools for a customer in to cloud based web applications.  This involved taking existing desktop applications and rewriting them for the web.  ",
        "softwareDevelopmentExperience": "6",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "6 years and 0 months",
        "workExperiencePeriod": "8 years and 0 months"
      }
    },
    "Auth22": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I had to write out part of my strategy, sit and think for a bit, then write some more. It didn't all show up at once for me.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "The guidelines were definitely helpful, especially having a side by side example.I de",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "I'm not 100% sure what is considered a novice developer. I was worried about making my strategy seem too naive, and potentially offending the skill of the target user if I aimed too low.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "The language seems pretty well featured.",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "While it wasn't difficult to write a generic final statement, writing an informative or well-summarizing one seems tricky.",
        "StrategyEndingDifficulty_Idea: ": "agree",
        "TimeConsumptionDifficulty: ": "Time consuming sure but I don't think it's boring.",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "I sometimes find it easier to start with a picture, rather than writing out words. The strategy exercise required me to examine my mental model of the problem and translate it to a form someone else might be able to understand easily.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["I was worried my solution might not be technical enough"],
      "StrategyDefinition": "# This strategy will help identify potential errors in UI \\n\\n# components and have components fail gracefully with messages\\n\\n# Required Tools and Environments\\n\\nAccess to a web IDE\\n\\nAccess to a console or tool to execute your project\\n\\nOngoing project that includes at least 1 front-end JavaScript component\\n\\n# Required Knowledge\\n\\nSome experience with front-end JavaScript\\n\\n\\n\\nSTRATEGY IdentifyPotentialErrors()\\n\\n    # This strategy first focuses on reviewing a component \\n\\n    # for likely sources of errors in front-end execution \\n\\n    Open your Web IDE and navigate to your project directory\\n\\n    SET 'markdownNotes' to a filename such as PotentialErrors.md\\n\\n    IF your project includes a test suite\\n\\n        Create test stubs to capture potential errors later\\n\\n    IF your project includes a Lint tool\\n\\n        Execute the lint tool to capture low-hanging fruit errors\\n\\n    SET 'frontEndJsFiles' TO project files that contain one or more JavaScript functions\\n\\n    FOR EACH 'frontEndFile' in 'frontEndJsFiles'\\n\\n        # The below steps could also be broken out into separate stratgies\\n\\n        # When looking for below error sources, aim for capturing generally likely sources of error\\n\\n        # rather than exhaustively seeking every single potential source\\n\\n        # STEP 1: Looking for potential errors in sources of input\\n\\n        Look for UI elements that depend on user input, then ensure they are validated\\n\\n        Look for both asynchronous and synchronous requests for data or input\\n\\n        Look for blocks of code that convert data formats, such as importing configuration data\\n\\n\\n\\n        # STEP 2: Looking for brittleness and hard-coded values\\n\\n        Look for hardcoded variable values, such as numerical constants\\n\\n        Look for hardcoded style adjustments, such as setting a div to have an inline block style\\n\\n        Look for repeated blocks of code that could be turned into functions\\n\\n\\n\\n        # STEP 3: Looking for unfilled error handling steps\\n\\n        Ensure that try-catch statements actually contain more than TODO in the catch section\\n\\n        Look for unfulfilled TODO comments\\n\\n\\n\\n        # STEP 4: Complicated functions\\n\\n        Look for function signatures with many arguments, and read code to find each usage\\n\\n        Look for very long functions, to see if you can make code more modular\\n\\n        Look for deeply nested conditionals or for-loops\\n\\n\\n\\n    # While there are many potential sources of error in a \\n\\n    # web application, we have identified a few examples that\\n\\n    # could lead to trouble\\n\\n    FOR EACH 'example' IN 'markdownNotes'\\n\\n        Find the example in its appropriate file\\n\\n        Add an alert(\"text to alert\"); statement indicating info you might want while debugging\\n\\n        IF 'example' involves user input\\n\\n            Implement a default value or failure function if the user\\n\\n            or remote framework respond in error or not at all\\n\\n        IF a logging framework is available\\n\\n            Call the log function to log user actions, exceptions caught, or results retrieved from remote code\\n\\n        IF a logging framework is not available\\n\\n            Install one if you have access, otherwise just take note of errors\\n\\n\\n\\n    Save and run your application in the web console video to preview changes\\n\\nRETURN contents of 'markdownNotes'",
      "Task": "ErrorHandlingTask",
      "Time": "Tue Jul 23 2019 01:59:18 GMT-0700 (Pacific Daylight Time), 1:59:18",
      "WorkExperiences": {
        "background": "My background is a mix of software engineering in R&D (primarily DoD & DoE national R&D labs), graduate research (MS), and technical internships in industry.  Some neat problems (in languages) I've worked on include full-stack web (Python, PHP, Javascript), network monitoring (Clojure, Javascript), Mobile (Java for Android), VR (C#, JavaScript) and Educational Games (Python, JavaScript).  I'm not locked into a favorite framework, preferring to choose the right tool for the job! One of my favorite - but most challenging - aspects of my work is that I've often been with interdisciplinary teams consisting of scientists, engineers, and (in 1 case) medical doctors. ",
        "biggestSoftware": "Developed a command line tool for retrieving, error-checking, and computing in-memory on scientific datasets. I had leadership in the implementation phase, and was able to fix numerous bugs in the codebase I inherited and suggest ways to make the codebase easier to use. This was a command line tool that required a lot of error checking and a lot of moving parts. Having intermediate points to fail gracefully and resume was important as some modern, easy-to-use configuration management tools weren't available when I wrote it.",
        "biggestWebApplication": "I developed an application to demonstrate the features of a NoSQL RDBMS. This application primarily fused multiple feeds of geographic data and textual data, and was built in JavaScript with JQuery and a Java development server. ",
        "softwareDevelopmentExperience": "30",
        "webDevelopmentExperience": "15",
        "webExperiencePeriod": "8 years and 0 months",
        "workExperiencePeriod": "9 years and 0 months"
      }
    },
    "Auth23": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Many aspects should be taken into considerations. Ignoring or forgetting a small steps may make the whole strategy pointless. Could have been better if Strategies could be machine-made with developer's supervision! (possibly with AI)",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "Without guidelines, writing strategies would have varied from developer to developer",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "References to official documentations can be noted in the strategies for novice developers instead of incorporating unnecessary steps into the strategies themselves.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "disagree",
        "RobotoSupportDifficulty: ": "Roboto looks like a psudo-code. It can be expanded and further specialized",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "Maybe line numbers or labels can be added to Roboto for this",
        "StrategyEndingDifficulty_Idea: ": "neutral",
        "TimeConsumptionDifficulty: ": "Strategies can end up being too long for complex problems",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "It's plain English. If thoughts are complex it can be divided into sub-strategies. Just need to try not losing the track of it",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["I just had to take all possible situations into considerations leaving no space for the client complain about missing pieces"],
      "StrategyDefinition": "# Following Strategy includes steps to identify the source of incorrect visual styles applied to UI components\\n# Required Tools and Environments\\nInstallation of preferred internet browser that ships with debugging tool (Google Chromoe used in this Strategy)\\n# Required knowledge\\nCSS and HTML\\nSTRATEGY CssDebug()\\n    # Open Google Chorme (or your preferred browser) from the installation path\\n    Open your browser\\n    # You can also debug your local html files stored in your computer\\n    Navigate to the website or your local html file which you're debugging\\n    Right click on the component with rendering/styling issue\\n    Select \"Inspect\" (or \"Inspect Element\" depending on your browser)\\n    # You should be presented with the debugging tool of your browser\\n    IF you're not presented with the debugging tool\\n        Try pressing Cmd/Ctrl + Shift + I (or from the menu of your browser, by choosing Tools > Web Developer > Inspector)\\n        Find your UI component under inspection from the \"Elements\" tab of the debugger\\n        Make sure to select it\\n        IF you're still not presented with the debugger tool\\n            Check official documentation of your browser\\n    # You will see the debugging tool of your browser opened either on the bottom or right side of your browser\\n    Find the \"Styles\" tab (Or \"Layout\" tab depending on the browser)\\n    # You will see all the applied CSS files to the selected UI component   \\n    Hover your mouse on the CSS styles listed\\n    # Checkboxes will appear next to each style's properties\\n    SET 'componentStyleProperties' TO all the properties of the component under inspection\\n    FOR EACH 'cssProperty' IN 'componentStyleProperties'\\n        DO checkAndIdentifyPropertySource('cssProperty')\\n\\nRETURN nothing\\n\\nSTRATEGY checkAndIdentifyPropertySource('cssProperty')\\n# This Strategy assumes the debugging tool is opened and the component under debugging is located from the \"Styles\" tab of the debugger\\n    # When a CSS property is not functioning because it's being overwritten by another CSS file\\n    IF 'cssProperty' is striked through\\n        # Check for the same property name throughout the Styles tab\\n        IF there is an \"Inherited from\" word for the CSS selector of the 'cssProperty'\\n            Click on the component next to \"Inherited from\" and check for same property name that applies to the same HTML element the CSS property is applied to\\n            SET 'cssProperty' to the same CSS property of the parent component\\n    IF the UI component's problem is due to the lack or presense of another CSS overriding the component's style\\n        Try disabling/enabling applied styles on 'cssProperty', and at the same time check the page for changes\\n    IF the UI component's problem is due to the wrong values set on the CSS property's value\\n        Double click on the value of the 'cssProperty' and try changing it to the correct value\\n    IF by changing or unhiding the properties you see the correct rendering result\\n        # 'cssProperty' is the component whose property/value change fixed the rendering issue\\n        SET 'selector' TO the css selector name of the 'cssProperty' \\n        identifyCssPropertySource('selector')\\nRETURN nothing\\n\\nSTRATEGY identifyCssPropertySource('selector')\\n# This Strategy identifies the source .css file of a css selector\\n    On the Styles tab, check the .css file name the selector belogs to\\n    IF the .css is not known to you from your source code\\n        # The .css file is loaded from another third-party library (example: bootstrap)\\n        Check the official documentation of the third-party library to change/adjust the CSS properties overwriting your application's style\\nRETURN nothing",
      "Task": "CssDebuggingTask",
      "Time": "Sun Jul 28 2019 16:34:16 GMT-0400 (Eastern Daylight Time), 16:34:16",
      "WorkExperiences": {
        "background": "Senior software developer with 5 years experience and a freelance",
        "biggestSoftware": "Concierge customer support portal for a telecomm company to authenticate customers and check their usage, issues, missed payments etc.\n",
        "biggestWebApplication": "Concierge customer care web application for call center agents, and E-Care for customer's portal",
        "softwareDevelopmentExperience": "6",
        "webDevelopmentExperience": "3",
        "webExperiencePeriod": "5 years and 0 months",
        "workExperiencePeriod": "5 years and 0 months"
      }
    },
    "Auth24": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Walking through the strategies multiple times to ensure that all broad categories of performance issues and types of slow activities were handled took a decent amount of effort.",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "Having consistent writing guidelines for a team should boost the reading comprehension of each team member. ",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It can be hard to determine how much explanation is necessary for novice developers. Writing a general strategy is less effective because novices can have widely varying levels of knowledge about web development topics.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "Expressing conditional branching and looping in normal English language can be messy in comparison to Roboto's IF and WHEN statements.",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "I thought it was pretty clear when to terminate a strategy.",
        "StrategyEndingDifficulty_Idea: ": "stronglyDisagree",
        "TimeConsumptionDifficulty: ": "I do not think it is boring.",
        "TimeConsumptionDifficulty_Idea: ": "stronglyDisagree",
        "TranslationDifficulty": "I do not find it particularly challenging to write a profiling strategy since I was able to write it as though I was speaking to an experienced web developer. The most challenging part is handling all the conditional branching involved in a strategy. I like that Roboto provides a way to do that.",
        "TranslationDifficultyIdea": "neutral"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "#Required Tools and Environments\\n\\nChrome from http://chrome.com\\n\\nProduction environment for web application being profiled\\n\\nLocal development environment for web application being profiled to aid with reading the code during scripting issues\\n\\n#Required Knowledge\\n\\nStrong grasp of HTML, CSS, JS\\n\\nGeneral understanding of DevTools layout. Know what I mean by the Performance Tab and Audits Tab for example.\\n\\nFeel comfortable using the DevTools Sources tab to read and debug code.\\n\\n# This strategy will focus on how the Chrome Profiler can identify performance problems in web applications. It provides \\n\\n# Windows keyboard shortcuts for Chrome DevTools commands.\\n\\nSTRATEGY IdentifyPerformanceProblemWithChromeProfiler()\\n\\n    Open Chrome\\n\\n    Open Chrome Developer Tools (CTRL + SHIFT + D)\\n\\n    # The Chrome Profiler itself cannot generally identify performance problems without some user input from the engineer.\\n\\n    # Thus the engineer needs to act like a user would and test the app looking for common performance problems.\\n\\n    WHILE thoroughly testing the application looking for one of the possible performance problems\\n\\n        # 5 seconds until the user can interact with the page is generally considered the slowest possible time tolerated.\\n\\n        # https://developers.google.com/web/fundamentals/performance/rail#load\\n\\n        IF performance problem is slow time till interactivity\\n\\n            # Audits tab does a much better job of explaining the issues behind a slow time till interactivity\\n\\n            # than the Performance tab despite measuring similar things\\n\\n            Click Audits tab in Chrome Developer Tools\\n\\n            # The default audit settings are the most strict and a good default. However if your web application\\n\\n            # has an expected user device than that can be used for the audit\\n\\n            Change Device and Throttling to match expected user device\\n\\n            Change Audits to only look for Performance and Best Practices\\n\\n            Click Run Audits button\\n\\n            # Opportunities and diagnostics contain links to a description of an issue with the recommended solution\\n\\n            RETURN opportunities and diagnostics\\n\\n        IF performance problem is slow response to user input\\n\\n            # Performance tab allows us to profile arbitrary sections of time which is useful when profiling a \\n\\n            # specific user input.\\n\\n            Click Performance tab in Chrome Developer Tools\\n\\n            # We need to perform the input while recording a profile to gather information on the slow activities\\n\\n            # that are contributing to user input lag\\n\\n            Record Profile (CTRL + E)\\n\\n            Perform input that felt slow\\n\\n            Stop Recording Profile (CTRL + E)\\n\\n            # Event log lists every single event that has happened in a profile. This matters because slow events \\n\\n            # cause user input lag. Any event total time longer than 50ms will cause noticeable user input lag \\n\\n            # as specified by Google's performance team\\n\\n            # https://developers.google.com/web/fundamentals/performance/rail#response\\n\\n            Click Event Log on the bottom console of the performance tab\\n\\n            # We want to focus on the slowest events first because those will contribute the most to user input lag.\\n\\n            Sort by Total Time\\n\\n            # Activities can trigger other activities so we need to recursively expand the activity tree\\n\\n            # to understand which activities contributing the slow total time\\n\\n            Recursively expand activity tree on every activity taking longer than 50ms\\n\\n            # We have to determine the type of slow activity to narrow down which common performance problems should be investigated.\\n\\n            IF slow activity is loading (blue activity)\\n\\n                Investigate the range and source of the slow activity. This should narrow down which resource is loading slowly\\n\\n                # Common loading issues: https://developers.google.com/web/fundamentals/performance/get-started/\\n\\n                RETURN loading issue identified from comparing slow activity to list of common issues commented above\\n\\n            IF slow activity is scripting (yellow activity)\\n\\n                Investigate the stack trace. Follow the blue source links into the Sources tab to debug the code as necessary\\n\\n                # Common scripting issue resources\\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers\\n\\n                RETURN scripting issue identified from comparing slow activity to list of common issues commented above\\n\\n            IF slow activity is rendering (purple activity)\\n\\n                Investigate the initiator and layer root of the rendering activity to learn more about the activity\\n\\n                # Common rendering issue links\\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations\\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing\\n\\n                RETURN rendering issue identified from comparing slow activity to list of common issues commented above\\n\\n            IF slow activity is painting (green activity)\\n\\n                Investigate the initiator and layer root of the painting activity to learn more about the activity\\n\\n                # Common painting issue links\\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas \\n\\n                # * https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count\\n\\n                RETURN painting issue identified from comparing slow activity to list of common issues commented above\\n\\n    RETURN nothing",
      "Task": "ProfilerTask",
      "Time": "Mon Jul 29 2019 00:47:10 GMT-0500 (Central Daylight Time), 0:47:10",
      "WorkExperiences": {
        "background": "My personal site gives a good background on my experience https://cody.stebbins.dev/",
        "biggestSoftware": "Current position at humblebundle.com. I lead the effort to implement single sign on and localization. I worked on payment processing including monthly billing cycles. I made changes to an API that supports both Android and Web users. ",
        "biggestWebApplication": "Same as a biggest software application.",
        "softwareDevelopmentExperience": "6",
        "webDevelopmentExperience": "6",
        "webExperiencePeriod": "6 years and 0 months",
        "workExperiencePeriod": "6 years and 0 months"
      }
    },
    "Auth26": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Yes it took energy, effort, and concentration. It is enjoyable though.",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "Writing guidelines is helpful for the people receiving the strategy, and it can be even more helpful for the people giving the strategy because it helps them to cement their knowledge by teaching it.",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "What is hard is deciding what your intended audience is. If you know in advance that your strategy will be used by novice developers or by experienced developers, you should alter the level of detail you provide. Being too descriptive can be tedious and can cause your audience to lose interest or think that you are not providing enough value since you are assuming they have too low of a skill level. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "disagree",
        "RobotoSupportDifficulty: ": "I think this depends a lot on the person. For me, it would have been more effective to say \"write a strategy in pseudo code\" because I am experienced developer who is comfortable writing pseudocode without a formal language and syntax. For a novice who is unsure of things, this may be different",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "Terminating the strategy was not difficult once I felt like I had written enough about the subject to express the concepts I wanted to get across",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "Time consuming but not boring",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "It's not challenging, but it is time consumer and energy consuming",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This strategy helps a developer use the Chome Performance tab in the Chrome dev tools to identify performance bottlenecks in their webapps.\\n\\n# Required tools and environments\\n\\nDesktop or laptop\\n\\nChrome\\n\\nInternet access\\n\\n# Required knowledge\\n\\nConceptual knowledge of the tech stack used for your webapp and how the core scenarios work\\n\\n\\n\\nSTRATEGY findBottleNecks()\\n\\n    Open Chrome\\n\\n    IF your site is under active development, prepare a production or staging endpoint so that you can test the conditions that real users will experience\\n\\n    Navigate to your website\\n\\n    Launch the chrome developer tools tab (Ctrl + Shift + I on PC)\\n\\n    Switch to the performance tab\\n\\n    # This marks the beginning of the recording and analysis\\n\\n    Start recording profiling information\\n\\n    Refresh the page to capture the initial load benchmark\\n\\n    For each core scenario that you wish to manually instrument\\n\\n        Perform the core scenario\\n\\n    Stop recording\\n\\n    Spend some time just looking at the data visualizations and trying to understand what information is being represented and getting familiar with the layout and view slicing\\n\\n    Familiarize yourself with the ups and downs of the graph over the lifetime of the recording. Look for the absolute max and min CPU usage, and try to visually estimate the average \"idle\" usage\\n\\n    For each core scenario that you captured\\n\\n        Scroll over the frame capture scrubber until you've identified the start and end of that scenario\\n\\n        Adjust the start/end of the data slicing so that only this scenario is highlighted\\n\\n        Look for any unusually high local spikes of CPU usage\\n\\n        Make note of any spikes you subjectively decide you want to investigate\\n\\n\\n\\n    For each spike you made a note of\\n\\n        Refer to the implemenation details of your website and try to determine what you expect to be happening at the specific moment that the CPU usage spiked\\n\\n        Come up with a list of possible things that can be happen, as there are often more than often\\n\\n        Evaluate your list of possible suspects and assign a likelihood rank to each often\\n\\n    Repeat the recording and analysis 3-5 times to try to eliminate outliers and get a more reliable assesment\\n\\n\\n\\n    Think about what you would say to a peer if you were to try and describe your findings and your subsequent theories about perf bottlenecks\\n\\n    Share your findings with your peers now that you have practiced your pitch and have built up some confidence\\n\\n    return findings\\n\\n",
      "Task": "ProfilerTask",
      "Time": "Mon Jul 29 2019 20:46:19 GMT-0700 (Pacific Daylight Time), 20:46:19",
      "WorkExperiences": {
        "background": "Software engineer at Microsoft (2 years)\nOpen source contributor\nCSE 142/143 TA\nINFO TA (web dev, sw arch)\nFreelance developer (odd jobs)\nSoftware internship at Microsoft (1 summer)\nSoftware internship at Qualcomm (2 summers)\n\nhttps://github.com/luisnaranjo733\nhttps://www.linkedin.com/in/luis-naranjo-08a14870/",
        "biggestSoftware": "Mobile app for gamers. Companion experience with catalog and remote download features for games",
        "biggestWebApplication": "Mobile app for gamers. Companion experience with catalog and remote download features for games",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "3 years and 0 months",
        "workExperiencePeriod": "5 years and 0 months"
      }
    },
    "Auth27": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "It was most difficult to write SUCH a generic strategy without having good and bad code to reference too. It took a lot of recollection and guessing as to what someone might find helpful.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "I think it provides a nice framework, but am not sure how well it would work in the real world for specific problems instead of generic concepts.",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "We all make mistakes even as professionals. I can recall common mistakes I used to make frequently or know already to look for.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "disagree",
        "RobotoSupportDifficulty: ": "I wish there was more coded syntax. It was a bit too much like pseudo-code in that I felt I can make up syntax. ",
        "RobotoSupportDifficulty_Idea: ": "neutral",
        "StrategyEndingDifficulty: ": "I think for this problem, it was just repetitive checks. Not really hard to just end it.",
        "StrategyEndingDifficulty_Idea: ": "stronglyDisagree",
        "TimeConsumptionDifficulty: ": "Very boring",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "I think the Roboto language is decent but often the strategy becomes redundant in the coding and may not bring so much value. More coded syntax for the language would also help. ",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This Strategy help to identify potential errors and check if proper error handling is in place\\n\\n# Required tools and environments\\n\\nWeb Dev IDE\\n\\n# Required Knowledge\\n\\nBasic web dev knowledge\\n\\nSTRATEGY errorValidation()\\n\\n    # Open web development code in IDE\\n\\n    Open your web development IDE of choice and navigate to any user input forms\\n\\n    IF there are user input forms\\n\\n        SET 'userForms' TO the user input forms in the code\\n\\n        FOR EACH 'form' IN 'userForms'\\n\\n            Check if form inputs are validated\\n\\n            Check if improper form input results in a message to the user\\n\\n    # Check that all externally referenced files have a fallback\\n\\n    SET 'references' TO all external files including media files, code libraries, linked css files, etc...\\n\\n    FOR EACH 'ref' in 'references'\\n\\n        Check if 3rd party libraries are stored locally\\n\\n        Check if media files have an alt tag\\n\\n    # Check for authorization errors\\n\\n    IF site have user specific content\\n\\n        Check that users are not exposed to content they are not authorized to view\\n\\n        Check that sensitive content is hiden from unauthorized users OR message is displayed to user with explanation\\n\\n    SET 'js' TO all javascript code elements\\n\\n    FOR EACH 'j' in 'js'\\n\\n        Check if validation is perfomed that the code completed\\n\\n        Check if error message to user is presented if code does not complete successfully\\n\\n    #Check global level error handling\\n\\n    Check if window.onerror function exists to catch global errors\\n\\n    Check that window.onerror function has a function to display error message to user\\n\\nRETURN nothing",
      "Task": "ErrorHandlingTask",
      "Time": "Mon Jul 29 2019 19:26:20 GMT-0700 (Pacific Daylight Time), 19:26:20",
      "WorkExperiences": {
        "background": "I have worked in writing programs for hospitals which taught me a great deal about regulations and restrictions on software. I then moved into the data processing and ETL space for an insurance company. I moved to a data visualization company to work on internal prototyping software and later transitioned back into the data processing space.",
        "biggestSoftware": "Building a personalized front end landing page for our company's server product. I had to connect to a lot of server APIs for authentication and to provide personalized content for the end-user. Had to research and implement a weighting algorithm to provide trending content and recommendations. Implemented the ability to open the selected content as an overlay on the page instead of having to leave the page to view the selected content.",
        "biggestWebApplication": "See the previous answer.",
        "softwareDevelopmentExperience": "50",
        "webDevelopmentExperience": "3",
        "webExperiencePeriod": "2 years and 0 months",
        "workExperiencePeriod": "9 years and 0 months"
      }
    },
    "Auth29": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "To write a strategy in a generalized manner required a lot of concentration to ensure all scenarios were covered in it. ",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "More examples will definitely help. ",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "Some problems/programming scenarios have multiple layers of complexity. To write strategy for novices, these complexities must be abstracted but it should also make sense. Achieving this balance is difficult.  ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "I believe the language does not serve its purpose if comments are required  to explain steps. Regular spoken languages could be more effective than a structured language to convey a process in certain scenarios, especially for novices. ",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "If the person writing the strategy understands the problem, terminating it would not be a problem.",
        "StrategyEndingDifficulty_Idea: ": "stronglyDisagree",
        "TimeConsumptionDifficulty: ": "It is in fact interesting, as it made me realize my process. Many crucial steps are instinctively done and can easily be looked over during the documentation process.",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "Most strategies are developed from the experience of dealing with the same problem over time. This becomes instinctive and is hard to formulate it in a coherent manner.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This strategy helps developers identify all the potential errors in an UI component. \\n\\n# The principle behind this strategy is to rely on whitelisting rather than blacklisting. \\n\\n# It is more effective and efficient to look for what is required than what is not required.\\n\\n\\n\\n# Required tools and environments\\n\\nTechnical specifications and requirements for the component\\n\\nUI Automation Testing tools based on framework\\n\\nError Message display component\\n\\n\\n\\n# Required Knowledge\\n\\nBasic design principles\\n\\nWeb UI and html elements\\n\\n\\n\\nSTRATEGY errorHandler()\\n\\n    # List all UI elements in the component such as buttons, plain text, images, input fields, etc\\n\\n    List all UI elements in the UI component\\n\\n    \\n\\n\\n# Separate if the element is interactive like a button or input field or if it is static like text or image\\n\\n    FOR EACH element in component\\n\\n        \\n\\n\\n\\nIF element is interactive\\n\\n            # Find all valid input parameters that the element can accept, a text field that accepts only aplha-numeric characters\\n\\n            # Create validation methods for each parameter, if requirement of that parameter is not met, appropriate error message stating the requirement is returned\\n\\n            Identify all valid input parameters\\n\\n            FOR EACH parameter in list \\n\\n                Create a validation method that \\n\\n                RETURNS error message\\n\\n\\n\\n\\n\\n\\n\\n\\n# Identify all expected behavior (disabled after submission, replace text to a loading icon, etc) of the element. \\n\\n\\n\\n\\n# If the element deviates from the expected behavior display error message stating the missing behavior.\\n\\n\\n\\n\\nIdentify all the functionalities of the element\\n\\n\\n\\n\\nFOR EACH functionality of element\\n\\n\\n\\n\\n\\nCreate test method \\n\\n                RETURNS error message if output is different from expected output\\n\\n\\n\\n\\n\\n\\n\\n# For both interactive and non interactive elements, identify all the properties (size, color, text, etc) of the element. \\n\\n\\n\\n# If the element does not exhibit a certain property display error message stating the expected property.\\n\\n\\n\\nIdentify all the proeprties of the element\\n\\n\\n\\nFOR EACH property of element\\n\\n\\n\\n\\nCreate verification method that \\n\\n            RETURNS error message if absent\\n\\n\\n\\n\\n\\n\\n\\nRETURNS nothing",
      "Task": "ErrorHandlingTask",
      "Time": "Sat Aug 03 2019 16:56:38 GMT-0400 (Eastern Daylight Time), 16:56:38",
      "WorkExperiences": {
        "background": "Developed several software applications, mainly web based applications using html, css, javascript. Other known languages include Python and Java. Familiar with multiple web frameworks, most with angular and node. Applications implemented vary from content management system to captcha to online ide. \n\nhttps://www.linkedin.com/in/pauravsurendra/",
        "biggestSoftware": "Currently developing an enterprise software platform for universities to provide experiential opportunities to its students. The platform hosts thousands of users and opportunities listings. Provides API and non API integrations with campus systems and learning management systems. I am the lead developer in the project, responsible for building most parts of system (both front end and back end) along with system design, deployment and maintenance. ",
        "biggestWebApplication": "The above mentioned platform is a web based application.",
        "softwareDevelopmentExperience": "6",
        "webDevelopmentExperience": "-2",
        "webExperiencePeriod": "2 years and 5 months",
        "workExperiencePeriod": "3 years and 0 months"
      }
    },
    "Auth3": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I just need to remember all the situations I was in and how I resolved the issues.",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "Agree.Depends on how well you write with some real scenarios.",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "Nowadays web development has lot of help but agree than it is not easy to come up with any\nstandard strategies.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "Yes,I liked the structure.",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "Strategy keep evolving based the difficulty of task at hand.A complex web application with log of UI features involves\nmore strategies.",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "In person explanation probably is better by going over debugging strategies using live examples and demonstration",
        "TimeConsumptionDifficulty_Idea: ": "neutral",
        "TranslationDifficulty": "This particular problem of CSS debugging comes through continuous efforts to test your code and heavily use Browser debugging tools along with understanding the fundamentals of CSS.",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["I was always following same strategy as far as CSS debugging is concerned."],
      "StrategyDefinition": "# This Strategy  helps identify the origin of the CSS issue\\n\\n# Required Tools and Environments\\n\\n1.IDE like Atom,Visual Studio Code 2.Browser \\n\\n#Required Knowledge\\n\\nFundamentals of CSS,Browser Developer Tools\\n\\nSTRATEGY CSS DEBUGGING\\n\\n1.Use Inspect feature of the browser of your choice.\\n\\n2.Once you click on Inspect feature,you can point to the\\n\\nsection of your webpage that has CSS issue\\n\\n3.The right side corner of the Developer Tool window highlights\\n\\nthe CSS used.You can change the CSS and see the changes on the webpage instantly.",
      "Task": "CssDebuggingTask",
      "Time": "Thu Jun 13 2019 19:07:33 GMT+0000 (Coordinated Universal Time), 19:7:33",
      "WorkExperiences": {
        "background": "I  am writing/written several apps using React.js,Vue.js and  other javascript frameworks for the past 10+ years.",
        "biggestSoftware": "All are equally complex with work on all the tiers.\nDB schema,DB maintenance\nCode migrations,Version upgrades\nIntegration,Load testing.",
        "biggestWebApplication": "All are equally complex with heavy user input(forms),UI validation,alerts,notifications.",
        "softwareDevelopmentExperience": "5",
        "webDevelopmentExperience": "2",
        "webExperiencePeriod": "9 years and 0 months",
        "workExperiencePeriod": "16 years and 0 months"
      }
    },
    "Auth30": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "The issue here is taking a large amount of experience and attempting to plug into a framework, that is defined for small problems and not large ones.  I think 30 minutes is pretty limited amount of time as well.   I could spend that amount of time reformatting the cases above to be closer to the format that Roboto uses.",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "In general I agree, but I am not sure that it is very cost effective as far as transferring knowledge.",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "Lack of knowledge of both the tools and the problem domain will hamper novices.  Do they know the terminology, how much needs to be defined up front for them to understand the issues.   There is probably enough material in this space alone to write a sizable book describing this topic for beginners, since it would need to cover, HTML, CSS, frameworks, browsers, browser debugging tools, Browser Domain models, JavaScript, and potentially emulators.   These problems can be overcome by working through actual cases and increasing the knowledge and confidence in being able to fix these types of problems.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "Roboto is kind of general, and in the specific case a more domain specific language with standard elements that recognize the problems and solution elements in the domain.  Problems are going to be in a set of categories that would be identifiable by the user  (as identifying contexts that set a CSS element) and solutions would be standard domain strategies (like updating selectors to make the CSS element unique.)",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "Typically finding the issue causing the problem is the difficult part.  Terminating the strategy will be using the corrective measure to fix that issue.",
        "StrategyEndingDifficulty_Idea: ": "neutral",
        "TimeConsumptionDifficulty: ": "It certainly would take time to go through all of the cases, but it is not particularly boring.  Once again there is some challenge in clearly delineating the steps needed to locate and fix the issue.",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "This particular problem has a very large number of Cases potentially in the millions when CSS elements are crossed with the number of attribute values each element may possess.  To define a low level strategy one would need to outline each type of CSS failure and then build a strategy for fixing that particular problem.  It is possible that many of the strategies would overlap, but that would not become apparent until some number of the strategies were enumerated.   Conceptually it may be possible to build a higher level language to describe both the problem space and solution space for these types of problems.  Once again that would likely come from an examination of sample problems and solutions and factorization of the concepts used to state and solve those problems in a more general way.",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": ["I think there is a vast simplification assumption here in attempting to articulate a strategy for finding and fixing CSS problems.  I worked on a project at Fred Hutch that had a web page that was in excess of 100K lines (that is just one page, not the other supporting code, etc. )   Problems at scale are much more difficult to fix than more or less research level code. (Though the code above was a research project for examining the detailed genetics involved in Cancer Research.)\nI would also guess that many of the answers will overlook whether the CSS problem is actually reproducible (think of a CSS file that is downloaded and changed by the developers that are using and the problem goes away.)   Though most browser are closer in common handling today than in the past, there is still quite a bit of difference in how each one will display a page."],
      "StrategyDefinition": "# This Strategy is fix a problem in CSS\\n\\n# Background knowledge needed:\\n\\n# Knowledge of CSS, frameworks used to impose CSS like Bootstrap, etc.\\n\\n# Knowledge of CSS browser tools (typically in Chrome or Firefox)\\n\\n# If the problem is on cellphone or  tablet, knowledge of an emulator environment for running the browser in that environment\\n\\n# Knowledge of HTML, and other HTML or JavaScript frameworks if they are extensively used on the web page\\n\\n# Tools required:\\n\\n# One or more browsers (with debugging tools enabled and loaded)\\n\\n# PC and/or Emulator for platforms where the problem exists\\n\\n# A full description of the problem and the platform it was seen on (versions of software, other software on the platform)\\n\\n# Potentially other software that is used to make the web page functional (web server, web API, test environments like Selenium, etc.)\\n\\n#\\n\\n# First Goal show that the problem is reproducible\\n\\n# Requirements\\n\\nGet Full statement of error\\n\\nGet Description of the environment used\\n\\nGet Browser and web page used in the error (access to all of the files used)\\n\\nExecute page in stated browser and verify that the error occurs\\n\\nIf Error does not occur\\n\\n    Try in other browsers \\n\\n   If Error does not occur in any browser, \\n\\n   then error is not reproducible and can not be fixed\\n\\n   end problem\\n\\n# Second Goal see if the error is specific to one browser or occurs in multiple browsers\\n\\n#Tools needed full set of browsers to test\\n\\nTest the page in each browser to see if the error occurs in all of them\\n\\n#This may include browsers both on PC's, Tablets and Cell Phones\\n\\nIf it is specific to one browser, that browser will need to be used for further testing\\n\\nIf the error is on cell phones or tablets and not on PC's then the error may likely be caused by CSS elements not being reactive enough\\n\\n   Developer will need to get an emulator to repro the problem \\n\\nIf the error is in one browser also and the CSS in question looks correct, the browser may have an error\\n\\n   In this case the CSS may need to be styled specifically for that browser.\\n\\n   # User may need knowledge of how to set conditional code in CSS\\n\\n   Verify that changed CSS fixes it in this browser, may need to use conditionals in CSS to force use of new CSS in this browser only\\n\\n\\n\\n#To debug browser non specific errors, the developer needs to choose a test environment with the browser Tools\\n\\n#The next step is to categorize the type of error\\n\\n#The common categories that can be used\\n\\n#Geometric errors\\n\\n#Style and attribute type errors\\n\\n#Dynamic problems caused by the activity of the elements interacting with either programmatic or user data and potentially limited by the browser, network, or perhaps even resource constraints.   \\n\\n#Generic Errors 4.\\nGeneric errors in which the page does not display, elements are missing (or hidden), flow is incorrect, etc.\\n\\n#Each of these is handled by using the Browsers debugging tools to view the context of the CSS and to see in which file or element is setting the offending CSS element\\n\\n#Geometric errors\\n\\n#Errors can be resolved by reviewing the structural elements used to do the organization.  Problems arise when browsers do not honor all of the Css styles or there are errors in the frameworks, or the stylist presentation is outside the capability of the framework (think non grid oriented structures.)\\n\\n To debug, \\n\\n change the geometry slightly typically by reducing the complexity to see if the problem continues\\n\\n If problem no longer continues, \\n\\n then it is fixed\\n\\n If not fixed by slight changes, \\n\\n  then developer needs to step through the buildup of the geometry by incremental steps until the problem is fixed by a particular set of CSS statements\\n\\n Other strategy would be -    \\n\\n  The other choice would be to use a different mechanism in the CSS to see if the same effect can be achieved\\n\\n#Style errors of individual elements have errors typically caused by using the incorrect criteria for assigning styles (typically typing or pasting errors.)  \\n\\nTo debug review the context that sets the CSS attribute that is in error.  \\n\\nMake sure that the final setting is the one desired.\\n\\n If the final setting is not correct\\n\\n Then examine the contexts which set the CSS element and change the CSS element by making it more uniquely defined (adding more information to the selector)\\n\\n Other Issues could be wrong selector\\n\\n Also the CSS style may be set by the wrong selector in which case the appropriate selector needs to be added to the CSS element\\n\\n#Dynamic problems\\n\\n#They are best caught by testing in which case each of the type of constraints in artificially imposed on the web page (slowed network, constrained hardware for the browser, device geometry (think phone vs pc display), loading on the web server, etc.)  The variety and types of constraints (and whether they are important) is going to depend on the particular web page.\\n\\nTo debug, \\n\\nfirst verify by setting the CSS element in fixed manner, cycling through the changes to verify that correct effects are achieved when those settings are set on the CSS element\\n\\nIf they are not, then the CSS element settings need to be changed in the fixed test setup to get the correct styling.\\n\\nIf the fixed settings are correct, next the mechanism for looking at the changes to the CSS need to be examined.\\n\\nOne potential debugging strategy is to use a temporary HTML element to mirror the CSS change (say a text string) and verifying that the text is dynamically set at the appropriate times\\n\\nIf the text is set but the CSS is not set, then there is likely some issue with mechanism for setting the CSS element and that needs to be fixed\\n\\nIf the text and CSS are both set but the effects are delayed by external constraints.  It is likely that the CSS and the display mechanics will need to be changed to take into account those limitations\\n\\nTypical limitations are timing delays, memory usage, access to download CSS elements, etc.\\n\\nSome of those can be fixed by rearranging order of loading or reducing the complexity of the page.\\n\\n#Generic Errors \\n\\n#  These typically need to be handled by doing a top down test of the overall page and can be avoided by adding elements singly rather than expecting the full page be correctly displayed (slowly increasing the complexity of the elements.)  This is not so much Css debugging but more a developmental style where by limiting and understanding what elements are being added, the types and scope of the errors is limited from step to step.\\n\\nTo debug, once again review the context that is setting the CSS element and attributes in question.\\n\\nVerify that the CSS style is being set and not being overwritten but other contexts (CSS files loaded)\\n\\nVerify that the selector used is not being overloaded with multiple CSS styles\\n\\nIf so, build a new CSS statement to make the CSS selector more unique by including more information on the selector setting\\n\\nCases where the element is not appearing at all are typically caused by either the element being hidden (check for Geometric overlap),  or conflicting CSS statements that hide or make that element invisible\\n\\nCases where the element is partially occluded are handled by either changing the size of the element to fit in the allotted space (for example changing the size or style of the font) or increasing the geometry of the area to allow the element to be seen, or changing the flow of the element to wrap the text or other icongraphy on multiple lines\\n\\n\\n\\n",
      "Task": "CssDebuggingTask",
      "Time": "Sat Aug 17 2019 19:47:35 GMT-0700 (Pacific Daylight Time), 19:47:35",
      "WorkExperiences": {
        "background": "Kenneth LaToza on LinkedIn...  My resume last I checked was about 11 pages or so.  I have a couple of papers out on the web on SharePoint.   I have worked at Nalco Chemical, Ford Motor, Digital Equipment Corp, GM (project), Post Office (project), UBS, Rich Reuters, RR Donnelly, AON, Commonwealth Edison, Aetna Insurance, Microsoft, Fred Hutch)",
        "biggestSoftware": "I have worked on SharePoint (> 60 M lines of code), SPSS (2-3 M lines of code), Built from scratch (60-70K Single Page Applications), 1-2 M lines of Web API and display code (built by code generators and frameworks.)  (Written device drivers, operating system components, statistical packages, model and simulations for automobiles, stock market, Banking software, Mail sorting software, Nuclear power safety software, Insurance Claims pricing software, Insurance Enrollment software, Insurance Loss modeling software, Cancer Research software of various flavors, various software modeling packages, many, many different types of software utilities.)  (I currently at Fred Hutch have probably in the neighborhood of 250 software solutions each containing anywhere from 1-15 individual projects in them.)",
        "biggestWebApplication": "Web API for Fred Hutch's Managed Transplant program.  Approximately 3200 CRUD web end points, and 800 Web pages allowing updating of that data.  Used Claims / AD security.  Code mostly auto generated from reference tables describing the tables and columns in 800+ tables.  Code was an MVC program built in C# using MS frameworks.   Data was in SQL Server database fed through replication from Ingres database residing on a HP VMS operating system.   Some back end features to run batch programs into JAMS batch scheduling system for reporting, tie ins to run SSRS reports in SQL Server, etc.",
        "softwareDevelopmentExperience": "1000",
        "webDevelopmentExperience": "15",
        "webExperiencePeriod": "14 years and 0 months",
        "workExperiencePeriod": "48 years and 0 months"
      }
    },
    "Auth5": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "This took a lot more effort than anticipated",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "I think structure is always beneficial.  I would worry about taking a senior developers time to write strategies though.. ",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "I think this all depends on what the strategy is and how complex",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "I feel like I was writing to humans in a way I would write code for computers to understand, if that makes sense",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "I didn't find this difficult",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "I wouldn't want to do this for my job",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's easy to look at the profiler and know what's happening but it's hard to explain it ",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": ["A little hard figuring how to write this strategy when web applications can be so different"],
      "StrategyDefinition": "#This Strategy helps you learn how to utilize the Chrome Profiler\\n\\n#in order to identify slow or inefficient components\\n\\n#Requried Tools and Environments\\n\\nChrome\\n\\nA Web Application\\n\\n#Requried Knowledge\\n\\nChrome\\n\\nCPU managment\\n\\nWeb Applications\\n\\nCSS\\n\\nHTML\\n\\nComponents to Test\\n\\n\\n\\nStrategy ProfileComponent()\\n\\n    #Open your chosen web appliation in the Chrome Browser\\n\\n    Open the Chrome Browser\\n\\n    Navigate to your Web Application\\n\\n    Right Click and select 'Inspect'\\n\\n    Click on the Performace Tab\\n\\n    Click the Record Button as indicated\\n\\n    Perform Task on the web application utilizing the component\\n\\n    Click Stop\\n\\n    #A peak is a section of the flame chart where CPU is high\\n\\n    IF there are peaks in the flame chart\\n\\n        FOR EACH peak\\n\\n            Click on the peak\\n\\n            Drag your mouse to highlight the entire peak\\n\\n            Hover over the NET section to view the CSS component utilized\\n\\n            Click on the Event Log in the bottom\\n\\n            Select the longest Task\\n\\n            Expand the Task\\n\\n            Click on the Function Call to identify the component\\n\\n            Look at the current frame state, network requests, animations in \\n\\n                order to come to a conclusion of why the component is slow\\n\\nRETURN NOTHING\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \\n\\n\\n\\n\\n\\n",
      "Task": "ProfilerTask",
      "Time": "Mon Jun 17 2019 21:00:08 GMT-0400 (Eastern Daylight Time), 21:0:8",
      "WorkExperiences": {
        "background": "I'm currently working as an expert in the software development field.  My main experience is in bleeding edge technologies and integrating/researching new programming techniques, frameworks, products, etc in order to improve applications or create new innovative products.  I am sometimes a systems architect and other times a UX resource.  Other than that I'm a full stack developer who is comfortable working on most aspects of a software project.  I was nominated into a technical leadership program and when I graduated I became a PM and tech lead.  I left that position after 2 years because I enjoyed coding more than managing and also felt like I was more valuable as a developer. ",
        "biggestSoftware": "I worked on a large enterprise effort doing way ahead initiatives.  My job was to create functional prototypes and integrate them into the large application.  I developed front end mapping capabilities as well as back end data storage, data warehousing and search. ",
        "biggestWebApplication": "Developed a social media application tailored to customer needs.  Features included uploading news stories, commenting, live chatting as well as image uploads, video uploads and mapping. The application had a search feature as well.   For this effort I was a lead developer. ",
        "softwareDevelopmentExperience": "14",
        "webDevelopmentExperience": "10",
        "webExperiencePeriod": "15 years and 5 months",
        "workExperiencePeriod": "15 years and 5 months"
      }
    },
    "Auth6": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "It needs an understanding of the problems. Asking 3 core questions in any strategies. Why What and How.\nConcentration to keep the key points. The effort to make sure all the use cases are addresses and energy to keep the team going. ",
        "ConcentrationDifficulty_Idea: ": "stronglyDisagree",
        "GuidelinesSupportDifficulty: ": "Yes. Always. The issue comes in once it's done its challenging to keep on the path.",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Depends on novice developer, who is working with. Tools are mere tools, the way we think it counts. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "Every strategy for each problem, business is different. The way we address issues depending on experience is different. \nYes to help with organizing strategy would be nice. With apps to do everything like Jira, AHA, Google sheets its good to have a common tool to manage ideas. Would be good to have toolkit or template handy to begun strategizing issues. ",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "Depends on the tram, business goals, financial impact, leadership vision. It can be hard as it happens in many startup or organization with new ideas but it makes us better for next challenge. ",
        "StrategyEndingDifficulty_Idea: ": "neutral",
        "TimeConsumptionDifficulty: ": "No, it's not. It helps to communicate problems more clearly. Shows experience, makes us think out of box.",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "So many tools are available to translate thoughts into words. Using flow diagrams, sketches or even list of tasks can do the job. More we understand and dissect the problems more easy or efficient it is to solve.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["This is a very common issue within any organization. Any strategy is a simple path to solve a specific problem, not a solution to solve a problem. "],
      "StrategyDefinition": "Insalling git\\nLogin into github account\\n\\nInstall favorite IDE\\nInstall IDE extensions for CSS debug \\nSetup prefer debug environment\\n\\nOpen files into IDE\\n\\nExtension integrated into debug have specific way of debugging issues, would require set of features\\n    To debug CSS style\\n    To highlight, add notations, add comments where the issues are\\n    To view CSS live data with live feedback or solution \\n    To view summary of all css issues\\n    To share myfinding to review with someone wth more in-depth knnowdlege \\n    To gives hints, highlights and do recommendation where the issues are\\n    To submit the list of issues as such it points to issue points within CSS single or multiple files\\n\\nOnce the developer is ok with the issues wihtin single/multiple files\\n    Launch github from within IDE   \\n    Installed extension formates the debug outcome in more presentation way\\n    Commit the changes with debug report file/s\\n    Check status of each issue  \\n\\n\\n\\n\\n\\n",
      "Task": "CssDebuggingTask",
      "Time": "Tue Jun 25 2019 08:41:39 GMT-0400 (Eastern Daylight Time), 8:41:39",
      "WorkExperiences": {
        "background": "Tools to do job and tools to find solutions. Every project or tasks are different. \nGithub, UML, R, Python, C/C++, Java, HTML/CSS, Javascript, MSON, XAML, C#...etc ",
        "biggestSoftware": "Android OS on new hardware\nAi architecture and data visualization ",
        "biggestWebApplication": "Intranet system for a bank with access to several departments.\n\n",
        "softwareDevelopmentExperience": "30",
        "webDevelopmentExperience": "30",
        "webExperiencePeriod": "20 years and 1 months",
        "workExperiencePeriod": "20 years and 1 months"
      }
    },
    "Auth7": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "100% agree.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "The guidelines were very helpful",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's hard, but it's doable. The key is to put yourself in their shoes and keep reminding yourself of the audience. It also helps to visualize the novice developer and think about what's the first question he's going to ask when he sees this.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "The Roboto syntax as a concept seems very useful. Developers of all experience levels frequently leave out important items like context or environment. However, I did not find the formatted examples to be readable or easy to understand, and the box where I was supposed to enter my own strategy was even more unreadable/unusable since using the Roboto syntax did not trigger any type of conditional color coding or formatting. Eventually I abandoned Roboto because it was taking focus away from the strategy",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "I wasn't sure whether to include testing or not. ",
        "StrategyEndingDifficulty_Idea: ": "agree",
        "TimeConsumptionDifficulty: ": "It's not boring, but it can be very, very time consuming. I spent over an hour on this and I'm still not very happy with it.",
        "TimeConsumptionDifficulty_Idea: ": "neutral",
        "TranslationDifficulty": "It's hard to put them into writing ",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["There is no way I could complete the assignment in 45 minutes.", "The text box for entry had no line wrapping, but the Roboto syntax guidelines did not specify a syntax for line breaks"],
      "StrategyDefinition": "# This Strategy will guide you to identifying types of error that a front end component may need to handle\\n\\n\\n\\n#Required Tools and Environments\\n\\nOngoing software project with separate frontend and backend tiers, such as a Model-View-Controller architecture\\n\\nInstalled IDE appropriate for chosen front end technology\\n\\nThe software application can be compiled and executed\\n\\n\\n\\n#Required Knowledge\\n\\nKnowledge of error handling for chosen front end language\\n\\nKnowledge of the calls that will be made to the backend\\n\\nKnowledge of the expected responses from the backend\\n\\n\\n\\n#Context\\n\\nYou understand the intended behavior of your UI component and the overall application.\\n\\nNow I want you to assume that the backend is completely out of your control, and will not behave the way you expect.\\n\\n\\n\\nSTRATEGY FrontEndErrorHandling()\\n\\n    First, you want to break down the different types of failures\\n\\n    You should consider all of the following scenarios, and build a list of errors\\n\\n    \\n\\n    IF no response ever returns\\n\\n        Identify how long your front end will wait for a response, and where this is defined\\n\\n        \\n\\n        IF the timeout is not defined in a central, configurable location\\n\\n            Code: Move the timeout value to a central, configurable location\\n\\n\\n\\n        To make this testable, shorten the timeout to a very short duration\\n\\n\\n\\n        Execute the application and force a timeout. What happens?\\n\\n\\n\\n        Code: Add Error Handling for the timeout\\n\\n        SET 'errorList' TO this error\\n\\n\\n\\n    IF a NULL or empty response is returned\\n\\n        Code: Add checks for null or empty objects before attempting to use them\\n\\n\\n\\n        IF null or empty is a valid response in this context\\n\\n            Code: Ignore the error and gracefully render an empty UI control\\n\\n\\n\\n        IF null or empty is not valid\\n\\n            Code: Add error handling\\n\\n            SET 'errorList' TO this error\\n\\n\\n\\n    IF the wrong response is returned\\n\\n        Consider what the \"right\" response means\\n\\n\\n\\n            Make a list of rules that defines the expected response\\n\\n            #Examples: Size, Data Type, Number of Items\\n\\n\\n\\n            Code: Add error handling for a violation of each rule\\n\\n            # This does not always mean a failure. You will need to decide on context whether to stop the application here, or proceed\\n\\n\\n\\n            IF this is a failure\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n        IF Data returned does not match the type expected\\n\\n\\n\\n            Code: Add error handling and abort\\n\\n            SET 'errorList' TO this error\\n\\n\\n\\n        IF there are differences in syntax or casing between the frontend and backend system\\n\\n            Code: Implement checks to detect and convert the syntax or casing\\n\\n            # Example: converstion between Pascal case and camel case\\n\\n\\n\\n            IF there is no universal conversion possible, and it's possible for conversion to fail\\n\\n                # Universal conversion would mean that any difference can be transformed based on the syntax or casing, not on hard coded exact matches of strings/properties\\n\\n                \\n\\n                Code: Add error handing and abort\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n        IF some data is missing\\n\\n            Code: Set default values for missing fields\\n\\n\\n\\n            IF the component depends on these fields to render or function\\n\\n                Code: Add error handling and abort\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n    FOR EACH 'error' in 'errorList'\\n\\n    \\n\\n        DO IF the UI component cannot be rendered and an error message needs to be displayed\\n\\n            Write user-friendly error messages, including any instructions to recover from the error\\n\\n            Centralize your list of error messages\\n\\n            Present them to the user within a single component\\n\\n\\n\\n        DO Run the application to test the error handling for this error\\n\\n        # If you are not able to recreate a particular failure situation, that does not mean it cannot happen!\\n\\n        # You may need the assistance of a backend developer to truly test these, but that's a differe Strategy...\\n\\n\\n\\nRETURN nothing",
      "Task": "ErrorHandlingTask",
      "Time": "Sun Jun 23 2019 00:47:44 GMT-0400 (Eastern Daylight Time), 0:47:44",
      "WorkExperiences": {
        "background": "I have been a software developer with a large federal contractor for the last 11 years, including internships. In high school, I taught myself HTML, JavaScript, CSS, and PHP, and used those to build small personal and freelance projects. Academically, most of my programming experience in college (B.S. Information Technology and M.S. Software Engineering) were in Java, moving into web applications with JSP, JSF, etc. Professionally, I primarily work in C# and .NET Microsoft applications environments, while also utilizing Angular.",
        "biggestSoftware": "I am a technical lead for the full stack development of a web application that enables 15,000+ users to manage 500,000+ subscribers to a set of communications services. I have moved from role to role within the team depending on needs and release schedule, from database development to back end development to front end development. I am now the technical subject matter expert for the application's business processes, workflows, and user experiences.",
        "biggestWebApplication": "Same as above",
        "softwareDevelopmentExperience": "20",
        "webDevelopmentExperience": "12",
        "webExperiencePeriod": "10 years and 0 months",
        "workExperiencePeriod": "11 years and 0 months"
      }
    },
    "Auth8": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "That's correct. You have to consider all possible scenarios, and the system behavior.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "Yes. Documenting the strategy formulated the design well.",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Not really. I work with offshore developers and write strategy to explain the design to a person sitting thousands of miles away.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyDisagree",
        "RobotoSupportDifficulty: ": "Not really. I am not familiar with Roboto.",
        "RobotoSupportDifficulty_Idea: ": "stronglyDisagree",
        "StrategyEndingDifficulty: ": "Not really",
        "StrategyEndingDifficulty_Idea: ": "stronglyDisagree",
        "TimeConsumptionDifficulty: ": "Articulating is definitely time consuming, but not boring.",
        "TimeConsumptionDifficulty_Idea: ": "stronglyDisagree",
        "TranslationDifficulty": "Yes, in Roboto. It's much easier to write the strategy if the problem statement is more specific, and in a specific programming language.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "Install IDE\\n\\nImport code base for ErrorHandling\\n\\nSTRATEGY ErrorHandling()\\n\\n    Add checks for possible error scenarios. Example null pointer exception or out of bounds exception\\n\\n    Implement a logical flow to notify stakeholders in case of error situation\\n\\n    Write the statements that should get executed regardless of any error scenario\\n\\n    \\n\\n",
      "Task": "ErrorHandlingTask",
      "Time": "Mon Jul 08 2019 18:17:22 GMT-0400 (Eastern Daylight Time), 18:17:22",
      "WorkExperiences": {
        "background": "I have Masters in Computer Science, and have worked in the industry for 6+ years. I have worked mostly as a back end developer. Currently i work as a solution design engineer in an IT firm.",
        "biggestSoftware": "Confidential",
        "biggestWebApplication": "Confidential",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "3 years and 0 months",
        "workExperiencePeriod": "6 years and 0 months"
      }
    },
    "Auth9": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Using Roboto was new.",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "Yes having an SOP is very helpful for knowledge transfer.",
        "GuidelinesSupportDifficulty_Idea: ": "neutral",
        "NoviceUnderstandabilityDifficulty : ": "Using screen shots helps with beginners",
        "NoviceUnderstandabilityDifficulty_Idea: ": "disagree",
        "RobotoSupportDifficulty: ": "I need to get used to it",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "All strategies are an endless WIP as they are never \"complete\"",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "Yes, but it helps in the long run.",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "I write SOP documents often so I am used to this sort of thing",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This Strategy helps impliment error handling for a web application\\n\\n#Considerations\\n\\nUser input\\n\\nDatabase Errors \\n\\n#Required Knowledge\\n\\nWeb application language\\n\\nDatabase SQL\\n\\n\\n\\nSTRATEGY UserInput()\\n\\n# Goal is to limit free-hand input and use strong typing\\n\\nUse list-boxes as much as possible\\n\\nUse Try-Catch and log errors\\n\\nIF list-boxes cannot be used, validate textboxes\\n\\n    Validate datatypes for all enteries\\n\\n    IF numberic reject alpha\\n\\n    IF date validate dates and reject invalid dates\\n\\n    IF character Check for injection (SQL and script) AND\\n\\n       Check for spcial characters\\n\\n    FOR EACH 'textbox' On Page\\n\\n        Validate\\n\\n\\n\\n    IF Error Found    \\n\\n       RETURN Error \\n\\n    ELSE\\n\\n       Submit Page\\n\\n\\n\\nSTRATEGY Database()\\n\\n# Handle null values, data truncation, invalid datatypes\\n\\nIn Queries check values before performing Substring functions\\n\\nUse stored procedures to limit SQL injection\\n\\nUse IsNull (or NVL) for nulls. \\n\\nCheck for blank values using len(trim(<columnName>)) = 0\\n\\nDO NOT USE \"where 1 = 1\" in queries as this allows for \\n\\nSQL injection\\n\\nUse Try-Catch and log all errors\\n\\n\\n\\n",
      "Task": "ErrorHandlingTask",
      "Time": "Tue Jun 25 2019 15:07:10 GMT-0400 (Eastern Daylight Time), 15:7:10",
      "WorkExperiences": {
        "background": "Full stack web developer. Currently using SQL Server and C#.\n\nwww.linkedin.com/in/thoraya-zedan-0576692",
        "biggestSoftware": "I do not write industrial software",
        "biggestWebApplication": "Application used by the Department of State for all software acquisitions ",
        "softwareDevelopmentExperience": "0",
        "webDevelopmentExperience": "40",
        "webExperiencePeriod": "23 years and 0 months",
        "workExperiencePeriod": "0 years and 0 months"
      }
    },
    "Pilot2": {
      "DevelopmentExperiencePeriod": "2 years and 0 months",
      "Difficulties": ["How to test if my strategy is understandable by other human. It would be nice if there is a tool that check for ambiguity. ", "In general, would like to see a better tool support. writing text without like autocomplete and refactoring tools is a bit boring. I feel if the editor has better support for strategies authoring, I would enjoy writing long strategies.", "Writing comment vs statement was always a challenge. I guess to what extend my strategy should be abstract and explained by comments vs having more explicitly statements with less comments?"],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "1",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n\\n\\n\\n#Required Tools and Environments\\n\\nChrome web browser\\n\\nA JavaScript project\\n\\n#Required Knowledge\\n\\nBasic knowledge of how to use Chrome DevTools\\n\\nBasic knowledge of javaScript\\n\\n\\n\\nSTRATEGY performanceProfiler()\\n\\n# You need to first identify potential line of code\\n\\n# that might cause the performance overhead.\\n\\n# Look at data structures for any memory leaks\\n\\n# Look at loops and the code inside them.\\n\\n# Look at third party APIs calls.\\n\\n\\n\\nHypothesize where in your code the bottleneck are\\n\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n    # Add large numbers to data structures\\n\\n    # Make the loop execute thousands of time\\n\\n    # Call that third-party API hundreds of time\\n\\n    # If  you do so, you do not need to execute your code for long time\\n\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n\\n    Amplify line impact\\n\\n\\n\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\n\\nFor EACH line in 'randomLine'\\n\\n# These lines are your baseline for how should the code work\\n\\n# Make sure that you set similar values to that \\n\\n# you set to 'suspectLine'  \\n\\n    Amplify line impact\\n\\n\\n\\n#Lood your javaScript through the Chrome web browser\\n\\n#Open up the Chrome DevTools and head to the profiler\\n\\n# Run the application and wait until all the code execute\\n\\nRun the web application through google DevTools\\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n\\n\\n    #check how the code you suspect is the problem is acting comparing to \\n\\n    #the code that you are pretty sure has nothing to do \\n\\n    #with the performance issue\\n\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n\\n\\n\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n\\n        Fix\\n\\nRETURN nothing\\n\\n",
      "Task": "ProfilerTask",
      "Time": "17:49:10",
      "WebDevelopmentExperience": "3",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot3": {
      "DevelopmentExperiencePeriod": "5 years and 6 months",
      "Difficulties": ["the strategy itself is complex: debugging performance issues requires checking multiple interdependent representations of the program.\n\n", "comparing results makes it hard to describe the strategy or navigate back to a previous step makes it is hard to summarize: If I have to replicate the same strategy with some code change in order to check wether it is faulty or not and the continue the strategy. This means I have to create a main strategy and rewrite the current one to support multiple input and finally use them as a step for the main one.  ", "", "I realized I have to use variables while setting conditionals: several times I wrote the conditional and realize that it depended on something else. How do I know that conditional tests may be need to be reused later thus requiring refactoring the code"],
      "ReactDevelopmentExperience": "4",
      "ReactExperiencePeriod": "2 years and 0 months",
      "SoftwareDevelopmentExperience": "20",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the interaction tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long calls in the stackframe \\n                or Event Log where rendering type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n\\n                \\n\\n\\n\\n     \\n",
      "Task": "ProfilerTask",
      "Time": "16:21:19",
      "WebDevelopmentExperience": "7",
      "WebExperiencePeriod": "5 years and 0 months"
    },
    "Pilot4": {
      "DevelopmentExperiencePeriod": "8 years and 0 months",
      "Difficulties": ["I did not understand Roboto preconditions. Some of them were repetitive, so I was not sure which terms to actually use.", "Pictures tell a thousand words. There should be an easy way to capture screenshots for such profiling tasks instead of writing them down and hoping the person will understand.", "I dont know how much of a good job I did here, because there are already good resources from Google about using its Profiler. What did you expect me to do more?", "What does react (below) have to do with this strategy? I thought it was about Chrome profiler not react.\n", "If the task is about web development, I expect the example to reflect a similar task. Otherwise, it is difficult for me to really understand the level of detail you expect of me. Particularly, profiling is not same as Git merge. Git merge is not that simple (as in example) because you left a lot of steps that could possibly have gone wrong. Point is they both are difficult in their own ways, so I really did not get much by reading Git merge task for me to use it as reference for the Profiling task."],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "10",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\n\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n\\n",
      "Task": "ProfilerTask",
      "Time": "9:38:2",
      "WebDevelopmentExperience": "4",
      "WebExperiencePeriod": "8 years and 0 months"
    },
    "Pilot5": {
      "Difficulties": ["line 14: I wanted to make a recursive call to the strategy, not sure how I could do that, instead wrote it as a statement. \n", "Do While is not in ROBOTO, I decided to follow ROBOTO. ", "It is hard to draw a line between when to define a Variable, or when to informally mention it in Statements and let the user imply it in the future steps."],
      "ImplementedReactApplications": "2",
      "ImplementedSoftware": "15",
      "ImplementedWebApplications": "5",
      "ReactExperiencePeriod": "1 years and 9 months",
      "SoftwareDevelopmentExperiencePeriod": "0 years and 0 months",
      "StrategyDefinition": "# This strategy helps in using Chrome Profiler to improve your web app\\n# Required Tools and Environments\\nInstalling Chrome browser\\nRunning your App in Chrome\\nOpening the developer window, Performance Tab\\n# Required Knowledge\\nKnowledge in JavaScript to edit your App\\nSTRATEGY ChromeProfiler()\\n    # To avoid having tons of data to process, record and process data in small batches\\n    Start recording in the profiler before event that is running slow\\n    Perform the actions on the App\\n    Stop recording\\n    IF the delay is not observed in the recorded frames\\n        Restart the strategy with a wider time frame for recording\\n        RETURN nothing\\n    # Search for slow frames in the top window of the profiler       \\n    SET 'slowFrames' TO slowly loaded slowFrames\\n    FOR EACH 'frame' IN 'slowFrames'\\n        # frame range is set in the profiler\\n        set the frame range to the start and end of the CPU usage mountain containing the 'frame'\\n        # The Flame chart shows the stack of actions and events, by hovering over elements in the stack, the running time will be displayed\\n        SET 'suspiciousEvents' TO events and actions that take a lot of time in the Flame chart\\n        FOR EACH 'event' IN 'suspiciousEvents'\\n            Use the data in the Event Log and Bottom-Up windows in the profiler to find the relevant pieces of code in your App\\n            check the parts of the code of your App that are responsible in triggering 'event'\\n            IF you changed anything and guessing it has improved the performance of the App\\n                DO ChromeProfiler()\\n                RETURN nothing\\n",
      "Task": "ProfilerTask",
      "Time": "15:45:40",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot7": {
      "ConcentrationDifficulty": "I just tried to think of what I would do when I encounter CSS bugs (I am personally not a fan of css) so I try to do out-of-box css whenever possible.",
      "ConcentrationDifficulty_Idea": "agree",
      "Difficulties": ["I've learned that browsing through StackOverflow is a key part of debugging any code but it was challenging to write concrete strategies for what developers should be looking for in StackOverflow posts."],
      "GuidelinesSupportDifficulty": "Yeah, the tutorial at the beginning comparing good strategy writing and bad strategy writing was useful",
      "GuidelinesSupportDifficulty_Idea": "stronglyAgree",
      "ImplementedSoftware": "2",
      "ImplementedWebApplications": "5",
      "NoviceUnderstandabilityDifficulty": "It is not that hard to describe the concrete steps they should be taking -- but it is more challenging to list out the questions that they should be asking when they are reading their code",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "Yeah, it was useful -- but I didn't actively try to follow the syntax. I only mimicked it.",
      "RobotoSupportDifficulty_Idea": "agree",
      "SoftwareDevelopmentExperiencePeriod": "1 years and 0 months",
      "StrategyDefinition": "# This strategy helps you identify...\\n# Required tools and environment\\nHave Node.js installed\\nHave live-server installed\\nHave at least 1 html with file with along with some CSS\\n\\n# Required knowledge\\nKnowledge of how to work with the terminal and run commands\\nReading HTML code\\nReading css and adding css to HTML code\\n\\nSTRATEGY DebugCSS()\\n    Open the terminal and navigate to your project directory where the html files are\\n    Run `live-server` in the terminal\\n    IF the command runs and opens a browser tab\\n        Once you're on the tab, right click\\n        From the menu select `inspect`. It opens Chrome developer tools\\n        Make sure you are on the elements tab\\n        Scroll through the html code and click on the element with faulty behavior\\n        The bottom half of developer tools now focuses on this element\\n        On the styles tab, you should see information on what styles were applied and what weren't.\\n        Identify what styles are overriding the intended CSS\\n        SET `conflictingCSS TO css classes/ids with conflicts \\n        FOR EACH conflict IN conflictingCSS\\n            DO attemptFix(conflict)\\n    IF the command produces errors\\n        Revist the Required Tools and Environment section of this STRATEGY\\n        Make sure you've installed live-server\\n    RETURN Nothing\\n\\n\\nSTRATEGY attemptFix()\\n    Open the html and css code in your favorite code editor\\n    # id styles take priority over class styles\\n    IF your CSS does not obey the correct css priority hierarchy\\n        Redefine the css\\n    IF css hierarchy looks right\\n        Do a stackoverflow search describing the problem\\n        Pick the post that matches your situation\\n    IF browsing doesn't work\\n        Look up alternative ways of acheiving the same effect\\n    RETURN Nothing\\n    \\n",
      "StrategyEndingDifficulty": "I could enumerate all the possible thinks for certain cases -- looking through StackOverflow for example. I had to leave that step pretty generic which is probably unhelpful.",
      "StrategyEndingDifficulty_Idea": "stronglyAgree",
      "Task": "CssDebuggingTask",
      "Time": "17:30:31",
      "TimeConsumptionDifficulty": "I think it depends on the problem that you're trying to write a strategy for",
      "TimeConsumptionDifficulty_Idea": "neutral",
      "TranslationDifficulty": "Since I wasn't working with a concrete problem it was really challenging to describe a strategy that should in theory help with any CSS problem.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot8": {
      "ConcentrationDifficulty": "I had to think back to some common use cases for error handling, and when I wrote it I was primarily thinking about forms and authentication. I tried generalizing by specifying if the component is \"acting irregularly\", but that is a bit broad of a statement. ",
      "ConcentrationDifficulty_Idea": "stronglyAgree",
      "Difficulties": [],
      "GuidelinesSupportDifficulty": "If it becomes standard and less generalizable and can cover all use cases, I think it can definitely help express strategies. ",
      "GuidelinesSupportDifficulty_Idea": "agree",
      "ImplementedSoftware": "18",
      "ImplementedWebApplications": "18",
      "NoviceUnderstandabilityDifficulty": "I think if you make it granular enough it can be understandable for novice developers but it was difficult to specify the base knowledge of the user for something as general as error handling. Errors often occur with things that are out of the developer's domain knowledge.",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "I was not given a reference for how to set variables to the output of a function, so I did \"SET X to DO functionName()\" instead. I think there could be better ways to express general things. I did \"SET 'consoleError' to the error\" (error being the error I had the developer locate) for example, which felt like it didn't follow the syntax well. ",
      "RobotoSupportDifficulty_Idea": "disagree",
      "SoftwareDevelopmentExperiencePeriod": "2 years and 0 months",
      "StrategyDefinition": "# This strategy helps you verify your error handling logic in\\n# front-end web development\\n\\n# Preferred Tools and Environments\\nAn integrated development environment with error checking\\nA component that crashes occasionally for an unknown reason or acts irregularly\\n\\n# Required/Preferred knowledge\\nIntroductory computer science knowledge (CSE 142 @ UW)\\nBasic JavaScript knowledge\\nTry-catch knowledge preferred\\nComponent separation knowledge\\nDebugger/browser console knowledge\\n\\nSTRATEGY ErrorHandle()\\n    SET a component-wide global 'errorMessage' to be empty\\n    # Find the component and function in that component that acts irregularly\\n    IF the component is acting irregularly or crashing\\n        SET 'irregularComponent' to the component\\n        Locate any error messages in the browser's developer console and find the line the error occurs within the 'irregularComponent'\\n        SET 'irregularComponentFunction' to the function generating this error\\n        SET 'consoleError' to the error\\n    IF 'consoleError' is not anything\\n        RETURN nothing\\n    ELSE\\n        # Identifying the reason the line is causing issues can be\\n        # difficult. It can be a variety of different reasons for your\\n        # specific use case. \\n        SET 'reasonsCrashing' to the reasons the line inside 'irregularComponentFunction' is causing issues by reading the 'consoleError' over\\n        DO createErrorHandle('reasonCrashing') \\n        RETURN nothing\\n\\nSTRATEGY createErrorHandle('reasonCrashing')\\n    FOR EACH 'reason' in 'reasonCrashing'\\n        # Create an error handling case\\n        # It is okay that some errors will take priority\\n        createErrorHandleCase('reason')\\n    RETURN nothing\\n\\nSTRATEGY createErrorHandleCase('reason')\\n    # Most of the time, the reason why it is crashing relates to the\\n    # user's input, or something you want to share with the user.\\n    IF 'reason' shows implementation detail\\n        IF 'reason' was caused by the user's input\\n            SET 'allErrors' global to be a reason relating to the user's input\\n        IF 'reason' was caused internally\\n            SET 'allErrors' to a general \"Something went wrong\" message \\n    ELSE \\n        SET 'allErrors' global to the reason why it is crashing\\n    RETURN nothing\\n        \\n ",
      "StrategyEndingDifficulty": "For something like error handling, you cannot say for sure when all the errors are fixed. ",
      "StrategyEndingDifficulty_Idea": "agree",
      "Task": "ErrorHandlingTask",
      "Time": "12:52:19",
      "TimeConsumptionDifficulty": "It required a lot of thought. I think it is definitely a useful use of my time, and if it were my job to do this, I would have some fun with it but only for brief periods of time. It is sorta like programming. It definitely is time consuming. ",
      "TimeConsumptionDifficulty_Idea": "agree",
      "TranslationDifficulty": "I found it difficult to express what was going through my mind. I was thinking about React because it was a component based framework/library, but I tried to generalize this to anything that uses some sort of component based framework/library. I have been doing error handling for such a long time that it's second nature and difficult to generalize.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot9": {
      "CommonDifficulties": ["TranslationDifficultyIdea: neutral", "TranslationDifficulty: Some strategies are much easier to explain with a short video or demo, especially when demoing a specific tool. ", "NoviceUnderstandabilityDifficulty_Idea: agree", "NoviceUnderstandabilityDifficulty : I'm sure that my strategy used knowledge that isn't universally shared (and might be considered an expert blind spot), but, not having a specific instance of this to point to, I'm hopeful that my strategy would be understandable.", "ConcentrationDifficulty_Idea: neutral", "ConcentrationDifficulty: I'm confident it could've taken more concentration, effort and energy! It's challenging to anticipate what might go wrong when a novice tries to follow my strategy. ", "TimeConsumptionDifficulty_Idea: disagree", "TimeConsumptionDifficulty: It's worthwhile, but I feel that it might be better to provide strategies on-demand, rather than in advance, though this would require a repository of strategies to exist. I think writing a strategy without much context on what the learner needs is challenging.", "StrategyEndingDifficulty_Idea: stronglyAgree", "StrategyEndingDifficulty: A syntactic construct for finishing might be nice here -- it's awkward to return an action \"Done\"", "RobotoSupportDifficulty_Idea: neutral", "RobotoSupportDifficulty: Preconditions for using a strategy are a great idea, although it's extremely tempting to just write \"basic understanding of x\" without specifics of what a basic understanding means. I feel that if a language includes an IF construct, it should also have ELSE and ELSE IF constructs. Programmatic articulation is a good idea, but might be challenging for novices to understand. I've got some concern that some strategies might not express themselves well programmatically, like \"try this for a while, if you don't get anywhere in several minutes, try this\" or \"look at these three examples and determine which one is most intuitive to you\"", "GuidelinesSupportDifficulty_Idea: agree", "GuidelinesSupportDifficulty: It's definitely a good way to constrain strategy expression to a format that should be easier to understand than a paragraph of text. Again, I worry that novices, especially those without a good grasp of computation, might struggle with the programmatic format. "],
      "OtherDifficulties": ["I haven't actually done CSS debugging, I had to do some research to understand the typical debugging approach.", "It's hard to use text to describe where buttons are (line 11)", "There isn't a good way to express \"if you got here, I don't know how to help you anymore, go find a different strategy\" (line 23)", "It's hard to articulate when the strategy was successful or when the strategy failed -- I feel that it should be based in return conditions (line 18, 22, 23)", "Articulating \"fix the bug\" is hard, this definitely feels like a big expert blind spot."],
      "StrategyDefinition": "# This strategy helps in debugging CSS\\n#Required Tools and Environments\\nFirefox web browser\\n#Required Knowledge\\nBasic understanding of CSS\\nUnderstanding of the CSS Cascade (https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade)\\nSTRATEGY DebugCss()\\n    Open file with bug in Firefox\\n    Right-click on the page and select \"Inspect Element\"\\n    Move to the portion of the page with the bug\\n    To the left of the \"Inspector\" tab, click the element picker button\\n    Click the page element that isn't displaying properly\\n    # The center column of the Inspector shows all styles associated with the element, in order of precedence\\n    Find the style element that should be shown\\n    IF the desired style is crossed out\\n        Find CSS style that overwrote it by scrolling up\\n        Change the desired style to have higher precedence or the shown style to have lower precedence, or change the inheritance structure\\n        return done\\n    IF the desired style isn't shown\\n        Add the desired style to the project's CSS sheet\\n        DebugCss()\\n        return done\\n    return nothing",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jun 01 2019 14:26:06 GMT-0400 (Eastern Daylight Time), 14:26:616:42:32",
      "WorkExperiences": ["workExperiencePeriod: 6 years and 0 months", "softwareDevelopmentExperience: 12", "biggestSoftware: An operating system with 20+ system calls (including fork(), exec(), exit(), wait()), on-demand paging, ZFOD, and a user-space threading library.", "webExperiencePeriod: 0 years and 2 months", "webDevelopmentExperience: 1", "biggestWebApplication: [object HTMLTextAreaElement]"]
    },
    "Test1": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's hard to translate thoughts and strategies into words.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "StrategyEndingDifficulty_Idea: ": "stronglyAgree",
        "TimeConsumptionDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's hard to translate thoughts and strategies into words.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["It's hard to translate thoughts and strategies into words."],
      "StrategyDefinition": "background# This Strategy helps you merge 2 branches in githup and resolve conflicts\\n#Required Tools and Environments\\nInstalling git\\nGithub account\\nOngoing project which is progressing in at least 2 branches\\nGit repository that is not associated with Github\\n#Required Knowledge\\nBasic git command knowledge\\nKnowledge of how to work with terminal and run commands\\nSTRATEGY GitMerge()\\n# Open the teminal, and use cd(change directory) command to move to the local git project directory\\nOpen the terminal and navigate to your git project directory\\nIF you are not in the master branch\\n# R",
      "Task": "ProfilerTask",
      "Time": "Mon Jun 17 2019 11:19:10 GMT-0400 (Eastern Daylight Time), 11:19:10",
      "WorkExperiences": {
        "background": "ssdasf",
        "biggestSoftware": "5",
        "biggestWebApplication": "5",
        "softwareDevelopmentExperience": "5",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "5 years and 5 months",
        "workExperiencePeriod": "5 years and 5 months"
      }
    },
    "pilot1": {
      "Difficulties": ["Defining new keyword like WHILE, LIST, SORT,\nI was not sure they are supported in the Rboto or not. It was better if  somehow it accepts or rejects keywords", "I had exprience in other profilers, but i was not familiar with React profiler\nbeacuse of that i had difficulty for writing strategy"],
      "JavaScriptExperience": "1",
      "ReactExperience": "1",
      "SoftwareDevelopmentExperience": "7",
      "StrategyDefinition": "# strategy for effectively profiling any React application.\\n\\n# Required tools and environment\\n install React 16.5 or newer\\n add DevTools profiler plugin\\n# Required knowledge\\n Basic knowledge of React\\n read profiling tool tutorials\\n\\n STRATEGY profiling ()\\n    #open the DevTools\\n    open the DevTools in a browser\\n   WHILE you think the performance is fine\\n        # record the profiler\\n        start recording profiler\\n        # first landing page of the application\\n        open the first page of the application\\n        # play with most of components of the application for logging\\n        click or open on most of components of the application in order to be recorded in profiling\\n        # stop profiler\\n        in DevTools click stop button\\n        # watch Component chart\\n        watch component chart for finding which componets consume more resource like time or memory\\n        SET 'ComponentNeedProfiling' to the list of components that you watch in the previous step and they consume most of the resource\\n        FOR EACH 'component' IN 'ComponentNeedProfiling' \\n            run flame chart\\n            ADD 'logsOfFlames' store a log from the output of flame chart for each component\\n        SORT 'logsOfFlames' sort based on the time consumption or resource, it should be descening\\n        FIX  watch the flame report and try to fix the first component in the sorted list\\n    ",
      "Time": "11:53:51",
      "WebExperience": "7"
    }
  }
}