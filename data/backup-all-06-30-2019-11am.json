{
  "AUTHORS": {
    "0jfziD4HY6xwCE0FKfO0": {
      "CodebaseRequirements": "The developer should know where the metal image processing pipeline exists in the codebase",
      "Defect": "Using a Metal backed core image context to render to a MTKView",
      "Experience": "3",
      "JavaFramework": "blade",
      "JavaVersion": "java8",
      "KnowledgeRequirements": "The developer should have basic knowledge about the high level structures provided by Metal and how they work. This includes: the Metal Device, Command Queue, Command Buffers, and Render Encoders.",
      "ParticipationId": "7",
      "StrategyDefenition": "#Apple has recently moved to using the Metal programming language for GPU programming on iOS, replacing CoreImage and OpenGL.\n#While Metal offers many good features, sometimes it is quicker to use image processing features that have already been written\n#using CoreImage instead of taking the time to rewrite them in Metal. Apple provides an MTKView as a solution for easily rendering\n#Metal backed content to a view. This Strategy helps you to use CoreImage to render to a MTKView on iOS.\n\n#Required Tools and Environment\n- Assuming XCode is already installed on the system, project is checked out,\nand successfully building/running.\n- Assuming a Metal backed image processing pipeline has already been set up \nin the project\n\n#Required Knowledge\n- basic knowlege of Metal and CoreImage on iOS\n- experience with Swift or Objective-C \n\nSTRATEGY useCoreImageToRenderToMetalView()\n    #create a CoreImage Context using the Metal device\n    Find where the Metal device is being created in the project\n    IF a CoreImage Context has not already been created\n        Immediately after creating the metal device, create a CoreImage Context, passing the device in as the parameter\n    #verify the MTKView is framebufferOnly propety configured properly\n    IF the MTKView's framebufferOnly property is not set OR the MTKViews framebufferOnly property == TRUE\n        #this is a very important step as it allows a CIImage to be written directly \n        #to the MTKView's texture. Otherwise, the output will display a solid purple/pink color.\n        set the MTKView's framebufferOnly property to FALSE\n    #A new command buffer will be created on each render pass \n    Create a new command buffer using the Metal device's command queue\n    Create a new CIImage from the given pixel buffer you would like to render\n    #apply whatever CIFilters you would like to use on the CIImage (one after another)\n    FOR EACH 'filter' IN 'CIFilters'\n        DO applyFilter(CIImage)\n    #after the filters have been applied to the CIImage, render the CIImage to the MTKView\n    Use the CoreImage Context created earlier to render the CIImage directly to the MTKView's current drawable\n    #submit the command buffer to be executed by the GPU\n    Present the command buffer \n    Commit the commmand buffer\n    RETURN nothing\n    ",
      "ToolsRequirements": "Mac computer, XCode, an iPhone device to run the code on"
    },
    "Auth1": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Not really because I had to think about the scenarios I run into and then try to write something which is generic enough without knowing the problem. However, there may be issues where you really have to concentrate to write down a proper strategy. ",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "It gives it a standardized and structured format which could be easier for any developer to follow. They need to be familiar with some programming style though. \nFor example, a developer who mainly works with HTML and CSS may not quickly grasp the syntaxes and format mentioned for Roboto strategy. ",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's a bit hard because there may be multiple ways to troubleshoot and debug an issue and some general strategy may not give an accurate way of diagnosing a problem. \nAlso, a part of strategy could be to ask the question to a novice developer about the problem to come up with a proper strategy. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "For the most part, yes, but there might be something that it's missing. For example, I didn't see anything about ELSE condition along with IF",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "It depends on the problem. ",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "It takes time to write something down in a proper, strucutured format over just talking to someone or even writing it down based on the exact issue. ",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's not hard to translate thoughts and strategies into works but also it's not easy either. It's much easier if it's done in person or you are talking to that person over writing it down.",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["I didn't see if Roboto supports ELSE conditions so I think that would be helpful. \nHaving something like tagging an action could be beneficial. E.g. if you tag a specific line or action with something, you can reference that tag somewhere else in the strategy. The concept may be similar to Calls but there's no function or sub-strategy in there\nMaybe having something like GOTO could be helpful in instances where you want the user to go to a specific line in the strategy, it could use tag name to point the user to"],
      "StrategyDefinition": "# This strategy is to troubleshoot and debug CSS issues on a web page where appropriate styling is not being applied on an element\\n\\n# Required Knowledge\\n\\nBasic HTML knowledge\\n\\nBasic CSS knowledge\\n\\nBasic familiarity with broswer dev tools\\n\\n\\n\\n#Required Tools and Environments\\n\\n#Any of the modern browsers would work: Chrome, Firefox, IE Edge, Safari as all come with dev tools these days\\n\\n#For this strategy I am going to go with Chrome but the strategy applies to other browsers as well\\n\\nChrome or Firefox\\n\\n#IDE environment like Visual Studio Code, Brackets, Notepad++\\n\\n#For this strategy, I am going to consider Notepad++\\n\\n\\n\\nSTRATEGY DebugCSS()\\n\\n\\n#Open the web page in your browser where you have CSS issue\\n\\n\\nOpen web page in Chrome\\n\\n\\nSET 'wrongCSSElements' to the elements that have wrong styling applied\\n\\n\\nFOR EACH 'wrongCSSElement' IN 'wrongCSSElements'\\n\\n\\n\\nRight-click on the element that doesn't have the right styling \\n\\n\\n\\nClick on \"Inspect Element\"\\n\\n\\n\\n#This will open the chrome dev tools either on the side or in the bottom by default\\n\\n\\n\\nThis shows Chrome developer tools \\n\\n\\n\\nThe element will be highlighted in there\\n\\n\\n\\n# Left side shows HTML and right side shows the styling for that element\\n\\n\\n\\nOn the right side, it shows the styling applied to that element\\n\\n\\n\\n# Sometimes the wrong styling is coming from an element's parent or something defined at a global level\\n\\n\\n\\nIF you see the incorrect styling in there\\n\\n\\n\\n\\nChange it in the dev tools to see the changes in your browser in real-time\\n\\n\\n\\nELSE \\n\\n\\n\\n\\nscroll down to other styles to identify the style that is overwriting the right style\\n\\n\\n\\n\\nChange it in the dev tools to see the changes in your browser in real-time\\n\\n\\n\\n#The site could be using multiple css files, dev tools shows the CSS file name where the style comes from\\n\\n\\n\\nCheck the CSS file where the wrong style is coming from\\n\\n\\n\\nOpen the CSS file in Notepad++\\n\\n\\n\\nFind the CSS class in this file and update it\\n\\n\\n\\n\\nRETURN nothing",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jun 24 2019 22:49:05 GMT-0400 (Eastern Daylight Time), 22:49:5",
      "WorkExperiences": {
        "background": "I am a full stack developer with an experience of over 8 years. For back-end, I am proficient with ASP.NET and SQL DB. ",
        "biggestSoftware": "Created an application that syncs the user data and their permissions to access the website between the CMS, Database and Salesforce. The application and its features were role and access based, so depending on the roles of a user and permissions set on the pages, a user will have access to. A user has to pay to get access to different roles, so it is very critical that they have access to only what is required, and shouldn't be able to access other stuff. \nThe application runs through all users and ensures everything is in sync and also logs everything with timestamp. \n",
        "biggestWebApplication": "We got new conference registration vendor which handles conference logistics and registration. They should check if a user already exists in the database, if not, it reates their record and order in the vendor database, and should do the same in our systems. \nI created APIs for them to check if a user exists, create users, create orders, apply payment records etc, along with some detailed logging to create reports to be analyzed later to ensure the integration worked well.  ",
        "softwareDevelopmentExperience": "3",
        "webDevelopmentExperience": "7",
        "webExperiencePeriod": "8 years and 0 months",
        "workExperiencePeriod": "8 years and 0 months"
      }
    },
    "Auth13": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I spent far more 45 minutes to write this strategy, although generally speaking, css debugging is amongst the easiest ones",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "It helped for sure. ",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Some general concepts can be strategized, but development comes with some unexpected outcomes that it is hard to write strategies when outcome is unexpected ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "It is a new idea and it can be effective. Roboto language can make it more opinionated to write strategies. It is some kind of standardizing for writing strategies.",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "I don't think so, It is like writing a program. every good programmer comes with a plan how to wire its code. programming strategies is no exception.",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "It is tiring because you need to check if you have included all the cases could happen",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "Some edge cases is hard to include in a strategy as a general recipe. Also, sometimes you need to show a demo or some sort of an example to make your point.",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": ["When going through tutorials about how to use Roboto, I found it difficult when a statement is finished (I mean, some times I thought the statement sentence is just wrapped to the next line, because not enough space was there). Maybe if you could add some sort of line termination like semicolon \";\" or just period \".\", since the statement will be read by humans. "],
      "StrategyDefinition": "# This Strategy helps developer fix the issue of an element with undesired visual/position style.\\n#Required Tool and Environment\\nWeb Browser(Google chrome is preferred)\\n#Required Knowledge\\nBasic Knowledge of css and html\\nSTRATEGY DebugCss()\\n    Open your web app and go to the page with undesired element\\n    SET 'buggedElement' TO element with undesired style and positioning\\n    # The \"inspect\" action name might be different from Browser to Browser\\n    Right click on 'buggedElement' and click on inspect\\n    # An extra window opens with some tabs like Element, Console and Styles\\n    Click on Styles tab in the inspect window\\n    # Make sure your buggedElement is highlighted or chosen\\n    # you will be able to see a list of stylings applied to element\\n    IF 'buggedElement' has issue when hovering or focusin on it\\n        # When clicking on :hov, few checkboxes appears\\n        # :hover, :focus, :active  are amongst them\\n        Click on \":hov\" and check all the boxes that applies\\n    \\n    IF 'buggedElement' issue is positioning\\n        SET 'position' TO 'buggedElement' position proptery value\\n        IF 'position' is not absolute\\n            DO FixCss('buggedElement')\\n            RETURN nothing\\n        \\n        # element with position absolute is positioned relative to the nearest positioned ancestor\\n        # Note: A \"positioned\" element is one whose position is anything except static.\\n        IF 'position' is absolute\\n            # desired parent means the parent element that buggedElement was supposed to be relative to\\n            Look up at element's ancestors and find the desired parent\\n            SET 'parent' TO desired parent element\\n            Change the 'parent' position proptery to relative\\n            RETURN nothing\\n    \\n    IF 'buggedElement' issue is styling\\n        DO FixCss('buggedElement')\\n        RETURN nothing\\n\\nSTRATEGY FixCss(buggedElement)\\n    # You can use filter input to search for it\\n        # Or you can scroll through the styles manually\\n        Search through the stylings to find where it gets its undesired value\\n        SET 'undesiredStyling' TO the line number and css file found in the search\\n        IF 'undesiredStyling' is not found\\n            # You will find all stylings applied to the element here\\n            # Once you found the stylings you were looking for\\n            # You can click small arrow to jump to the place it gets its value\\n            Click on Computed tab and use filter to search\\n            SET 'undesiredStyling' TO line number found here\\n        SET 'perfectStyleList' TO an empty list of css properties\\n        UNTIL buggedElement has desired styling\\n            # you can add or change different css styles to the element\\n            # it then applies instantly to element stylings\\n            Use element.Style to apply css to buggedElement\\n            add the style proptery to 'perfectStyleList'\\n        DO ApplyCssToElement(buggedElement, 'perfectStyleList')\\n      \\nSTRATEGY ApplyCssToElement(element, style)\\n    # Css rules are cascading. The one with most priority applies\\n    # This is how priority gets evaluated\\n    # !important |  style=\"\" | id selector | class attribute, psudo class selector | type selector and psudo element\\n    # For easy explanation: use this url: http://qnimate.com/dive-into-css-specificity/\\n    # Also the if there are two css files having the same selector, the file placed last in order is evaluated\\n    IF style has to be applied to only this element\\n        # e.g. choose last css file in order, use id selector and so on\\n        Use strogest selector, apply style to element\\n        RETURN nothing\\n    IF style has to be applied on many elements\\n        use class selector, apply style to element\\n        RETURN nothing\\n    \\n",
      "Task": "CssDebuggingTask",
      "Time": "Sat Jun 22 2019 12:41:48 GMT-0400 (Eastern Daylight Time), 12:41:48",
      "WorkExperiences": {
        "background": "I am working as senior software developer in ITS department at Old Dominion University. I have been involved in many projects such as student attendance project, web portal application. \nMy LinkedIn account: https://www.linkedin.com/in/meysam-abolghasemi-7b867998/\nMy Github account: meysamabl@gmail.com",
        "biggestSoftware": "I have been developing in web portal application for my university where students, staffs and faculties can interact with it as dashboard.",
        "biggestWebApplication": "Same answer as above. All my industrial experience was involved in web application development of some sort developing with different technologies. Any non web application development that I have been involved was mostly limited to course based projects or some self-learning projects. ",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "10",
        "webExperiencePeriod": "5 years and 0 months",
        "workExperiencePeriod": "5 years and 0 months"
      }
    },
    "Auth3": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "I just need to remember all the situations I was in and how I resolved the issues.",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "Agree.Depends on how well you write with some real scenarios.",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "Nowadays web development has lot of help but agree than it is not easy to come up with any\nstandard strategies.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "Yes,I liked the structure.",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "Strategy keep evolving based the difficulty of task at hand.A complex web application with log of UI features involves\nmore strategies.",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "In person explanation probably is better by going over debugging strategies using live examples and demonstration",
        "TimeConsumptionDifficulty_Idea: ": "neutral",
        "TranslationDifficulty": "This particular problem of CSS debugging comes through continuous efforts to test your code and heavily use Browser debugging tools along with understanding the fundamentals of CSS.",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["I was always following same strategy as far as CSS debugging is concerned."],
      "StrategyDefinition": "# This Strategy  helps identify the origin of the CSS issue\\n\\n# Required Tools and Environments\\n\\n1.IDE like Atom,Visual Studio Code 2.Browser \\n\\n#Required Knowledge\\n\\nFundamentals of CSS,Browser Developer Tools\\n\\nSTRATEGY CSS DEBUGGING\\n\\n1.Use Inspect feature of the browser of your choice.\\n\\n2.Once you click on Inspect feature,you can point to the\\n\\nsection of your webpage that has CSS issue\\n\\n3.The right side corner of the Developer Tool window highlights\\n\\nthe CSS used.You can change the CSS and see the changes on the webpage instantly.",
      "Task": "CssDebuggingTask",
      "Time": "Thu Jun 13 2019 19:07:33 GMT+0000 (Coordinated Universal Time), 19:7:33",
      "WorkExperiences": {
        "biggestSoftware": "All are equally complex with work on all the tiers.\nDB schema,DB maintenance\nCode migrations,Version upgrades\nIntegration,Load testing.",
        "biggestWebApplication": "All are equally complex with heavy user input(forms),UI validation,alerts,notifications.",
        "softwareDevelopmentExperience": "5",
        "webDevelopmentExperience": "2",
        "webExperiencePeriod": "9 years and 0 months",
        "workExperiencePeriod": "16 years and 0 months"
      }
    },
    "Auth5": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "This took a lot more effort than anticipated",
        "ConcentrationDifficulty_Idea: ": "agree",
        "GuidelinesSupportDifficulty: ": "I think structure is always beneficial.  I would worry about taking a senior developers time to write strategies though.. ",
        "GuidelinesSupportDifficulty_Idea: ": "agree",
        "NoviceUnderstandabilityDifficulty : ": "I think this all depends on what the strategy is and how complex",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "I feel like I was writing to humans in a way I would write code for computers to understand, if that makes sense",
        "RobotoSupportDifficulty_Idea: ": "agree",
        "StrategyEndingDifficulty: ": "I didn't find this difficult",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "I wouldn't want to do this for my job",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's easy to look at the profiler and know what's happening but it's hard to explain it ",
        "TranslationDifficultyIdea": "agree"
      },
      "OtherDifficulties": ["A little hard figuring how to write this strategy when web applications can be so different"],
      "StrategyDefinition": "#This Strategy helps you learn how to utilize the Chrome Profiler\\n\\n#in order to identify slow or inefficient components\\n\\n#Requried Tools and Environments\\n\\nChrome\\n\\nA Web Application\\n\\n#Requried Knowledge\\n\\nChrome\\n\\nCPU managment\\n\\nWeb Applications\\n\\nCSS\\n\\nHTML\\n\\nComponents to Test\\n\\n\\n\\nStrategy ProfileComponent()\\n\\n    #Open your chosen web appliation in the Chrome Browser\\n\\n    Open the Chrome Browser\\n\\n    Navigate to your Web Application\\n\\n    Right Click and select 'Inspect'\\n\\n    Click on the Performace Tab\\n\\n    Click the Record Button as indicated\\n\\n    Perform Task on the web application utilizing the component\\n\\n    Click Stop\\n\\n    #A peak is a section of the flame chart where CPU is high\\n\\n    IF there are peaks in the flame chart\\n\\n        FOR EACH peak\\n\\n            Click on the peak\\n\\n            Drag your mouse to highlight the entire peak\\n\\n            Hover over the NET section to view the CSS component utilized\\n\\n            Click on the Event Log in the bottom\\n\\n            Select the longest Task\\n\\n            Expand the Task\\n\\n            Click on the Function Call to identify the component\\n\\n            Look at the current frame state, network requests, animations in \\n\\n                order to come to a conclusion of why the component is slow\\n\\nRETURN NOTHING\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \\n\\n\\n\\n\\n\\n",
      "Task": "ProfilerTask",
      "Time": "Mon Jun 17 2019 21:00:08 GMT-0400 (Eastern Daylight Time), 21:0:8",
      "WorkExperiences": {
        "background": "I'm currently working as an expert in the software development field.  My main experience is in bleeding edge technologies and integrating/researching new programming techniques, frameworks, products, etc in order to improve applications or create new innovative products.  I am sometimes a systems architect and other times a UX resource.  Other than that I'm a full stack developer who is comfortable working on most aspects of a software project.  I was nominated into a technical leadership program and when I graduated I became a PM and tech lead.  I left that position after 2 years because I enjoyed coding more than managing and also felt like I was more valuable as a developer. ",
        "biggestSoftware": "I worked on a large enterprise effort doing way ahead initiatives.  My job was to create functional prototypes and integrate them into the large application.  I developed front end mapping capabilities as well as back end data storage, data warehousing and search. ",
        "biggestWebApplication": "Developed a social media application tailored to customer needs.  Features included uploading news stories, commenting, live chatting as well as image uploads, video uploads and mapping. The application had a search feature as well.   For this effort I was a lead developer. ",
        "softwareDevelopmentExperience": "14",
        "webDevelopmentExperience": "10",
        "webExperiencePeriod": "15 years and 5 months",
        "workExperiencePeriod": "15 years and 5 months"
      }
    },
    "Auth6": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "It needs an understanding of the problems. Asking 3 core questions in any strategies. Why What and How.\nConcentration to keep the key points. The effort to make sure all the use cases are addresses and energy to keep the team going. ",
        "ConcentrationDifficulty_Idea: ": "stronglyDisagree",
        "GuidelinesSupportDifficulty: ": "Yes. Always. The issue comes in once it's done its challenging to keep on the path.",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "Depends on novice developer, who is working with. Tools are mere tools, the way we think it counts. ",
        "NoviceUnderstandabilityDifficulty_Idea: ": "neutral",
        "RobotoSupportDifficulty: ": "Every strategy for each problem, business is different. The way we address issues depending on experience is different. \nYes to help with organizing strategy would be nice. With apps to do everything like Jira, AHA, Google sheets its good to have a common tool to manage ideas. Would be good to have toolkit or template handy to begun strategizing issues. ",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "Depends on the tram, business goals, financial impact, leadership vision. It can be hard as it happens in many startup or organization with new ideas but it makes us better for next challenge. ",
        "StrategyEndingDifficulty_Idea: ": "neutral",
        "TimeConsumptionDifficulty: ": "No, it's not. It helps to communicate problems more clearly. Shows experience, makes us think out of box.",
        "TimeConsumptionDifficulty_Idea: ": "disagree",
        "TranslationDifficulty": "So many tools are available to translate thoughts into words. Using flow diagrams, sketches or even list of tasks can do the job. More we understand and dissect the problems more easy or efficient it is to solve.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["This is a very common issue within any organization. Any strategy is a simple path to solve a specific problem, not a solution to solve a problem. "],
      "StrategyDefinition": "Insalling git\\nLogin into github account\\n\\nInstall favorite IDE\\nInstall IDE extensions for CSS debug \\nSetup prefer debug environment\\n\\nOpen files into IDE\\n\\nExtension integrated into debug have specific way of debugging issues, would require set of features\\n    To debug CSS style\\n    To highlight, add notations, add comments where the issues are\\n    To view CSS live data with live feedback or solution \\n    To view summary of all css issues\\n    To share myfinding to review with someone wth more in-depth knnowdlege \\n    To gives hints, highlights and do recommendation where the issues are\\n    To submit the list of issues as such it points to issue points within CSS single or multiple files\\n\\nOnce the developer is ok with the issues wihtin single/multiple files\\n    Launch github from within IDE   \\n    Installed extension formates the debug outcome in more presentation way\\n    Commit the changes with debug report file/s\\n    Check status of each issue  \\n\\n\\n\\n\\n\\n",
      "Task": "CssDebuggingTask",
      "Time": "Tue Jun 25 2019 08:41:39 GMT-0400 (Eastern Daylight Time), 8:41:39",
      "WorkExperiences": {
        "background": "Tools to do job and tools to find solutions. Every project or tasks are different. \nGithub, UML, R, Python, C/C++, Java, HTML/CSS, Javascript, MSON, XAML, C#...etc ",
        "biggestSoftware": "Android OS on new hardware\nAi architecture and data visualization ",
        "biggestWebApplication": "Intranet system for a bank with access to several departments.\n\n",
        "softwareDevelopmentExperience": "30",
        "webDevelopmentExperience": "30",
        "webExperiencePeriod": "20 years and 1 months",
        "workExperiencePeriod": "20 years and 1 months"
      }
    },
    "Auth7": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "100% agree.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "The guidelines were very helpful",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's hard, but it's doable. The key is to put yourself in their shoes and keep reminding yourself of the audience. It also helps to visualize the novice developer and think about what's the first question he's going to ask when he sees this.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "agree",
        "RobotoSupportDifficulty: ": "The Roboto syntax as a concept seems very useful. Developers of all experience levels frequently leave out important items like context or environment. However, I did not find the formatted examples to be readable or easy to understand, and the box where I was supposed to enter my own strategy was even more unreadable/unusable since using the Roboto syntax did not trigger any type of conditional color coding or formatting. Eventually I abandoned Roboto because it was taking focus away from the strategy",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "I wasn't sure whether to include testing or not. ",
        "StrategyEndingDifficulty_Idea: ": "agree",
        "TimeConsumptionDifficulty: ": "It's not boring, but it can be very, very time consuming. I spent over an hour on this and I'm still not very happy with it.",
        "TimeConsumptionDifficulty_Idea: ": "neutral",
        "TranslationDifficulty": "It's hard to put them into writing ",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": ["There is no way I could complete the assignment in 45 minutes.", "The text box for entry had no line wrapping, but the Roboto syntax guidelines did not specify a syntax for line breaks"],
      "StrategyDefinition": "# This Strategy will guide you to identifying types of error that a front end component may need to handle\\n\\n\\n\\n#Required Tools and Environments\\n\\nOngoing software project with separate frontend and backend tiers, such as a Model-View-Controller architecture\\n\\nInstalled IDE appropriate for chosen front end technology\\n\\nThe software application can be compiled and executed\\n\\n\\n\\n#Required Knowledge\\n\\nKnowledge of error handling for chosen front end language\\n\\nKnowledge of the calls that will be made to the backend\\n\\nKnowledge of the expected responses from the backend\\n\\n\\n\\n#Context\\n\\nYou understand the intended behavior of your UI component and the overall application.\\n\\nNow I want you to assume that the backend is completely out of your control, and will not behave the way you expect.\\n\\n\\n\\nSTRATEGY FrontEndErrorHandling()\\n\\n    First, you want to break down the different types of failures\\n\\n    You should consider all of the following scenarios, and build a list of errors\\n\\n    \\n\\n    IF no response ever returns\\n\\n        Identify how long your front end will wait for a response, and where this is defined\\n\\n        \\n\\n        IF the timeout is not defined in a central, configurable location\\n\\n            Code: Move the timeout value to a central, configurable location\\n\\n\\n\\n        To make this testable, shorten the timeout to a very short duration\\n\\n\\n\\n        Execute the application and force a timeout. What happens?\\n\\n\\n\\n        Code: Add Error Handling for the timeout\\n\\n        SET 'errorList' TO this error\\n\\n\\n\\n    IF a NULL or empty response is returned\\n\\n        Code: Add checks for null or empty objects before attempting to use them\\n\\n\\n\\n        IF null or empty is a valid response in this context\\n\\n            Code: Ignore the error and gracefully render an empty UI control\\n\\n\\n\\n        IF null or empty is not valid\\n\\n            Code: Add error handling\\n\\n            SET 'errorList' TO this error\\n\\n\\n\\n    IF the wrong response is returned\\n\\n        Consider what the \"right\" response means\\n\\n\\n\\n            Make a list of rules that defines the expected response\\n\\n            #Examples: Size, Data Type, Number of Items\\n\\n\\n\\n            Code: Add error handling for a violation of each rule\\n\\n            # This does not always mean a failure. You will need to decide on context whether to stop the application here, or proceed\\n\\n\\n\\n            IF this is a failure\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n        IF Data returned does not match the type expected\\n\\n\\n\\n            Code: Add error handling and abort\\n\\n            SET 'errorList' TO this error\\n\\n\\n\\n        IF there are differences in syntax or casing between the frontend and backend system\\n\\n            Code: Implement checks to detect and convert the syntax or casing\\n\\n            # Example: converstion between Pascal case and camel case\\n\\n\\n\\n            IF there is no universal conversion possible, and it's possible for conversion to fail\\n\\n                # Universal conversion would mean that any difference can be transformed based on the syntax or casing, not on hard coded exact matches of strings/properties\\n\\n                \\n\\n                Code: Add error handing and abort\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n        IF some data is missing\\n\\n            Code: Set default values for missing fields\\n\\n\\n\\n            IF the component depends on these fields to render or function\\n\\n                Code: Add error handling and abort\\n\\n                SET 'errorList' TO this error\\n\\n\\n\\n    FOR EACH 'error' in 'errorList'\\n\\n    \\n\\n        DO IF the UI component cannot be rendered and an error message needs to be displayed\\n\\n            Write user-friendly error messages, including any instructions to recover from the error\\n\\n            Centralize your list of error messages\\n\\n            Present them to the user within a single component\\n\\n\\n\\n        DO Run the application to test the error handling for this error\\n\\n        # If you are not able to recreate a particular failure situation, that does not mean it cannot happen!\\n\\n        # You may need the assistance of a backend developer to truly test these, but that's a differe Strategy...\\n\\n\\n\\nRETURN nothing",
      "Task": "ErrorHandlingTask",
      "Time": "Sun Jun 23 2019 00:47:44 GMT-0400 (Eastern Daylight Time), 0:47:44",
      "WorkExperiences": {
        "background": "I have been a software developer with a large federal contractor for the last 11 years, including internships. In high school, I taught myself HTML, JavaScript, CSS, and PHP, and used those to build small personal and freelance projects. Academically, most of my programming experience in college (B.S. Information Technology and M.S. Software Engineering) were in Java, moving into web applications with JSP, JSF, etc. Professionally, I primarily work in C# and .NET Microsoft applications environments, while also utilizing Angular.",
        "biggestSoftware": "I am a technical lead for the full stack development of a web application that enables 15,000+ users to manage 500,000+ subscribers to a set of communications services. I have moved from role to role within the team depending on needs and release schedule, from database development to back end development to front end development. I am now the technical subject matter expert for the application's business processes, workflows, and user experiences.",
        "biggestWebApplication": "Same as above",
        "softwareDevelopmentExperience": "20",
        "webDevelopmentExperience": "12",
        "webExperiencePeriod": "10 years and 0 months",
        "workExperiencePeriod": "11 years and 0 months"
      }
    },
    "Auth9": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "Using Roboto was new.",
        "ConcentrationDifficulty_Idea: ": "neutral",
        "GuidelinesSupportDifficulty: ": "Yes having an SOP is very helpful for knowledge transfer.",
        "GuidelinesSupportDifficulty_Idea: ": "neutral",
        "NoviceUnderstandabilityDifficulty : ": "Using screen shots helps with beginners",
        "NoviceUnderstandabilityDifficulty_Idea: ": "disagree",
        "RobotoSupportDifficulty: ": "I need to get used to it",
        "RobotoSupportDifficulty_Idea: ": "disagree",
        "StrategyEndingDifficulty: ": "All strategies are an endless WIP as they are never \"complete\"",
        "StrategyEndingDifficulty_Idea: ": "disagree",
        "TimeConsumptionDifficulty: ": "Yes, but it helps in the long run.",
        "TimeConsumptionDifficulty_Idea: ": "agree",
        "TranslationDifficulty": "I write SOP documents often so I am used to this sort of thing",
        "TranslationDifficultyIdea": "disagree"
      },
      "OtherDifficulties": [],
      "StrategyDefinition": "# This Strategy helps impliment error handling for a web application\\n\\n#Considerations\\n\\nUser input\\n\\nDatabase Errors \\n\\n#Required Knowledge\\n\\nWeb application language\\n\\nDatabase SQL\\n\\n\\n\\nSTRATEGY UserInput()\\n\\n# Goal is to limit free-hand input and use strong typing\\n\\nUse list-boxes as much as possible\\n\\nUse Try-Catch and log errors\\n\\nIF list-boxes cannot be used, validate textboxes\\n\\n    Validate datatypes for all enteries\\n\\n    IF numberic reject alpha\\n\\n    IF date validate dates and reject invalid dates\\n\\n    IF character Check for injection (SQL and script) AND\\n\\n       Check for spcial characters\\n\\n    FOR EACH 'textbox' On Page\\n\\n        Validate\\n\\n\\n\\n    IF Error Found    \\n\\n       RETURN Error \\n\\n    ELSE\\n\\n       Submit Page\\n\\n\\n\\nSTRATEGY Database()\\n\\n# Handle null values, data truncation, invalid datatypes\\n\\nIn Queries check values before performing Substring functions\\n\\nUse stored procedures to limit SQL injection\\n\\nUse IsNull (or NVL) for nulls. \\n\\nCheck for blank values using len(trim(<columnName>)) = 0\\n\\nDO NOT USE \"where 1 = 1\" in queries as this allows for \\n\\nSQL injection\\n\\nUse Try-Catch and log all errors\\n\\n\\n\\n",
      "Task": "ErrorHandlingTask",
      "Time": "Tue Jun 25 2019 15:07:10 GMT-0400 (Eastern Daylight Time), 15:7:10",
      "WorkExperiences": {
        "background": "Full stack web developer. Currently using SQL Server and C#.\n\nwww.linkedin.com/in/thoraya-zedan-0576692",
        "biggestSoftware": "I do not write industrial software",
        "biggestWebApplication": "Application used by the Department of State for all software acquisitions ",
        "softwareDevelopmentExperience": "0",
        "webDevelopmentExperience": "40",
        "webExperiencePeriod": "23 years and 0 months",
        "workExperiencePeriod": "0 years and 0 months"
      }
    },
    "Pilot2": {
      "DevelopmentExperiencePeriod": "2 years and 0 months",
      "Difficulties": ["How to test if my strategy is understandable by other human. It would be nice if there is a tool that check for ambiguity. ", "In general, would like to see a better tool support. writing text without like autocomplete and refactoring tools is a bit boring. I feel if the editor has better support for strategies authoring, I would enjoy writing long strategies.", "Writing comment vs statement was always a challenge. I guess to what extend my strategy should be abstract and explained by comments vs having more explicitly statements with less comments?"],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "1",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n\\n\\n\\n#Required Tools and Environments\\n\\nChrome web browser\\n\\nA JavaScript project\\n\\n#Required Knowledge\\n\\nBasic knowledge of how to use Chrome DevTools\\n\\nBasic knowledge of javaScript\\n\\n\\n\\nSTRATEGY performanceProfiler()\\n\\n# You need to first identify potential line of code\\n\\n# that might cause the performance overhead.\\n\\n# Look at data structures for any memory leaks\\n\\n# Look at loops and the code inside them.\\n\\n# Look at third party APIs calls.\\n\\n\\n\\nHypothesize where in your code the bottleneck are\\n\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n    # Add large numbers to data structures\\n\\n    # Make the loop execute thousands of time\\n\\n    # Call that third-party API hundreds of time\\n\\n    # If  you do so, you do not need to execute your code for long time\\n\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n\\n    Amplify line impact\\n\\n\\n\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\n\\nFor EACH line in 'randomLine'\\n\\n# These lines are your baseline for how should the code work\\n\\n# Make sure that you set similar values to that \\n\\n# you set to 'suspectLine'  \\n\\n    Amplify line impact\\n\\n\\n\\n#Lood your javaScript through the Chrome web browser\\n\\n#Open up the Chrome DevTools and head to the profiler\\n\\n# Run the application and wait until all the code execute\\n\\nRun the web application through google DevTools\\n\\n\\n\\nFor EACH line in 'suspectLines'\\n\\n\\n\\n    #check how the code you suspect is the problem is acting comparing to \\n\\n    #the code that you are pretty sure has nothing to do \\n\\n    #with the performance issue\\n\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n\\n\\n\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n\\n        Fix\\n\\nRETURN nothing\\n\\n",
      "Task": "ProfilerTask",
      "Time": "17:49:10",
      "WebDevelopmentExperience": "3",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot3": {
      "DevelopmentExperiencePeriod": "5 years and 6 months",
      "Difficulties": ["the strategy itself is complex: debugging performance issues requires checking multiple interdependent representations of the program.\n\n", "comparing results makes it hard to describe the strategy or navigate back to a previous step makes it is hard to summarize: If I have to replicate the same strategy with some code change in order to check wether it is faulty or not and the continue the strategy. This means I have to create a main strategy and rewrite the current one to support multiple input and finally use them as a step for the main one.  ", "", "I realized I have to use variables while setting conditionals: several times I wrote the conditional and realize that it depended on something else. How do I know that conditional tests may be need to be reused later thus requiring refactoring the code"],
      "ReactDevelopmentExperience": "4",
      "ReactExperiencePeriod": "2 years and 0 months",
      "SoftwareDevelopmentExperience": "20",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the interaction tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long calls in the stackframe \\n                or Event Log where rendering type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n\\n                \\n\\n\\n\\n     \\n",
      "Task": "ProfilerTask",
      "Time": "16:21:19",
      "WebDevelopmentExperience": "7",
      "WebExperiencePeriod": "5 years and 0 months"
    },
    "Pilot4": {
      "DevelopmentExperiencePeriod": "8 years and 0 months",
      "Difficulties": ["I did not understand Roboto preconditions. Some of them were repetitive, so I was not sure which terms to actually use.", "Pictures tell a thousand words. There should be an easy way to capture screenshots for such profiling tasks instead of writing them down and hoping the person will understand.", "I dont know how much of a good job I did here, because there are already good resources from Google about using its Profiler. What did you expect me to do more?", "What does react (below) have to do with this strategy? I thought it was about Chrome profiler not react.\n", "If the task is about web development, I expect the example to reflect a similar task. Otherwise, it is difficult for me to really understand the level of detail you expect of me. Particularly, profiling is not same as Git merge. Git merge is not that simple (as in example) because you left a lot of steps that could possibly have gone wrong. Point is they both are difficult in their own ways, so I really did not get much by reading Git merge task for me to use it as reference for the Profiling task."],
      "ReactDevelopmentExperience": "0",
      "ReactExperiencePeriod": "0 years and 0 months",
      "SoftwareDevelopmentExperience": "10",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\n\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n\\n",
      "Task": "ProfilerTask",
      "Time": "9:38:2",
      "WebDevelopmentExperience": "4",
      "WebExperiencePeriod": "8 years and 0 months"
    },
    "Pilot5": {
      "Difficulties": ["line 14: I wanted to make a recursive call to the strategy, not sure how I could do that, instead wrote it as a statement. \n", "Do While is not in ROBOTO, I decided to follow ROBOTO. ", "It is hard to draw a line between when to define a Variable, or when to informally mention it in Statements and let the user imply it in the future steps."],
      "ImplementedReactApplications": "2",
      "ImplementedSoftware": "15",
      "ImplementedWebApplications": "5",
      "ReactExperiencePeriod": "1 years and 9 months",
      "SoftwareDevelopmentExperiencePeriod": "0 years and 0 months",
      "StrategyDefinition": "# This strategy helps in using Chrome Profiler to improve your web app\\n# Required Tools and Environments\\nInstalling Chrome browser\\nRunning your App in Chrome\\nOpening the developer window, Performance Tab\\n# Required Knowledge\\nKnowledge in JavaScript to edit your App\\nSTRATEGY ChromeProfiler()\\n    # To avoid having tons of data to process, record and process data in small batches\\n    Start recording in the profiler before event that is running slow\\n    Perform the actions on the App\\n    Stop recording\\n    IF the delay is not observed in the recorded frames\\n        Restart the strategy with a wider time frame for recording\\n        RETURN nothing\\n    # Search for slow frames in the top window of the profiler       \\n    SET 'slowFrames' TO slowly loaded slowFrames\\n    FOR EACH 'frame' IN 'slowFrames'\\n        # frame range is set in the profiler\\n        set the frame range to the start and end of the CPU usage mountain containing the 'frame'\\n        # The Flame chart shows the stack of actions and events, by hovering over elements in the stack, the running time will be displayed\\n        SET 'suspiciousEvents' TO events and actions that take a lot of time in the Flame chart\\n        FOR EACH 'event' IN 'suspiciousEvents'\\n            Use the data in the Event Log and Bottom-Up windows in the profiler to find the relevant pieces of code in your App\\n            check the parts of the code of your App that are responsible in triggering 'event'\\n            IF you changed anything and guessing it has improved the performance of the App\\n                DO ChromeProfiler()\\n                RETURN nothing\\n",
      "Task": "ProfilerTask",
      "Time": "15:45:40",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot7": {
      "ConcentrationDifficulty": "I just tried to think of what I would do when I encounter CSS bugs (I am personally not a fan of css) so I try to do out-of-box css whenever possible.",
      "ConcentrationDifficulty_Idea": "agree",
      "Difficulties": ["I've learned that browsing through StackOverflow is a key part of debugging any code but it was challenging to write concrete strategies for what developers should be looking for in StackOverflow posts."],
      "GuidelinesSupportDifficulty": "Yeah, the tutorial at the beginning comparing good strategy writing and bad strategy writing was useful",
      "GuidelinesSupportDifficulty_Idea": "stronglyAgree",
      "ImplementedSoftware": "2",
      "ImplementedWebApplications": "5",
      "NoviceUnderstandabilityDifficulty": "It is not that hard to describe the concrete steps they should be taking -- but it is more challenging to list out the questions that they should be asking when they are reading their code",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "Yeah, it was useful -- but I didn't actively try to follow the syntax. I only mimicked it.",
      "RobotoSupportDifficulty_Idea": "agree",
      "SoftwareDevelopmentExperiencePeriod": "1 years and 0 months",
      "StrategyDefinition": "# This strategy helps you identify...\\n# Required tools and environment\\nHave Node.js installed\\nHave live-server installed\\nHave at least 1 html with file with along with some CSS\\n\\n# Required knowledge\\nKnowledge of how to work with the terminal and run commands\\nReading HTML code\\nReading css and adding css to HTML code\\n\\nSTRATEGY DebugCSS()\\n    Open the terminal and navigate to your project directory where the html files are\\n    Run `live-server` in the terminal\\n    IF the command runs and opens a browser tab\\n        Once you're on the tab, right click\\n        From the menu select `inspect`. It opens Chrome developer tools\\n        Make sure you are on the elements tab\\n        Scroll through the html code and click on the element with faulty behavior\\n        The bottom half of developer tools now focuses on this element\\n        On the styles tab, you should see information on what styles were applied and what weren't.\\n        Identify what styles are overriding the intended CSS\\n        SET `conflictingCSS TO css classes/ids with conflicts \\n        FOR EACH conflict IN conflictingCSS\\n            DO attemptFix(conflict)\\n    IF the command produces errors\\n        Revist the Required Tools and Environment section of this STRATEGY\\n        Make sure you've installed live-server\\n    RETURN Nothing\\n\\n\\nSTRATEGY attemptFix()\\n    Open the html and css code in your favorite code editor\\n    # id styles take priority over class styles\\n    IF your CSS does not obey the correct css priority hierarchy\\n        Redefine the css\\n    IF css hierarchy looks right\\n        Do a stackoverflow search describing the problem\\n        Pick the post that matches your situation\\n    IF browsing doesn't work\\n        Look up alternative ways of acheiving the same effect\\n    RETURN Nothing\\n    \\n",
      "StrategyEndingDifficulty": "I could enumerate all the possible thinks for certain cases -- looking through StackOverflow for example. I had to leave that step pretty generic which is probably unhelpful.",
      "StrategyEndingDifficulty_Idea": "stronglyAgree",
      "Task": "CssDebuggingTask",
      "Time": "17:30:31",
      "TimeConsumptionDifficulty": "I think it depends on the problem that you're trying to write a strategy for",
      "TimeConsumptionDifficulty_Idea": "neutral",
      "TranslationDifficulty": "Since I wasn't working with a concrete problem it was really challenging to describe a strategy that should in theory help with any CSS problem.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot8": {
      "ConcentrationDifficulty": "I had to think back to some common use cases for error handling, and when I wrote it I was primarily thinking about forms and authentication. I tried generalizing by specifying if the component is \"acting irregularly\", but that is a bit broad of a statement. ",
      "ConcentrationDifficulty_Idea": "stronglyAgree",
      "Difficulties": [],
      "GuidelinesSupportDifficulty": "If it becomes standard and less generalizable and can cover all use cases, I think it can definitely help express strategies. ",
      "GuidelinesSupportDifficulty_Idea": "agree",
      "ImplementedSoftware": "18",
      "ImplementedWebApplications": "18",
      "NoviceUnderstandabilityDifficulty": "I think if you make it granular enough it can be understandable for novice developers but it was difficult to specify the base knowledge of the user for something as general as error handling. Errors often occur with things that are out of the developer's domain knowledge.",
      "NoviceUnderstandabilityDifficulty_Idea": "agree",
      "RobotoSupportDifficulty": "I was not given a reference for how to set variables to the output of a function, so I did \"SET X to DO functionName()\" instead. I think there could be better ways to express general things. I did \"SET 'consoleError' to the error\" (error being the error I had the developer locate) for example, which felt like it didn't follow the syntax well. ",
      "RobotoSupportDifficulty_Idea": "disagree",
      "SoftwareDevelopmentExperiencePeriod": "2 years and 0 months",
      "StrategyDefinition": "# This strategy helps you verify your error handling logic in\\n# front-end web development\\n\\n# Preferred Tools and Environments\\nAn integrated development environment with error checking\\nA component that crashes occasionally for an unknown reason or acts irregularly\\n\\n# Required/Preferred knowledge\\nIntroductory computer science knowledge (CSE 142 @ UW)\\nBasic JavaScript knowledge\\nTry-catch knowledge preferred\\nComponent separation knowledge\\nDebugger/browser console knowledge\\n\\nSTRATEGY ErrorHandle()\\n    SET a component-wide global 'errorMessage' to be empty\\n    # Find the component and function in that component that acts irregularly\\n    IF the component is acting irregularly or crashing\\n        SET 'irregularComponent' to the component\\n        Locate any error messages in the browser's developer console and find the line the error occurs within the 'irregularComponent'\\n        SET 'irregularComponentFunction' to the function generating this error\\n        SET 'consoleError' to the error\\n    IF 'consoleError' is not anything\\n        RETURN nothing\\n    ELSE\\n        # Identifying the reason the line is causing issues can be\\n        # difficult. It can be a variety of different reasons for your\\n        # specific use case. \\n        SET 'reasonsCrashing' to the reasons the line inside 'irregularComponentFunction' is causing issues by reading the 'consoleError' over\\n        DO createErrorHandle('reasonCrashing') \\n        RETURN nothing\\n\\nSTRATEGY createErrorHandle('reasonCrashing')\\n    FOR EACH 'reason' in 'reasonCrashing'\\n        # Create an error handling case\\n        # It is okay that some errors will take priority\\n        createErrorHandleCase('reason')\\n    RETURN nothing\\n\\nSTRATEGY createErrorHandleCase('reason')\\n    # Most of the time, the reason why it is crashing relates to the\\n    # user's input, or something you want to share with the user.\\n    IF 'reason' shows implementation detail\\n        IF 'reason' was caused by the user's input\\n            SET 'allErrors' global to be a reason relating to the user's input\\n        IF 'reason' was caused internally\\n            SET 'allErrors' to a general \"Something went wrong\" message \\n    ELSE \\n        SET 'allErrors' global to the reason why it is crashing\\n    RETURN nothing\\n        \\n ",
      "StrategyEndingDifficulty": "For something like error handling, you cannot say for sure when all the errors are fixed. ",
      "StrategyEndingDifficulty_Idea": "agree",
      "Task": "ErrorHandlingTask",
      "Time": "12:52:19",
      "TimeConsumptionDifficulty": "It required a lot of thought. I think it is definitely a useful use of my time, and if it were my job to do this, I would have some fun with it but only for brief periods of time. It is sorta like programming. It definitely is time consuming. ",
      "TimeConsumptionDifficulty_Idea": "agree",
      "TranslationDifficulty": "I found it difficult to express what was going through my mind. I was thinking about React because it was a component based framework/library, but I tried to generalize this to anything that uses some sort of component based framework/library. I have been doing error handling for such a long time that it's second nature and difficult to generalize.",
      "TranslationDifficultyIdea": "stronglyAgree",
      "WebExperiencePeriod": "2 years and 0 months"
    },
    "Pilot9": {
      "CommonDifficulties": ["TranslationDifficultyIdea: neutral", "TranslationDifficulty: Some strategies are much easier to explain with a short video or demo, especially when demoing a specific tool. ", "NoviceUnderstandabilityDifficulty_Idea: agree", "NoviceUnderstandabilityDifficulty : I'm sure that my strategy used knowledge that isn't universally shared (and might be considered an expert blind spot), but, not having a specific instance of this to point to, I'm hopeful that my strategy would be understandable.", "ConcentrationDifficulty_Idea: neutral", "ConcentrationDifficulty: I'm confident it could've taken more concentration, effort and energy! It's challenging to anticipate what might go wrong when a novice tries to follow my strategy. ", "TimeConsumptionDifficulty_Idea: disagree", "TimeConsumptionDifficulty: It's worthwhile, but I feel that it might be better to provide strategies on-demand, rather than in advance, though this would require a repository of strategies to exist. I think writing a strategy without much context on what the learner needs is challenging.", "StrategyEndingDifficulty_Idea: stronglyAgree", "StrategyEndingDifficulty: A syntactic construct for finishing might be nice here -- it's awkward to return an action \"Done\"", "RobotoSupportDifficulty_Idea: neutral", "RobotoSupportDifficulty: Preconditions for using a strategy are a great idea, although it's extremely tempting to just write \"basic understanding of x\" without specifics of what a basic understanding means. I feel that if a language includes an IF construct, it should also have ELSE and ELSE IF constructs. Programmatic articulation is a good idea, but might be challenging for novices to understand. I've got some concern that some strategies might not express themselves well programmatically, like \"try this for a while, if you don't get anywhere in several minutes, try this\" or \"look at these three examples and determine which one is most intuitive to you\"", "GuidelinesSupportDifficulty_Idea: agree", "GuidelinesSupportDifficulty: It's definitely a good way to constrain strategy expression to a format that should be easier to understand than a paragraph of text. Again, I worry that novices, especially those without a good grasp of computation, might struggle with the programmatic format. "],
      "OtherDifficulties": ["I haven't actually done CSS debugging, I had to do some research to understand the typical debugging approach.", "It's hard to use text to describe where buttons are (line 11)", "There isn't a good way to express \"if you got here, I don't know how to help you anymore, go find a different strategy\" (line 23)", "It's hard to articulate when the strategy was successful or when the strategy failed -- I feel that it should be based in return conditions (line 18, 22, 23)", "Articulating \"fix the bug\" is hard, this definitely feels like a big expert blind spot."],
      "StrategyDefinition": "# This strategy helps in debugging CSS\\n#Required Tools and Environments\\nFirefox web browser\\n#Required Knowledge\\nBasic understanding of CSS\\nUnderstanding of the CSS Cascade (https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade)\\nSTRATEGY DebugCss()\\n    Open file with bug in Firefox\\n    Right-click on the page and select \"Inspect Element\"\\n    Move to the portion of the page with the bug\\n    To the left of the \"Inspector\" tab, click the element picker button\\n    Click the page element that isn't displaying properly\\n    # The center column of the Inspector shows all styles associated with the element, in order of precedence\\n    Find the style element that should be shown\\n    IF the desired style is crossed out\\n        Find CSS style that overwrote it by scrolling up\\n        Change the desired style to have higher precedence or the shown style to have lower precedence, or change the inheritance structure\\n        return done\\n    IF the desired style isn't shown\\n        Add the desired style to the project's CSS sheet\\n        DebugCss()\\n        return done\\n    return nothing",
      "Task": "CssDebuggingTask",
      "Time": "Mon Jun 01 2019 14:26:06 GMT-0400 (Eastern Daylight Time), 14:26:616:42:32",
      "WorkExperiences": ["workExperiencePeriod: 6 years and 0 months", "softwareDevelopmentExperience: 12", "biggestSoftware: An operating system with 20+ system calls (including fork(), exec(), exit(), wait()), on-demand paging, ZFOD, and a user-space threading library.", "webExperiencePeriod: 0 years and 2 months", "webDevelopmentExperience: 1", "biggestWebApplication: [object HTMLTextAreaElement]"]
    },
    "Test1": {
      "CommonDifficulties": {
        "ConcentrationDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "ConcentrationDifficulty_Idea: ": "stronglyAgree",
        "GuidelinesSupportDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "GuidelinesSupportDifficulty_Idea: ": "stronglyAgree",
        "NoviceUnderstandabilityDifficulty : ": "It's hard to translate thoughts and strategies into words.",
        "NoviceUnderstandabilityDifficulty_Idea: ": "stronglyAgree",
        "RobotoSupportDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "RobotoSupportDifficulty_Idea: ": "stronglyAgree",
        "StrategyEndingDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "StrategyEndingDifficulty_Idea: ": "stronglyAgree",
        "TimeConsumptionDifficulty: ": "It's hard to translate thoughts and strategies into words.",
        "TimeConsumptionDifficulty_Idea: ": "stronglyAgree",
        "TranslationDifficulty": "It's hard to translate thoughts and strategies into words.",
        "TranslationDifficultyIdea": "stronglyAgree"
      },
      "OtherDifficulties": ["It's hard to translate thoughts and strategies into words."],
      "StrategyDefinition": "background# This Strategy helps you merge 2 branches in githup and resolve conflicts\\n#Required Tools and Environments\\nInstalling git\\nGithub account\\nOngoing project which is progressing in at least 2 branches\\nGit repository that is not associated with Github\\n#Required Knowledge\\nBasic git command knowledge\\nKnowledge of how to work with terminal and run commands\\nSTRATEGY GitMerge()\\n# Open the teminal, and use cd(change directory) command to move to the local git project directory\\nOpen the terminal and navigate to your git project directory\\nIF you are not in the master branch\\n# R",
      "Task": "ProfilerTask",
      "Time": "Mon Jun 17 2019 11:19:10 GMT-0400 (Eastern Daylight Time), 11:19:10",
      "WorkExperiences": {
        "background": "ssdasf",
        "biggestSoftware": "5",
        "biggestWebApplication": "5",
        "softwareDevelopmentExperience": "5",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "5 years and 5 months",
        "workExperiencePeriod": "5 years and 5 months"
      }
    },
    "pilot1": {
      "Difficulties": ["Defining new keyword like WHILE, LIST, SORT,\nI was not sure they are supported in the Rboto or not. It was better if  somehow it accepts or rejects keywords", "I had exprience in other profilers, but i was not familiar with React profiler\nbeacuse of that i had difficulty for writing strategy"],
      "JavaScriptExperience": "1",
      "ReactExperience": "1",
      "SoftwareDevelopmentExperience": "7",
      "StrategyDefinition": "# strategy for effectively profiling any React application.\\n\\n# Required tools and environment\\n install React 16.5 or newer\\n add DevTools profiler plugin\\n# Required knowledge\\n Basic knowledge of React\\n read profiling tool tutorials\\n\\n STRATEGY profiling ()\\n    #open the DevTools\\n    open the DevTools in a browser\\n   WHILE you think the performance is fine\\n        # record the profiler\\n        start recording profiler\\n        # first landing page of the application\\n        open the first page of the application\\n        # play with most of components of the application for logging\\n        click or open on most of components of the application in order to be recorded in profiling\\n        # stop profiler\\n        in DevTools click stop button\\n        # watch Component chart\\n        watch component chart for finding which componets consume more resource like time or memory\\n        SET 'ComponentNeedProfiling' to the list of components that you watch in the previous step and they consume most of the resource\\n        FOR EACH 'component' IN 'ComponentNeedProfiling' \\n            run flame chart\\n            ADD 'logsOfFlames' store a log from the output of flame chart for each component\\n        SORT 'logsOfFlames' sort based on the time consumption or resource, it should be descening\\n        FIX  watch the flame report and try to fix the first component in the sorted list\\n    ",
      "Time": "11:53:51",
      "WebExperience": "7"
    }
  },
  "TESTERS": {
    "T1": {
      "ParticipantId": "T1",
      "Strategy1": {
        "ChallengingToWork": "\nLine # 17: \"Change the desired style to have higher precedence or the shown style to have lower precedence, or change the inheritance structure\" has 2 branches of action but it is not specified when which condition should be selected and perform. \nStatement \"return done\" is used to terminate the strategy, but it seems not telling the user if they finished successfully or cannot find the bug. ",
        "Clarity": "Its clear, but some sentences are a bit confusing at the first step. For instance \" Move to the portion of the page with the bug\" is a bit confusing what exactly it asked me to do. Maybe using clear keywords helps reducing ambiguity. For instance it can be transcribed as \"Navigate to the elements with defective appearance\"",
        "Missing": "The strategy just works for one defect at a time. For the pages that have more than one defective style feature, the user should rerun the strategy from the beginning. Maybe having a loop to run the strategy on all the defective elements in a list might be helpful",
        "OtherChallenges": "Some strategy statements are very general and have many substeps inside them. Maybe having break the big step to small steps may help easier following the strategy without missing any point. \nThe strategy needs a better approach to tell the user if they finished successfully or they should redo the strategy. \nStrategy is not very comprehensive and is just for one defect fixing at a time",
        "StrategyId": "Pilot9",
        "requiredInfo": "Having a method to keep variables and list."
      },
      "Strategy2": {
        "ChallengingToWork": "There are many variables in the strategy that were confusing and hard to follow. For example defining 'irregularComponent' seems redundant.\n",
        "Clarity": "Not in the first glance. Initially I assumed the task is to fix the bugs. So I was looking for ‘fixing’ statements. Aside that, Still I am not sure why in Strategy createErrorHandleCase the variable allErrors' is getting values, specially when the strategy is returning nothing at the end. \n",
        "Missing": "The type of output from each strategy. It was not clear what is the outcome of each strategy/sub-strategy. Adding that information on top of the strategy as a comment will help.\n",
        "OtherChallenges": "None.",
        "RequiredInfo": "I got lost in the strategy mainly because it was hard to distinguish the comment and the statement specially that the natural language is also used in the statements. Using a different coloring or font helps. The same argument holds for strategy calls and variable names.",
        "StrategyId": "Pilot8"
      },
      "Task1": "CssDebuggingTask",
      "Task2": "ErrorHandlingTask",
      "Time": "15:18:22",
      "WorkExperiences": {
        "biggestSoftware": "Bank transaction management application. The app includes querying form database, processing, applying calculations and visualizing data.",
        "biggestWebApplication": "Bank transaction management web base application. The app includes querying form database, processing, applying calculations and visualizing data.",
        "softwareDevelopmentExperience": "8",
        "webDevelopmentExperience": "3",
        "webExperiencePeriod": "2 years and 0 months",
        "workExperiencePeriod": "7 years and 0 months"
      }
    },
    "T2": {
      "ParticipantId": "T2",
      "Strategy1": {
        "ChallengingToWork": "slhfdnassf",
        "Clarity": " you think the strategy you used is clear? If not, please specify what was confusing or ambiguous.\n\n",
        "Missing": "In as much detail as you can remember, please tell us about each of the challenges you experienced as you used this strategy. Please try to share with us what you found to be most difficult in understanding and using the strategy. For each difficulty, be as specific as possible in describing what you wanted to do and what made this hard for you to accomplish.\n\n",
        "OtherChallenges": " you think the strategy ys of challenges you faced which is not asked above, if any.\n\n",
        "StrategyId": "Pilot9",
        "requiredInfo": "dditional information, details, or features would make it easier for you to follow this strategy?"
      },
      "Strategy2": {
        "ChallengingToWork": "otherChallenges",
        "Clarity": "its not cleare at all",
        "Missing": "In as much detail as you can remember, please tell us about each of the challenges you experienced as you used this strategy. Please try to share with us what you found to be most difficult in understanding and using the strategy. For each difficulty, be as specific as possible in describing what you wanted to do and what made this hard for you to accomplish.\n\n",
        "OtherChallenges": "its context relevant",
        "RequiredInfo": "Additional",
        "StrategyId": "Pilot3"
      },
      "Task1": "CssDebuggingTask",
      "Task2": "ProfilerTask",
      "Time": "23:4:2",
      "WorkExperiences": {
        "biggestSoftware": "5",
        "biggestWebApplication": "5",
        "softwareDevelopmentExperience": "5",
        "webDevelopmentExperience": "5",
        "webExperiencePeriod": "5 years and 5 months",
        "workExperiencePeriod": "5 years and 5 months"
      }
    },
    "T4": {},
    "Tester1": {
      "ParticipantId": "Tester1",
      "Strategy1": {
        "ChallengingToWork": "Line #2 just says you may point to the component. Instead, it could be specific to click ctrl+shift+C to inspect the highlighted element. Doing this would show the respective element in the styles tab where we can quickly make changes. ",
        "Clarity": "I felt it was clear because I am very much familiar with using this mechanism in the browser. Steps are pretty clear but adding more specifications like I mentioned in my first question’s comment would help.",
        "Missing": "Not sure if I am right. Here is my observation. Some instructions on how to look for particular element to inspect was missing. I thought that would be clear if you said in Point 2 that, use the arrow in the Inspect element window to select particular element.",
        "OtherChallenges": "NA",
        "RequiredInfo": "I think it has everything covered. Pre-conditions, Post-conditions(if necessary) and notes of what a keyword means. So it looks good. ",
        "StrategyId": "Auth3"
      },
      "Strategy2": {
        "ChallengingToWork": "The steps to be followed were precise and easy to follow and I did not have any difficulty getting through the process. I liked the Line 22 how it explains what we are actually looking for. The preconditions part were apt to move forward with the task. ",
        "Clarity": "Very much Clear",
        "Missing": "Nothing. The details were pretty straight forward. I had never used Performance profile when I inspect element but was clear when I followed the steps. ",
        "OtherChallenges": "I did not know how to use Performance profiler so I had difficulties figuring out the current frame state, network requests, animations but when I followed it twice, I was able to get to it. ",
        "RequiredInfo": "Nothing. I think it provided with all the details needed to look at the performance. ",
        "StrategyId": "Auth5"
      },
      "Task1": "CssDebuggingTask",
      "Task2": "ProfilerTask",
      "Time": "13:11:56",
      "WorkExperiences": {
        "background": "I have worked for about 4 years in the industry in technologies like ColdFusion, HTML5, CSS, Bootstrap, JQuery, JavaScript, Ajax. In my Master's, I am working on creating web applications using Node.js, Java, Bootstrap, HTML5. \n\nGit Hub: https://github.com/Bhargavicm ",
        "biggestSoftware": "https://www.healthcaresource.com/pm10ncu_m/index.cfm?fuseaction=search.categoryList&template=dsp_job_categories.cfm\n\nAbove is the demo website. I was part of building the majority of the features for the Job Portal for Hospitals across the US. I worked from India to construct a website that was mobile-friendly using Bootstrap, CSS, and JavaScript.  ",
        "biggestWebApplication": "There are two biggest web applications that I worked on\n1) Job Portal for the Hospital staffing.\n2) VMWare e-learning and Certifications module. \n\nBoth were built using ColdFusion 5. I helped them to migrate from ColdFusion 5 to ColdFusion 2016 along with a Mobile solution to web applications with advanced features. ",
        "softwareDevelopmentExperience": "3",
        "webDevelopmentExperience": "3",
        "webExperiencePeriod": "4 years and 0 months",
        "workExperiencePeriod": "4 years and 0 months"
      }
    },
    "Tester2": {
      "ParticipantId": "Tester2",
      "Strategy1": {
        "ChallengingToWork": "No, actually this was very straight forward to work with.",
        "Clarity": "Yes, it was clear. ",
        "Missing": "The following is missing 1. Make changes and see if they are appropriate. 2. Take those changes and make it back in the IDE",
        "OtherChallenges": "None",
        "RequiredInfo": "No nothing required.",
        "StrategyId": "Auth3"
      },
      "Strategy2": {
        "ChallengingToWork": "Hover over the NET section to view the CSS component utilized The above line was too confusing for me to understand and also difficult to find.",
        "Clarity": "Yes, it was a little confusing for me. But many sections were clear. The section especially finding the CSS component. I used chrome but still I was not able to find the NET section to find the CSS component. It took me a long time to find the component. Overall I meant that it was a little difficult to find the NET section while following the instructions.",
        "Missing": "The optimization is missing from this. The optimize button had no effect when I tried clicking it and I failed to understand the functionality.I was clicking on the optimize button to see what effect it has but I couldn't find any difference when I clicked it.  When You click on the screen on any button, you should get the result. I was trying to see what optimize button is doing But i couldn't see any effect after clicking the button. If the Button has no effect then the Button should not be there on the screen. ",
        "OtherChallenges": "N/A",
        "RequiredInfo": "Please try to implement as many steps as you can in the program.",
        "StrategyId": "Auth5"
      },
      "Task1": "CssDebuggingTask",
      "Task2": "ProfilerTask",
      "Time": "11:11:1",
      "WorkExperiences": {
        "background": "I am working as a web developer for the last 3 years and have developed more than 10 web applications and supporting 20+ already developed web applications.",
        "biggestSoftware": "It is about the loan application for my client.",
        "biggestWebApplication": "loan application for my client",
        "softwareDevelopmentExperience": "10",
        "webDevelopmentExperience": "4",
        "webExperiencePeriod": "3 years and 0 months",
        "workExperiencePeriod": "3 years and 0 months"
      }
    },
    "Tester5": {
      "ParticipantId": "Tester5",
      "Strategy1": {
        "ChallengingToWork": "# This Strategy helps impliment error handling for a web application --- But also some stuff about SQLi and databases?\n#Considerations\nUser input\nDatabase Errors \n#Required Knowledge\nWeb application language\nDatabase SQL\nSTRATEGY UserInput()\n# Goal is to limit free-hand input and use strong typing\nUse list-boxes as much as possible   --- What's a list-box?\nUse Try-Catch and log errors\nIF list-boxes cannot be used, validate textboxes\n    Validate datatypes for all enteries\n    IF numberic reject alpha  --- It seems like it would be ok here to specify \"alphabetical characters\". Alpha can also mean a specific symbol, if I'm being nitpicky.\n    IF date validate dates and reject invalid dates\n    IF character Check for injection (SQL and script) AND   --- How? Probably by parameterizing queries / stored procedures.\n       Check for spcial characters   --- Like what? \n    FOR EACH 'textbox' On Page\n        Validate\n    IF Error Found    \n       RETURN Error --- To user? Where?\n    ELSE\n       Submit Page\nSTRATEGY Database()\n# Handle null values, data truncation, invalid datatypes\nIn Queries check values before performing Substring functions   --- Check what about the values? Too vague to be helpful for me.\nUse stored procedures to limit SQL injection --- Don't just limit SQLi. Prevent it entirely using prepared statements or parameterized queries, which actually can prevent it. Stored procedures do not prevent SQLi by default.\nUse IsNull (or NVL) for nulls.  --- Why? In what situation? Does this mean put a string \"IsNull\" in values that will be null in the database instead of leaving them empty?\nCheck for blank values using len(trim(<columnName>)) = 0\nDO NOT USE \"where 1 = 1\" in queries as this allows for --- Factually incorrect, see below. \nSQL injection\nUse Try-Catch and log all errors --- Where? To console? To an internal error log? To somewhere only developers can see? No consideration for what errors to be logged to the user. \n",
        "Clarity": "\"Use list-boxes as much as possible\" -- I don't know what a list box is.\nThis lacks explanation of why the things in the strategy would be done.",
        "Missing": "More detail on what to do, ex. \"check\" what? Security depth of knowledge is also missing, especially around SQL injection.",
        "OtherChallenges": "It is incorrect to state \"DO NOT USE \"where 1 = 1\" in queries as this allows for SQL injection\". This DOES NOT allow for SQL injection inherently. \"1=1\" is a common attack string when testing for SQL injection, but including that as part of a query does not make you any more vulnerable if you have otherwise parameterized your query. source: I am a security engineer...",
        "RequiredInfo": "See above.",
        "StrategyId": "Auth9"
      },
      "Strategy2": {
        "ChallengingToWork": "I wasn't able to change the background color to a random color using this strategy, since it's CSS specific and I think that would need to happen in the JavaScript to set the CSS. However, this can help narrow down which style piece needs to be adjusted to set a color like that.\n\nI usually inspect elements by clicking on them and then opening the editor. I can't easily right click on the quickly moving boxes-- I need them to be moving slower to click on. Thus, I would not have been able to resolve this if I hadn't gone to look at the source HTML of the page and select an individual box.",
        "Clarity": "I think it's fine in clarity. Needs a spell check though.",
        "Missing": "See below.",
        "OtherChallenges": "n/a",
        "RequiredInfo": "This strategy is primarily applicable with Google Chrome. There should be a note on it stating the specific capabilities GC has that allow this strategy to be used. Be explicit about browser capabilities so that it saves people time.\n\n\"element.Style\" -- this is just setting the style property. It might be useful to say how to do that in a bit more detail, or to say something like style property instead of element.Style.",
        "StrategyId": "Auth13"
      },
      "Task1": "ErrorHandlingTask",
      "Task2": "CssDebuggingTask",
      "Time": "21:19:2",
      "WorkExperiences": {
        "background": "Backend developer + new security engineer. Teaching assistant in R class 3x. Teaching assistant in Python data science class 2x. Teaching assistant in Django Python backend course 1x. Informatics student at University of Washington. ",
        "biggestSoftware": "n/a",
        "biggestWebApplication": "Reviewing application using Firebase and React. Create, edit, delete reviews. User login / logout / signup. ",
        "softwareDevelopmentExperience": "0",
        "webDevelopmentExperience": "6",
        "webExperiencePeriod": "1 years and 6 months",
        "workExperiencePeriod": "0 years and 0 months"
      }
    },
    "Tester6": {
      "ParticipantId": "Tester6",
      "Strategy1": {
        "ChallengingToWork": "line 14 'numberic' --> 'numeric'?",
        "Clarity": "yes it was clear.",
        "Missing": "if statements in the Database() section. more imperative statements instead of functional statements",
        "OtherChallenges": "n/a",
        "RequiredInfo": "color coding headers . more if statements/ imperative statements",
        "StrategyId": "Auth9"
      },
      "Strategy2": {
        "ChallengingToWork": "More complex than previous task. ",
        "Clarity": "yes it is clear. ",
        "Missing": "color coding or some sort of clearer directions. ",
        "OtherChallenges": "no other challenges",
        "RequiredInfo": "more elaboration in the STRATEGY ApplyCssToElement(element, style) section",
        "StrategyId": "Auth13"
      },
      "Task1": "ErrorHandlingTask",
      "Task2": "CssDebuggingTask",
      "Time": "12:54:27",
      "WorkExperiences": {
        "background": "https://github.com/mkMcMahon\n\nwww.matthewkmcmahon.com",
        "biggestSoftware": "software to test and evaluate different market conditions. needed complex front and back end. multiple types of front end users so many interfaces. ",
        "biggestWebApplication": "booking and scheduling app for private company",
        "softwareDevelopmentExperience": "4",
        "webDevelopmentExperience": "2",
        "webExperiencePeriod": "5 years and 0 months",
        "workExperiencePeriod": "7 years and 0 months"
      }
    }
  },
  "REVISIONS": {
    "Auth3": {
      "ParticipantId": "Auth3",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I was for the most part of my work using Firefox browser so I was explaining at a high level rather than getting into details of each step.",
          "HardAddressing": "An image with a sample webpage would be more beneficial to explain better.\nI use snipping tool a lot to capture something like else for better explanation.",
          "MakeSense": "Yes.When I say \"point\" to what I meant is ... use the small icon on the  top left  of the browser debugger to pick an element of the webpage.The small pointer icon to the left of \"inspector\" can be used to inspect any part of the webpage.Also I agree that this can be done using ctrl+shift+C.\n"
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "N/A",
          "MakeSense": "100% agree.Should have explained better."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "CSS Debugging has greatly improved with the tons of features provided by the browsers itself.\nSince ALL of the CSS issues except for importing the right CSS files can be debugged and resolved using Browser tools there is not much to write in terms of strategy except for highlighting different types of CSS issues like complex CSS issues vs simple CSS issues and then use concrete examples of how to resolve each one."
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "My guess is Tester2 is familiar with the debugging process so tester2 was able to understand what I mentioned."
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "Yes but I was assuming that at this point the developer of the code is aware of the fact that the new changes should be replaced with the buggy code in the IDE and push the code to GIT after successful testing."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "13:36:31"
    },
    "Auth5": {
      "ParticipantId": "Auth5",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes shows understanding"
        },
        "Missing": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes it shows understanding"
        },
        "OtherChallenges": {
          "AspectForgotten": "I could have added more pre-reqs, possibly.  Hard to consider ALL backgrounds of every developer",
          "HardAddressing": "Specifying all the pre-reqs can sometimes be hard to predict. ",
          "MakeSense": "Yes, shows the tester had to familiarize with the profiler "
        },
        "RequiredInfo": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes, shows understanding"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "I did not consider all the different sections the user would be looking for.  There are a lot of sections in the profile so it could be challenging and time consuming to consider ever deviation. ",
          "HardAddressing": "Nothing.  It can be addressed",
          "MakeSense": "Yes.  Shows the user had a hard time finding the NET section"
        },
        "Missing": {
          "AspectForgotten": "I'm not sure since I do not understand where the tester deviated from the strategy",
          "HardAddressing": "I do not know what button the tester is referring to.  Screen shots would be helpful",
          "MakeSense": "No.  I don't understand what button the tester is referring to.  The strategy does not mention an optimize button"
        },
        "OtherChallenges": {
          "AspectForgotten": "NA",
          "HardAddressing": "NA",
          "MakeSense": "NA"
        },
        "RequiredInfo": {
          "AspectForgotten": "Perhaps I forgot to include something related to an optimize button.  I'm not sure about the optimize button or where I am supposed to use it. ",
          "HardAddressing": "I'm not sure what additional steps the tester feels he/she needs for this specific strategy. ",
          "MakeSense": "Yes. The tester is asking for more steps"
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "15:8:50"
    },
    "Pilot2": {
      "Difficulties": ["Since this is just plain English, why not integrate a grammar checker :)\nbetter tools to author these stratgies "],
      "ParticipationId": "Pilot2",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n#Required Tools and Environments\\nChrome web browser\\nA JavaScript project\\n#Required Knowledge\\nBasic knowledge of how to use Chrome DevTools\\nBasic knowledge of javaScript\\nSTRATEGY performanceProfiler()\\n    # You need to first identify potential line of code\\n    # that might cause the performance overhead.\\n    # Look at data structures for any memory leaks\\n    # Look at loops and the code inside them.\\n    # Look at third party APIs calls.\\nHypothesize where in your code the bottleneck are\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\nFor EACH line in 'suspectLines'\\n    # Add large numbers to data structures\\n    # Make the loop execute thousands of time\\n    # Call that third-party API hundreds of time\\n    # If  you do so, you do not need to execute your code for long time\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n    Amplify line impact\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\nFor EACH line in 'randomLine'\\n# These lines are your baseline for how should the code work\\n# Make sure that you set similar values to that \\n# you set to 'suspectLine'  \\n    Amplify line impact\\n#Lood your javaScript through the Chrome web browser\\n#Open up the Chrome DevTools and head to the profiler\\n# Run the application and wait until all the code execute\\nRun the web application through google DevTools\\nFor EACH line in 'suspectLines'\\n    #check how the code you suspect is the problem is acting comparing to \\n    #the code that you are pretty sure has nothing to do \\n    #with the performance issue\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n        Fix\\nRETURN nothing\\n",
      "Time": "18:5:13"
    },
    "Pilot3": {
      "Difficulties": ["", "none", "none", "=)"],
      "ParticipationId": "Pilot3",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    cleare previous recording and start recording performance\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       stop recording performance\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the Main thread tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long local calls in the stackframe \\n                or Event Log where rendering or function call type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n                \\n     \\n",
      "Time": "16:42:16"
    },
    "Pilot4": {
      "Difficulties": ["Depending on example used to devise the strategy, the description may be different. First I was using my own example, which had problems in the top level of the call stack. But, your example has errors deep down the stack, which added more things to look for.", "Lack of pictures. The help page you give is much better than what I wrote."],
      "ParticipationId": "Pilot4",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        IF description is not helpful\\n            # Use the child events to drill deep into the stack\\n            Click on the red events below the current event. \\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n",
      "Time": "9:52:53"
    },
    "Pilot7": {
      "ParticipantId": "Pilot7",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Tester1": "T1",
      "Tester2": "T4",
      "Time": "18:0:49"
    },
    "Pilot9": {
      "ParticipantId": "Pilot9",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "It's a broad problem with language as a whole, but it was challenging to anticipate how my words would be read. If I had uncertainty when writing a strategy, it's almost certain that whoever read my strategy would also feel uncertain.",
          "HardAddressing": "I don't know if it'd be particularly hard to address, but I worry about making the strategy too long. I feel like, similar with functions, it's useful to have modularity and succinctness, and I may struggle to maintain that when addressing the comment.",
          "MakeSense": "It does! I struggled to express the specifics of that action into a strategy, so it ended up being too much information for a single line. I also could have used \"return success\" or \"return failure\" in my strategy, instead of \"return done\"."
        },
        "Clarity": {
          "AspectForgotten": "Again, considering many possible interpretations of my language. It's easier when writing a programming language -- there's a shared context in keywords, but since most of Roboto isn't keywords, it's hard to define a shared context between the writer and the reader. I think that writing in a programming language-esq syntax primes me to write with brevity over clarity, since I can always append with comments instead of writing long-form prose, which might make a better strategy description (and it'd be good to do the comparison).",
          "HardAddressing": "It takes substantial effort to write a really good, concise, well-written strategies!",
          "MakeSense": "It does! Again, I totally understand that the language that I choose to use might have a different interpretation or clarity when read."
        },
        "Missing": {
          "AspectForgotten": "It's challenging to have the entire problem domain in my head at once when writing a strategy. There's probably a cognitive load/working-memory argument for why writing strategies is hard.",
          "HardAddressing": "This is easy to address, I just didn't think to address it when I was writing the strategy.",
          "MakeSense": "It does! Tester1 recognizes a part of the problem domain that I didn't consider when writing the strategy."
        },
        "OtherChallenges": {
          "AspectForgotten": "I forgot to consider how to make the strategy comprehensive, I also didn't consider how many ways my language would be interpreted and how long steps are hard to parse.",
          "HardAddressing": "Again, it'd just be effort to write a really really good strategy. There's a lot of care that should be taken with language that I didn't put as much effort into.",
          "MakeSense": "Yes! It encapsulates many of the other comments that were given -- my strategy encapsulated too much inside a single step and didn't take care of the case of multiple bugs."
        },
        "RequiredInfo": {
          "AspectForgotten": "This question isn't super relevant to a single word response.",
          "HardAddressing": "It's hard to address a comment that I don't understand!",
          "MakeSense": "This one doesn't -- it's hard to glean meaning from a single word."
        }
      },
      "Strategy2": {},
      "Tester1": "T1",
      "Tester2": "",
      "Time": "11:13:25"
    }
  },
  "AUTHORS_CONSENT": {
    "Auth1": {
      "Agreement": "agree",
      "Task": "ProfilerTask"
    },
    "Auth10": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Auth11": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Auth13": {
      "Agreement": "agree",
      "Task": "CssDebuggingTask"
    },
    "Auth14": {
      "Agreement": "agree",
      "Task": "CssDebuggingTask"
    },
    "Auth2": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Auth3": {
      "Agreement": "agree",
      "Task": "CssDebuggingTask"
    },
    "Auth4": {
      "Agreement": "agree",
      "Task": "ProfilerTask"
    },
    "Auth5": {
      "Agreement": "agree",
      "Task": "ProfilerTask"
    },
    "Auth6": {
      "Agreement": "agree",
      "Task": "CssDebuggingTask"
    },
    "Auth7": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Auth8": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Auth9": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "Pilot9": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    },
    "T2": {
      "Agreement": "agree",
      "Task": "ErrorHandlingTask"
    }
  },
  "TESTERS_CONSENT": {
    "Sneha1": {
      "Agreement": "agree",
      "Strategy1": "Auth3",
      "Strategy2": "Auth5"
    },
    "T1": {
      "Agreement": "agree",
      "Strategy1": "Auth3",
      "Strategy2": "Auth5"
    },
    "Tester1": {
      "Agreement": "agree",
      "Strategy1": "Auth3",
      "Strategy2": "Auth5"
    },
    "Tester2": {
      "Agreement": "agree",
      "Strategy1": "Auth3",
      "Strategy2": "Auth5"
    },
    "Tester4": {
      "Agreement": "agree",
      "Strategy1": "Auth1",
      "Strategy2": "Auth7"
    },
    "Tester6": {
      "Agreement": "agree",
      "Strategy1": "Auth9",
      "Strategy2": "Auth13"
    },
    "rJv5Vf5lQahz4XWayvRJ": {}
  }
}