{
  "REVISIONS": {
    "Auth1": {
      "ParticipantId": "Auth1",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I think I did consider writing the strategy in very simple language. ",
          "HardAddressing": "I think not being specific and providing enough details in the comment about why the strategy action was ambiguous and didn't make much sense to them makes it hard to address. \nIf the tester had specified why it doesn't make much sense, it could have been easier to address. ",
          "MakeSense": "Not clearly because I am not sure if the ambiguity is related to the action I wrote, the language I used or because of the variable names I used i.e. \"wrongCSSElements\" and \"wrongCSSElement\". It would have been clear if the tester had mentioned what they thought the action meant to them and what they interpreted off of it.  "
        },
        "Clarity": {
          "AspectForgotten": "I did try to write the strategy in simple terms. ",
          "HardAddressing": "Nothing",
          "MakeSense": "Yes, it does and makes sense but again similar to the first question's answer by this tester, providing some details like why they thought certain lines in the strategy were ambiguous and how they interpreted it would be very helpful."
        },
        "Missing": {
          "AspectForgotten": "I think I did consider it. ",
          "HardAddressing": "Not providing enough details or some example about not having enough info in the strategy makes it hard to understand what could have helped the tester. ",
          "MakeSense": "Not clear about this comment either. I did provide info at the top of the strategy about what is needed in order to proceed with the strategy task, so I think giving an example like what kind of preconditions and statements the tester was expecting would be helpful. \nIf I'd provided an example would that have made things more clear? \n\nAnd not sure what the tester means by \"What is missing here is the same with what the first programming task is missing.\" as I don't know what is the first programming task here. "
        },
        "OtherChallenges": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "N/A"
        },
        "RequiredInfo": {
          "AspectForgotten": "No as I was thinking the colors I saw while writing the strategy would appear the same way to others as well. ",
          "HardAddressing": "Nothing",
          "MakeSense": "Yes, it totally does and I would think the same as well but I think this is more about how the strategy was provided to the tester. While writing the strategy, I could see the colors in there. I think Monaco editor was used on that page but I am guessing it wasn't there for the tester. "
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "I didn't consider the animation aspect of html elements for troubleshooting and debugging. ",
          "HardAddressing": "I think it's not hard to address, I just didn't think of that scenario and should have clarified it in my prerequisites. ",
          "MakeSense": "Based on the tester's comment in the second question about \"what do you think is missing\" makes this comment clear. Yes, this comment does make sense as it doesn't take animated elements into consideration. "
        },
        "Clarity": {
          "AspectForgotten": "No",
          "HardAddressing": "N/A",
          "MakeSense": "Yes"
        },
        "Missing": {
          "AspectForgotten": "Yes, specifying that it doesn't take into consideration animated elements and hover over elements as well. ",
          "HardAddressing": "If the tested had provided info about why they think this strategy considers only external styling could have been helpful to understand what needs to be done differently to include inline styling in there as well. \n",
          "MakeSense": "Partially, yes, the first sentence about animated elements not being considered as part of strategy is correct as I didn't consider it, however, it considers inline styling as well as styling specified in the header. Same strategy would apply on troubleshooting inline CSS for elements as those styles would show up on inspecting the element.\nI really didn't understand what the tester is referring to about the header class. "
        },
        "OtherChallenges": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "N/A"
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes, it's not a very common scenario so forgot to consider it. ",
          "HardAddressing": "Writing a strategy that works in all cases is hard to address without making it very generic at which point it may not be helpful to troubleshoot something. ",
          "MakeSense": "Yes, it does. It's hard to consider all cases while writing a strategy as one may not be a fit-all solution. I think if I had mentioned it covers only specific type of scenarios could have been helpful though. \nOr maybe I could have add animated element section in an if-else. "
        }
      },
      "Tester1": "Tester7",
      "Tester2": "Tester8",
      "Time": "19:8:27"
    },
    "Auth13": {
      "ParticipantId": "Auth13",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes, I did. As I mentioned earlier, debugging animated elements specially the ones animated with javascript (like adding/removing DOM elements on intervals), are a bit unorthodox and hard to address.",
          "HardAddressing": "Animated elements are harder to debug since they can be added and removed from the DOM with javascript. Thus, debugging is not solely and purely related to css anymore and it requires some debugging knowledge of javascript. ",
          "MakeSense": "It makes sense. I have not anticipated animated elements while writing this strategy"
        },
        "Clarity": {
          "AspectForgotten": "I should have double check my sentences for typos and right grammar. But by the time, I was finished, I was really tired for that. Writing strategy is time consuming in general. because you have to consider many aspects and there will be chances you forget one or two, or in my case many.",
          "HardAddressing": "I am not sure my grammar was not right or it was typos. ",
          "MakeSense": "Typo in my sentences or my sentences were not in plain English?!"
        },
        "Missing": {
          "AspectForgotten": "I cannot answer that. ",
          "HardAddressing": "There is not enough information for me to address this comment. ",
          "MakeSense": "No"
        },
        "OtherChallenges": {
          "AspectForgotten": "no comment",
          "HardAddressing": "no comment",
          "MakeSense": "no comment"
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes I did. Although I might say that most, if not all, browsers' debugging tools follow a set of standard functionalities, I had google chrome in mind whilst writing the strategy.",
          "HardAddressing": "Since I have always been using chrome for testing, and not aware of other browsers' debugging tool interfaces, it is hard to have a make a strategy completely browser agnostic. ",
          "MakeSense": "Absolutely. Although I have mentioned it that preferred browser is google chrome, but I think I have made my strategy specific to chrome. "
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes, as mentioned above, I never anticipated typo in html like class typed as calss, and the reason is when writing the strategy, my mindset was focused on css and not html nor javascript being involved.",
          "HardAddressing": "Well, I believe I should improve my strategy and this is the best way to get feedback and then come up with a revised and better strategy. Like any other programming, You will have to run your code and check the expected result and then work on improvements. The difference here is your audience is not a machine running your code, It's a human being and it is definitely harder to come up with general yet simple sentences so everyone understand, specially novice developer. ",
          "MakeSense": "Yes, it does make sense. I believe the statement prior to this statement is not quite linked. Also, I have not anticipated html typo in my debugging. "
        },
        "Clarity": {
          "AspectForgotten": "No comment",
          "HardAddressing": "Nothing",
          "MakeSense": "Yes. "
        },
        "Missing": {
          "AspectForgotten": "Not that I think of. ",
          "HardAddressing": "It is hard to write set of instructions so thoroughly to address all types of scenarios in simple words so everyone can understand, specially in the first try. ",
          "MakeSense": "I don't understand what the tester means by color coding, but for \"clearer directions\", It make sense. It's always room for improvement and I could have written better and more clearer directions. "
        },
        "OtherChallenges": {
          "AspectForgotten": "no comment",
          "HardAddressing": "no comment",
          "MakeSense": "no comment"
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes, I never considered js being involved. \nConsidering all the aspects would make your strategy very long and maybe boring (or hard to follow) for the tester",
          "HardAddressing": "I found it my strategy would have become very large to explain every details. ",
          "MakeSense": "Ye and no! Yes, I should have added scenarios with js files involved, and no, which part of the ApplyCssToElement? Did the tester mean the concept of priority in css?!\nAlso the \"rainbow borders for the blue squares\", I do not know what that is but I assume it's from the tester's debugging scenario. "
        }
      },
      "Tester1": "Tester5",
      "Tester2": "Tester6",
      "Time": "10:41:53"
    },
    "Auth14": {
      "ParticipantId": "Auth14",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes, it does. says exactly what it means"
        },
        "Clarity": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes"
        },
        "Missing": {
          "AspectForgotten": "I just didn't think about it",
          "HardAddressing": "I don't think there's anything to tremendously change with my instructions, besides maybe pointing out how to look for unclear variable names or something else that may come from a 3rd party",
          "MakeSense": "yes it does. I was just focused on issues caused by the developer's own code, not 3rd party libraries"
        },
        "OtherChallenges": {
          "AspectForgotten": "see above",
          "HardAddressing": "not everyone will have the setup required to make this work. the instructions could theoretically call for it, but it's not how I work, so I hadn't considered it.",
          "MakeSense": "yes, it's another way to apply the fix directly. it only works though in the case where somebody has their editor hooked up to Chrome to allow editing"
        },
        "RequiredInfo": {
          "AspectForgotten": "see question 2 response",
          "HardAddressing": "see question 2 response",
          "MakeSense": "yes, see question 2 response"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes"
        },
        "Clarity": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes"
        },
        "Missing": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes"
        },
        "OtherChallenges": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes"
        },
        "RequiredInfo": {
          "AspectForgotten": "writing the strategy had no room for visuals, so I hadn't considered it. if there had been, I absolutely would have",
          "HardAddressing": "the strategy documentation had no way to include visuals",
          "MakeSense": "yes, adding visuals would help the guide tremendously"
        }
      },
      "Tester1": "Tester12",
      "Tester2": "Tester11",
      "Time": "15:20:5"
    },
    "Auth17": {
      "ParticipantId": "Auth17",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        },
        "Clarity": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. \nOne thing I should is steps by step now to setup Jmeter on machine. However, as developer, i thought everyone should able to do some research on their own and find the way to get it works. I learn about Jmeter on my own and I had to spent time on my own to learn how to set it up and make it works. "
        },
        "Missing": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        },
        "OtherChallenges": {
          "AspectForgotten": "One thing i didn't know is, if other testers need step by step instruction or overall strategy and they can be on their own to do some research. ",
          "HardAddressing": "One thing I should is steps by step now to setup Jmeter on machine. However, as developer, i thought everyone should able to do some research on their own and find the way to get it works. I learn about Jmeter on my own and I had to spent time on my own to learn how to set it up and make it works. ",
          "MakeSense": "yes, it does"
        },
        "RequiredInfo": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        },
        "Clarity": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. \nOne thing I should is steps by step now to setup Jmeter on machine. However, as developer, i thought everyone should able to do some research on their own and find the way to get it works. I learn about Jmeter on my own and I had to spent time on my own to learn how to set it up and make it works. "
        },
        "Missing": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        },
        "OtherChallenges": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "One thing I should is steps by step now to setup Jmeter on machine. However, as developer, i thought everyone should able to do some research on their own and find the way to get it works. I learn about Jmeter on my own and I had to spent time on my own to learn how to set it up and make it works. "
        },
        "RequiredInfo": {
          "AspectForgotten": "yes, I was totally forgot that this is web front end works which my ideas how to use Jmeter is not working for this scenarios. ",
          "HardAddressing": "nope, all i need is come up with new ideas how to do this. ",
          "MakeSense": "this one make sense to me, I did not understand the requirements when I write strategy, the tester 1 was right, my ideas is not 100% working for this situation. "
        }
      },
      "Tester1": "Tester12",
      "Tester2": "Tester11",
      "Time": "11:13:41"
    },
    "Auth22": {
      "ParticipantId": "Auth22",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I think instructions with \"such as\" might be better for comments, while instructions in something like SET should be explicit to help with clarity.",
          "HardAddressing": "This comment isn't hard to address.",
          "MakeSense": "Yes, this comment makes sense - the reviewer included the instruction in the feedback."
        },
        "Clarity": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes, thanks :) it's clear feedback"
        },
        "Missing": {
          "AspectForgotten": "n/a",
          "HardAddressing": "I don't think it's difficult to address; the tester isn't requesting anything.",
          "MakeSense": "Yes, thank you for the feedback!"
        },
        "OtherChallenges": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "Makes sense! They were able to provide their feedback in other sections."
        },
        "RequiredInfo": {
          "AspectForgotten": "n/a",
          "HardAddressing": "The tester does not request changes.",
          "MakeSense": "It makes sense! :)"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "I should have included some kind of data flow diagram as a comment to help with this.",
          "HardAddressing": "It would help a little bit to know if a specific instruction confused them, or just the whole thing. I don't think this is difficult feedback to address, though.",
          "MakeSense": "I'm 90% sure I understand what it means, it's great feedback."
        },
        "Clarity": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "yes, thanks :) it's clear feedback."
        },
        "Missing": {
          "AspectForgotten": "I didn't think enough about regressions; this is really thoughtful feedback.",
          "HardAddressing": "This is a really helpful comment and not difficult to address.",
          "MakeSense": "Makes sense, this is very thorough feedback."
        },
        "OtherChallenges": {
          "AspectForgotten": "n/a",
          "HardAddressing": "n/a",
          "MakeSense": "Makes sense! They were able to provide their feedback in other sections."
        },
        "RequiredInfo": {
          "AspectForgotten": "In my own experience debugging, I've always found examples helpful. I should have extended that to my strategy to help my testers have a more relaxing time :)",
          "HardAddressing": "This is not difficult to address, this is really helpful feedback.",
          "MakeSense": "Yes, it makes sense because I could see how the suggestion would have helped."
        }
      },
      "Tester1": "Tester18",
      "Tester2": "Tester16",
      "Time": "18:54:4"
    },
    "Auth23": {
      "ParticipantId": "Auth23",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "Already considered",
          "HardAddressing": "N/A",
          "MakeSense": "Yes. The IF clause mentioned by tester does a different action and is not covered in the previous statement"
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "Yes, the strategy was developed as a general solution",
          "HardAddressing": "CSS debugging is widely done through browsers, and the audience of this strategy was considered accordingly",
          "MakeSense": "Yes, it's completely a different approach and will tie users to specific IDE requirements"
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "No, adding pictures was not supported",
          "HardAddressing": "Limitations on Roboto to add screenshots or links to pictures (Roboto could have included links to pictures from a repository)",
          "MakeSense": "Yes"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes, already considered",
          "HardAddressing": "The strategy is intended for all existing css files. It's also mentioned in the comment as below:\n# You will see all the applied CSS files to the selected UI component \n\nFor the second part of the comment, it was not mentioned to overwrite the striked though component, but rather finding the parent component of the striked-through:\nIF 'cssProperty' is striked through\n        # Check for the same property name throughout the Styles tab\n        IF there is an \"Inherited from\" word for the CSS selector of the 'cssProperty' ...\n            Click on the component next to \"Inherited from\" ...",
          "MakeSense": "Yes, the first part of this comment is not valid because the tester missed reading the comment for all css files. The second part also might have been misunderstood by tester"
        },
        "Clarity": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "All clear"
        },
        "Missing": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "No, not sure what general css means. A page consists of multiple/one css files which was mentioned in the strategy"
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes. The aspect was hard to consider completely",
          "HardAddressing": "We cannot determine the whole CSS inheritance tree beforehand. The parent/child check step is already included in the strategy",
          "MakeSense": "Yes. It comes down to the limitation in List section of Inspect panel of the browser."
        }
      },
      "Tester1": "Tester17",
      "Tester2": "Tester16",
      "Time": "12:23:31"
    },
    "Auth3": {
      "ParticipantId": "Auth3",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I was for the most part of my work using Firefox browser so I was explaining at a high level rather than getting into details of each step.",
          "HardAddressing": "An image with a sample webpage would be more beneficial to explain better.\nI use snipping tool a lot to capture something like else for better explanation.",
          "MakeSense": "Yes.When I say \"point\" to what I meant is ... use the small icon on the  top left  of the browser debugger to pick an element of the webpage.The small pointer icon to the left of \"inspector\" can be used to inspect any part of the webpage.Also I agree that this can be done using ctrl+shift+C.\n"
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "N/A",
          "MakeSense": "100% agree.Should have explained better."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "CSS Debugging has greatly improved with the tons of features provided by the browsers itself.\nSince ALL of the CSS issues except for importing the right CSS files can be debugged and resolved using Browser tools there is not much to write in terms of strategy except for highlighting different types of CSS issues like complex CSS issues vs simple CSS issues and then use concrete examples of how to resolve each one."
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "My guess is Tester2 is familiar with the debugging process so tester2 was able to understand what I mentioned."
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "Yes but I was assuming that at this point the developer of the code is aware of the fact that the new changes should be replaced with the buggy code in the IDE and push the code to GIT after successful testing."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "13:36:31"
    },
    "Auth5": {
      "ParticipantId": "Auth5",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes shows understanding"
        },
        "Missing": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes it shows understanding"
        },
        "OtherChallenges": {
          "AspectForgotten": "I could have added more pre-reqs, possibly.  Hard to consider ALL backgrounds of every developer",
          "HardAddressing": "Specifying all the pre-reqs can sometimes be hard to predict. ",
          "MakeSense": "Yes, shows the tester had to familiarize with the profiler "
        },
        "RequiredInfo": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes, shows understanding"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "I did not consider all the different sections the user would be looking for.  There are a lot of sections in the profile so it could be challenging and time consuming to consider ever deviation. ",
          "HardAddressing": "Nothing.  It can be addressed",
          "MakeSense": "Yes.  Shows the user had a hard time finding the NET section"
        },
        "Missing": {
          "AspectForgotten": "I'm not sure since I do not understand where the tester deviated from the strategy",
          "HardAddressing": "I do not know what button the tester is referring to.  Screen shots would be helpful",
          "MakeSense": "No.  I don't understand what button the tester is referring to.  The strategy does not mention an optimize button"
        },
        "OtherChallenges": {
          "AspectForgotten": "NA",
          "HardAddressing": "NA",
          "MakeSense": "NA"
        },
        "RequiredInfo": {
          "AspectForgotten": "Perhaps I forgot to include something related to an optimize button.  I'm not sure about the optimize button or where I am supposed to use it. ",
          "HardAddressing": "I'm not sure what additional steps the tester feels he/she needs for this specific strategy. ",
          "MakeSense": "Yes. The tester is asking for more steps"
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "15:8:50"
    },
    "Auth7": {
      "ParticipantId": "Auth7",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes. I should have explained why I was assuming the backend was not available, and why this assumption makes sense. This did not occur to me that it could be controversial, but now it's obvious that it was an oversight.",
          "HardAddressing": "Because I did not know the starting point or ecosystem of a developer actually using this strategy, I had to make some key assumptions (e.g. that they are only a front end developer and I cannot ask them to modify the back end code). ",
          "MakeSense": "Only partially. I can't tell if the objection is to my key assumption (back end not available) or if the objection is to how I attempted to keep the strategy as generic as possible."
        },
        "Clarity": {
          "AspectForgotten": "Yes. I meant to come back to this item and elaborate on it further, but I forgot. It would have been helpful to have a way to tag items that were not complete.",
          "HardAddressing": "It would have taken significant additional time to spell out the some examples of the contexts in which this should be considered a failure, or not a failure. However, the wording \"stop the application\" was probably a bad choice. I should have said something more like \"return the error list now, or continue trying to execute the application\"",
          "MakeSense": "Not really. Since I don't know the context in which the strategy is being used, there are some questions I can't fully answer."
        },
        "Missing": {
          "AspectForgotten": "No, I don't believe I forgot anything. The example strategies I was shown did not contain sample code (that I recall). The interface I was provided did not allow me to add color-coding so I could not address it.",
          "HardAddressing": "The assignment was so broad, I was a little lost as to whether specific examples could even be created for the strategy or if I should keep the focus on philosophy, not implementation.",
          "MakeSense": "Yes, I agree with it."
        },
        "OtherChallenges": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "N/A"
        },
        "RequiredInfo": {
          "AspectForgotten": "I should have asked for more clarification about how to format my strategy before submitting it. This was hard to consider because I was already late in submitting my strategy, and I did not believe the formatting was what was being studied.",
          "HardAddressing": "The interface I was provided did not allow me to add color-coding (as far as I know)",
          "MakeSense": "Yes. I 100% agree with the comment. I could not always follow my own strategy as I was writing it."
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "No. I considered this aspect, but I did not find a solution (see above).",
          "HardAddressing": "I felt that the original assignment asked me to be generic as possible. I could not be more specific without knowing the language (or at least family of languages) used, and especially without knowing the architecture. If I were to assume a specific architectural context, and ask a more specific question, a less experienced developer might have answered \"No, I don't have one of those\" when in fact they had a logical equivalent for their ecosystem. This is a problem that also happens in the real world. Gaining context about the exact problem being solved is key when mentoring a less experienced programmer.",
          "MakeSense": "Yes. It's a fair criticism and a weakness in the strategy of which I was already aware."
        },
        "Clarity": {
          "AspectForgotten": "N/A",
          "HardAddressing": "Nothing",
          "MakeSense": "Yes"
        },
        "Missing": {
          "AspectForgotten": "Based on the recommended time to complete the strategy, I assumed that this level of detail was not expected. ",
          "HardAddressing": "It would have been time-consuming to add these suggested additions, and it's also hard to guess what the commenter thought was missing. I need more information about what they would have liked to see.",
          "MakeSense": "Yes. I was concerned about this when I submitted the strategy."
        },
        "OtherChallenges": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "N/A"
        },
        "RequiredInfo": {
          "AspectForgotten": "Based on the recommended time to complete the strategy, I assumed that this level of detail was not expected. ",
          "HardAddressing": "It would have been time-consuming to add these suggested additions. The example strategies I was shown did not contain sample code (that I recall).",
          "MakeSense": "Yes. In my experience, there is no such thing as too many examples when sharing programming strategies. "
        }
      },
      "Tester1": "Tester7",
      "Tester2": "Tester8",
      "Time": "23:58:49"
    },
    "Auth9": {
      "ParticipantId": "Auth9",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I assumed a certain level of experience in full stack web development.",
          "HardAddressing": "The need to explain basic null handling in SQL Server and explain web controls.",
          "MakeSense": "It makes sense and tells me that the reader it not a web developer and not familiar with web control object like list-boxes (drop down list boxes) and the term alpha for alphabetical. Web application do not take symbols as input at the as most user are not aware of the extended ASCII set and more text boxes (or textareas) like the one I am entering this text in now, will not access the keyboard entry of Alt-214 for the alpha character.  "
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "Reader does not know about web-controls.",
          "MakeSense": "Yes"
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "What to do next is up to the developer as each situation is different.",
          "MakeSense": "No. "
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "1=1 is a security issue. Best practice not to use it at all",
          "MakeSense": "Yes"
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "No."
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "I did not address JSON files.",
          "MakeSense": "I spelled the word numeric wrong. Not sure where all the JSON file references are coming from."
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "SQL Server is not JSON file based.",
          "MakeSense": "Does not make sense"
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Tester1": "Tester5",
      "Tester2": "Tester6",
      "Time": "13:42:44"
    },
    "Pilot2": {
      "Difficulties": ["Since this is just plain English, why not integrate a grammar checker :)\nbetter tools to author these stratgies "],
      "ParticipationId": "Pilot2",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n#Required Tools and Environments\\nChrome web browser\\nA JavaScript project\\n#Required Knowledge\\nBasic knowledge of how to use Chrome DevTools\\nBasic knowledge of javaScript\\nSTRATEGY performanceProfiler()\\n    # You need to first identify potential line of code\\n    # that might cause the performance overhead.\\n    # Look at data structures for any memory leaks\\n    # Look at loops and the code inside them.\\n    # Look at third party APIs calls.\\nHypothesize where in your code the bottleneck are\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\nFor EACH line in 'suspectLines'\\n    # Add large numbers to data structures\\n    # Make the loop execute thousands of time\\n    # Call that third-party API hundreds of time\\n    # If  you do so, you do not need to execute your code for long time\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n    Amplify line impact\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\nFor EACH line in 'randomLine'\\n# These lines are your baseline for how should the code work\\n# Make sure that you set similar values to that \\n# you set to 'suspectLine'  \\n    Amplify line impact\\n#Lood your javaScript through the Chrome web browser\\n#Open up the Chrome DevTools and head to the profiler\\n# Run the application and wait until all the code execute\\nRun the web application through google DevTools\\nFor EACH line in 'suspectLines'\\n    #check how the code you suspect is the problem is acting comparing to \\n    #the code that you are pretty sure has nothing to do \\n    #with the performance issue\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n        Fix\\nRETURN nothing\\n",
      "Time": "18:5:13"
    },
    "Pilot3": {
      "Difficulties": ["", "none", "none", "=)"],
      "ParticipationId": "Pilot3",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    cleare previous recording and start recording performance\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       stop recording performance\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the Main thread tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long local calls in the stackframe \\n                or Event Log where rendering or function call type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n                \\n     \\n",
      "Time": "16:42:16"
    },
    "Pilot4": {
      "Difficulties": ["Depending on example used to devise the strategy, the description may be different. First I was using my own example, which had problems in the top level of the call stack. But, your example has errors deep down the stack, which added more things to look for.", "Lack of pictures. The help page you give is much better than what I wrote."],
      "ParticipationId": "Pilot4",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        IF description is not helpful\\n            # Use the child events to drill deep into the stack\\n            Click on the red events below the current event. \\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n",
      "Time": "9:52:53"
    },
    "Pilot7": {
      "ParticipantId": "Pilot7",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Tester1": "T1",
      "Tester2": "T4",
      "Time": "18:0:49"
    },
    "Pilot9": {
      "ParticipantId": "Pilot9",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "It's a broad problem with language as a whole, but it was challenging to anticipate how my words would be read. If I had uncertainty when writing a strategy, it's almost certain that whoever read my strategy would also feel uncertain.",
          "HardAddressing": "I don't know if it'd be particularly hard to address, but I worry about making the strategy too long. I feel like, similar with functions, it's useful to have modularity and succinctness, and I may struggle to maintain that when addressing the comment.",
          "MakeSense": "It does! I struggled to express the specifics of that action into a strategy, so it ended up being too much information for a single line. I also could have used \"return success\" or \"return failure\" in my strategy, instead of \"return done\"."
        },
        "Clarity": {
          "AspectForgotten": "Again, considering many possible interpretations of my language. It's easier when writing a programming language -- there's a shared context in keywords, but since most of Roboto isn't keywords, it's hard to define a shared context between the writer and the reader. I think that writing in a programming language-esq syntax primes me to write with brevity over clarity, since I can always append with comments instead of writing long-form prose, which might make a better strategy description (and it'd be good to do the comparison).",
          "HardAddressing": "It takes substantial effort to write a really good, concise, well-written strategies!",
          "MakeSense": "It does! Again, I totally understand that the language that I choose to use might have a different interpretation or clarity when read."
        },
        "Missing": {
          "AspectForgotten": "It's challenging to have the entire problem domain in my head at once when writing a strategy. There's probably a cognitive load/working-memory argument for why writing strategies is hard.",
          "HardAddressing": "This is easy to address, I just didn't think to address it when I was writing the strategy.",
          "MakeSense": "It does! Tester1 recognizes a part of the problem domain that I didn't consider when writing the strategy."
        },
        "OtherChallenges": {
          "AspectForgotten": "I forgot to consider how to make the strategy comprehensive, I also didn't consider how many ways my language would be interpreted and how long steps are hard to parse.",
          "HardAddressing": "Again, it'd just be effort to write a really really good strategy. There's a lot of care that should be taken with language that I didn't put as much effort into.",
          "MakeSense": "Yes! It encapsulates many of the other comments that were given -- my strategy encapsulated too much inside a single step and didn't take care of the case of multiple bugs."
        },
        "RequiredInfo": {
          "AspectForgotten": "This question isn't super relevant to a single word response.",
          "HardAddressing": "It's hard to address a comment that I don't understand!",
          "MakeSense": "This one doesn't -- it's hard to glean meaning from a single word."
        }
      },
      "Strategy2": {},
      "Tester1": "T1",
      "Tester2": "",
      "Time": "11:13:25"
    }
  }
}