{
  "REVISIONS": {
    "Auth13": {
      "ParticipantId": "Auth13",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes, I did. As I mentioned earlier, debugging animated elements specially the ones animated with javascript (like adding/removing DOM elements on intervals), are a bit unorthodox and hard to address.",
          "HardAddressing": "Animated elements are harder to debug since they can be added and removed from the DOM with javascript. Thus, debugging is not solely and purely related to css anymore and it requires some debugging knowledge of javascript. ",
          "MakeSense": "It makes sense. I have not anticipated animated elements while writing this strategy"
        },
        "Clarity": {
          "AspectForgotten": "I should have double check my sentences for typos and right grammar. But by the time, I was finished, I was really tired for that. Writing strategy is time consuming in general. because you have to consider many aspects and there will be chances you forget one or two, or in my case many.",
          "HardAddressing": "I am not sure my grammar was not right or it was typos. ",
          "MakeSense": "Typo in my sentences or my sentences were not in plain English?!"
        },
        "Missing": {
          "AspectForgotten": "I cannot answer that. ",
          "HardAddressing": "There is not enough information for me to address this comment. ",
          "MakeSense": "No"
        },
        "OtherChallenges": {
          "AspectForgotten": "no comment",
          "HardAddressing": "no comment",
          "MakeSense": "no comment"
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes I did. Although I might say that most, if not all, browsers' debugging tools follow a set of standard functionalities, I had google chrome in mind whilst writing the strategy.",
          "HardAddressing": "Since I have always been using chrome for testing, and not aware of other browsers' debugging tool interfaces, it is hard to have a make a strategy completely browser agnostic. ",
          "MakeSense": "Absolutely. Although I have mentioned it that preferred browser is google chrome, but I think I have made my strategy specific to chrome. "
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "Yes, as mentioned above, I never anticipated typo in html like class typed as calss, and the reason is when writing the strategy, my mindset was focused on css and not html nor javascript being involved.",
          "HardAddressing": "Well, I believe I should improve my strategy and this is the best way to get feedback and then come up with a revised and better strategy. Like any other programming, You will have to run your code and check the expected result and then work on improvements. The difference here is your audience is not a machine running your code, It's a human being and it is definitely harder to come up with general yet simple sentences so everyone understand, specially novice developer. ",
          "MakeSense": "Yes, it does make sense. I believe the statement prior to this statement is not quite linked. Also, I have not anticipated html typo in my debugging. "
        },
        "Clarity": {
          "AspectForgotten": "No comment",
          "HardAddressing": "Nothing",
          "MakeSense": "Yes. "
        },
        "Missing": {
          "AspectForgotten": "Not that I think of. ",
          "HardAddressing": "It is hard to write set of instructions so thoroughly to address all types of scenarios in simple words so everyone can understand, specially in the first try. ",
          "MakeSense": "I don't understand what the tester means by color coding, but for \"clearer directions\", It make sense. It's always room for improvement and I could have written better and more clearer directions. "
        },
        "OtherChallenges": {
          "AspectForgotten": "no comment",
          "HardAddressing": "no comment",
          "MakeSense": "no comment"
        },
        "RequiredInfo": {
          "AspectForgotten": "Yes, I never considered js being involved. \nConsidering all the aspects would make your strategy very long and maybe boring (or hard to follow) for the tester",
          "HardAddressing": "I found it my strategy would have become very large to explain every details. ",
          "MakeSense": "Ye and no! Yes, I should have added scenarios with js files involved, and no, which part of the ApplyCssToElement? Did the tester mean the concept of priority in css?!\nAlso the \"rainbow borders for the blue squares\", I do not know what that is but I assume it's from the tester's debugging scenario. "
        }
      },
      "Tester1": "Tester5",
      "Tester2": "Tester6",
      "Time": "10:41:53"
    },
    "Auth3": {
      "ParticipantId": "Auth3",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "I was for the most part of my work using Firefox browser so I was explaining at a high level rather than getting into details of each step.",
          "HardAddressing": "An image with a sample webpage would be more beneficial to explain better.\nI use snipping tool a lot to capture something like else for better explanation.",
          "MakeSense": "Yes.When I say \"point\" to what I meant is ... use the small icon on the  top left  of the browser debugger to pick an element of the webpage.The small pointer icon to the left of \"inspector\" can be used to inspect any part of the webpage.Also I agree that this can be done using ctrl+shift+C.\n"
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "N/A",
          "MakeSense": "100% agree.Should have explained better."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "CSS Debugging has greatly improved with the tons of features provided by the browsers itself.\nSince ALL of the CSS issues except for importing the right CSS files can be debugged and resolved using Browser tools there is not much to write in terms of strategy except for highlighting different types of CSS issues like complex CSS issues vs simple CSS issues and then use concrete examples of how to resolve each one."
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "N/A",
          "HardAddressing": "N/A",
          "MakeSense": "My guess is Tester2 is familiar with the debugging process so tester2 was able to understand what I mentioned."
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "Yes but I was assuming that at this point the developer of the code is aware of the fact that the new changes should be replaced with the buggy code in the IDE and push the code to GIT after successful testing."
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": "My comments for Tester#1 applies here as well."
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "13:36:31"
    },
    "Auth5": {
      "ParticipantId": "Auth5",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes shows understanding"
        },
        "Missing": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes it shows understanding"
        },
        "OtherChallenges": {
          "AspectForgotten": "I could have added more pre-reqs, possibly.  Hard to consider ALL backgrounds of every developer",
          "HardAddressing": "Specifying all the pre-reqs can sometimes be hard to predict. ",
          "MakeSense": "Yes, shows the tester had to familiarize with the profiler "
        },
        "RequiredInfo": {
          "AspectForgotten": "NA",
          "HardAddressing": "Nothing to address",
          "MakeSense": "Yes, shows understanding"
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "NA",
          "HardAddressing": "There is nothing to address",
          "MakeSense": "Yes.  Shows that the tester followed the procedure in full"
        },
        "Clarity": {
          "AspectForgotten": "I did not consider all the different sections the user would be looking for.  There are a lot of sections in the profile so it could be challenging and time consuming to consider ever deviation. ",
          "HardAddressing": "Nothing.  It can be addressed",
          "MakeSense": "Yes.  Shows the user had a hard time finding the NET section"
        },
        "Missing": {
          "AspectForgotten": "I'm not sure since I do not understand where the tester deviated from the strategy",
          "HardAddressing": "I do not know what button the tester is referring to.  Screen shots would be helpful",
          "MakeSense": "No.  I don't understand what button the tester is referring to.  The strategy does not mention an optimize button"
        },
        "OtherChallenges": {
          "AspectForgotten": "NA",
          "HardAddressing": "NA",
          "MakeSense": "NA"
        },
        "RequiredInfo": {
          "AspectForgotten": "Perhaps I forgot to include something related to an optimize button.  I'm not sure about the optimize button or where I am supposed to use it. ",
          "HardAddressing": "I'm not sure what additional steps the tester feels he/she needs for this specific strategy. ",
          "MakeSense": "Yes. The tester is asking for more steps"
        }
      },
      "Tester1": "Tester1",
      "Tester2": "Tester2",
      "Time": "15:8:50"
    },
    "Pilot2": {
      "Difficulties": ["Since this is just plain English, why not integrate a grammar checker :)\nbetter tools to author these stratgies "],
      "ParticipationId": "Pilot2",
      "StrategyDefinition": "#This Strategy helps you identify bottleneck  in your web application.\\n#Required Tools and Environments\\nChrome web browser\\nA JavaScript project\\n#Required Knowledge\\nBasic knowledge of how to use Chrome DevTools\\nBasic knowledge of javaScript\\nSTRATEGY performanceProfiler()\\n    # You need to first identify potential line of code\\n    # that might cause the performance overhead.\\n    # Look at data structures for any memory leaks\\n    # Look at loops and the code inside them.\\n    # Look at third party APIs calls.\\nHypothesize where in your code the bottleneck are\\nSet 'suspectLines' To the line of code that might cause the bottleneck \\nFor EACH line in 'suspectLines'\\n    # Add large numbers to data structures\\n    # Make the loop execute thousands of time\\n    # Call that third-party API hundreds of time\\n    # If  you do so, you do not need to execute your code for long time\\n    # so that the memory leak surfaces or the bottleneck is obvious  \\n    Amplify line impact\\nSet 'randomLine' to random line of code that IS NOT IN 'suspectLines'\\nFor EACH line in 'randomLine'\\n# These lines are your baseline for how should the code work\\n# Make sure that you set similar values to that \\n# you set to 'suspectLine'  \\n    Amplify line impact\\n#Lood your javaScript through the Chrome web browser\\n#Open up the Chrome DevTools and head to the profiler\\n# Run the application and wait until all the code execute\\nRun the web application through google DevTools\\nFor EACH line in 'suspectLines'\\n    #check how the code you suspect is the problem is acting comparing to \\n    #the code that you are pretty sure has nothing to do \\n    #with the performance issue\\n    check their CPU time and Memory usage and compare to the similar line in randomLine\\n    IF the line in 'suspectLines' has more overhead than the line in 'randomLine'\\n        Fix\\nRETURN nothing\\n",
      "Time": "18:5:13"
    },
    "Pilot3": {
      "Difficulties": ["", "none", "none", "=)"],
      "ParticipationId": "Pilot3",
      "StrategyDefinition": "#Required Tools and Environments\\nBrowser Performance Profiler\\nPerformance problem example\\n#Required Knowledge\\nUnderstandinng of memory leaks, CPU performance hotspot, and chart analysis\\nSTRATEGY findPerformanceHotSpot()\\n    Load web application\\n    cleare previous recording and start recording performance\\n    IF perfomance dive is observable at load time\\n        # perhaps is not CPU related\\n        observe Network Profiler for unusual load times for app's libraries\\n    ELSE\\n       excercise UI to replicate slowdown\\n       stop recording performance\\n       IF UI actions triggers slowdown\\n            go to Performance tab and find frame that matches the slowdown actions\\n            Find timestamp for action start and end, and narrow down the timeline analysis window\\n            Look at the Main thread tab and analyze the call stack\\n            Inspect for unusual calls in the stackframe\\n            IF unusual call behavior found\\n                go to responsible code and comment\\n                repeat this process and compare results\\n            ELSE\\n                Inspect Unexpectedly long local calls in the stackframe \\n                or Event Log where rendering or function call type activities take more time than expected\\n                IF unusual rendering behavior found\\n                    go to responsible code and comment\\n                    repeat this process and compare results\\n                    ELSE\\n                     Try frames before the current one to backtrack the fault and repeat from this STRATEGY from the begining\\n                \\n     \\n",
      "Time": "16:42:16"
    },
    "Pilot4": {
      "Difficulties": ["Depending on example used to devise the strategy, the description may be different. First I was using my own example, which had problems in the top level of the call stack. But, your example has errors deep down the stack, which added more things to look for.", "Lack of pictures. The help page you give is much better than what I wrote."],
      "ParticipationId": "Pilot4",
      "StrategyDefinition": "#Required tools and environment\\nChrome/Chromium Browser\\n#Required knowledge\\nHTML tags\\nJS/CSS proficiency: professional\\nSTRATEGY Profile()\\n    Open the webpage that you want to profile.\\n    Open DevTools and navigate to the Performance tab.\\n    Comprehend the actions you want to profile.\\n    IF you want to only profile the page load time\\n        Click on the \"Start Profiling and reload page\" button.\\n        # Profiling will stop few seconds after page load.\\n        Wait for profiling to finish.\\n    ELSE\\n        Click on the \"Start Profiling button\"\\n        Perform your actions and click \"Stop\" when done\\n    # Each event is a rectangle box. Scrolling should zoom in and out\\n    Observe that the profiler produces a graph of events captured\\n    # Top right red corners indicate events with potential performance issues\\n    SET 'problems' TO events with red top right corners \\n    FOR EACH 'problem' IN 'problems'\\n        click on the event for the problem\\n        # The description should begin with \"Warning\" in red text.\\n        On the pane below, look for a description of the problem.\\n        IF description is not helpful\\n            # Use the child events to drill deep into the stack\\n            Click on the red events below the current event. \\n        Use the link to understand the problem.\\n        Use the Call Stack to locate the source of problem.\\n        Fix it.\\n    Return \"You Did It\"\\n",
      "Time": "9:52:53"
    },
    "Pilot7": {
      "ParticipantId": "Pilot7",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Strategy2": {
        "ChallengingToWork": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Clarity": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "Missing": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "OtherChallenges": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        },
        "RequiredInfo": {
          "AspectForgotten": "",
          "HardAddressing": "",
          "MakeSense": ""
        }
      },
      "Tester1": "T1",
      "Tester2": "T4",
      "Time": "18:0:49"
    },
    "Pilot9": {
      "ParticipantId": "Pilot9",
      "Strategy1": {
        "ChallengingToWork": {
          "AspectForgotten": "It's a broad problem with language as a whole, but it was challenging to anticipate how my words would be read. If I had uncertainty when writing a strategy, it's almost certain that whoever read my strategy would also feel uncertain.",
          "HardAddressing": "I don't know if it'd be particularly hard to address, but I worry about making the strategy too long. I feel like, similar with functions, it's useful to have modularity and succinctness, and I may struggle to maintain that when addressing the comment.",
          "MakeSense": "It does! I struggled to express the specifics of that action into a strategy, so it ended up being too much information for a single line. I also could have used \"return success\" or \"return failure\" in my strategy, instead of \"return done\"."
        },
        "Clarity": {
          "AspectForgotten": "Again, considering many possible interpretations of my language. It's easier when writing a programming language -- there's a shared context in keywords, but since most of Roboto isn't keywords, it's hard to define a shared context between the writer and the reader. I think that writing in a programming language-esq syntax primes me to write with brevity over clarity, since I can always append with comments instead of writing long-form prose, which might make a better strategy description (and it'd be good to do the comparison).",
          "HardAddressing": "It takes substantial effort to write a really good, concise, well-written strategies!",
          "MakeSense": "It does! Again, I totally understand that the language that I choose to use might have a different interpretation or clarity when read."
        },
        "Missing": {
          "AspectForgotten": "It's challenging to have the entire problem domain in my head at once when writing a strategy. There's probably a cognitive load/working-memory argument for why writing strategies is hard.",
          "HardAddressing": "This is easy to address, I just didn't think to address it when I was writing the strategy.",
          "MakeSense": "It does! Tester1 recognizes a part of the problem domain that I didn't consider when writing the strategy."
        },
        "OtherChallenges": {
          "AspectForgotten": "I forgot to consider how to make the strategy comprehensive, I also didn't consider how many ways my language would be interpreted and how long steps are hard to parse.",
          "HardAddressing": "Again, it'd just be effort to write a really really good strategy. There's a lot of care that should be taken with language that I didn't put as much effort into.",
          "MakeSense": "Yes! It encapsulates many of the other comments that were given -- my strategy encapsulated too much inside a single step and didn't take care of the case of multiple bugs."
        },
        "RequiredInfo": {
          "AspectForgotten": "This question isn't super relevant to a single word response.",
          "HardAddressing": "It's hard to address a comment that I don't understand!",
          "MakeSense": "This one doesn't -- it's hard to glean meaning from a single word."
        }
      },
      "Strategy2": {},
      "Tester1": "T1",
      "Tester2": "",
      "Time": "11:13:25"
    }
  }
}